

 Angular is:
                - a Javascript framework
                - the app runs in the client browser
                - it uses HTML/CSS and TypeScrip


 expressive HTML      add features like if/else



 1 Angulare app = component + componenet + component + ...
                 --------------------------------------
                             services <------------------------------they provide DATA and LOGIC to the components


 1 component = template     +    class (properties + methods)               Metadata
               ------------------------------------------------     +    ----------
                  UI                   code                              extra data of a component

               . view layout        . written in                         . defined with a
               . html                 typescript                           'decorator'
               . includes                                                  which is a function (prefixed by @)  Java annotations
                  - binding                                                that adds metadata to
                  - directives                                             a class (proprieties & methods)

      here a component example:

                                   |  import {Component} from '@angular/core';     <------- the required import of 'Component' decorator
                                   |
                                   |  @Component ({                                <------- Metadata & Template
                                   |        selector: 'pm-root',  <--- this will be the id in the index.html    <body> <pm-root>.....</pm-root> </body>
                                   |        template: `                            <--- between backtick  if on more lines         |
                                   |                                                    otherwise " is ok                          |
                                   |                                                  <----- this template is what will go inside here
             some_file.ts          |              <div><h1>{{pageTitle}}</h1>         <-------------------- the {{ ... }} are the data binding
                                   |                   <div> My First Component</div>
                                   |              <div>
                                   |        `
                                   |  })         <---- no ';' here
                                   |
                                   |  export class AppComponent {                   <------- class
                                   |         pageTitle: string = 'Acme Product Management';
                                   |  }

                                            ───────┬───────────────────────────────────
                                                   │ File: src/app/app.component.ts
                                                   │ Size: 211 B
                                            ───────┼───────────────────────────────────
                                               1   │ import { Component } from '@angular/core';
                                               2   │
                                               3   │ @Component({
                                               4   │   selector: 'pm-root',
                                               5   │   templateUrl: './app.component.html',   <----- templates not inline
                                               6   │   styleUrls: ['./app.component.css']
                                               7   │ })
                                               8   │ export class AppComponent {
                                               9   │   title = 'stef1app';
                                              10   │ }





_____________________________________
CSS
               they are linked in the meta data of a decorator

               @Component({
                    selector: ...
                    styles:['thead {color: #337AB7;']    <----- inline as an array of

               @Component({
                    selector: ...
                    styleUrls:['./product-list/componenet.css']    <----- an array of pathnames


_____________________________________
install
                  1. install node.js
                  2. this will bring in, even "npm" (node package manager) which will install all the required libraries
                  3. create the 'package.json' file containing all the dependencies
                     they are among the others:
                                         - angular    (more libraries)
                                         - typescript

                                          1 {
                                          2   "name": "apm",
                                          3   "version": "0.0.0",
                                          4   "scripts": {  <------------------------ these are the scripts that I can run (ex. npm start)
                                          5     "ng": "ng",
                                          6     "start": "ng serve -o",
                                          7     "build": "ng build",
                                          8     "watch": "ng build --watch --configuration development",
                                          9     "test": "ng test"
                                         10   },
                                         11   "private": true,
                                         12   "dependencies": {                     <------ these are the dep for develop + DEPLOYMENT (the live app)
                                         13     "@angular/animations": "^14.0.0",                  \
                                         14     "@angular/common": "^14.0.0",                      |
                                         15     "@angular/compiler": "^14.0.0",                    |
                                         16     "@angular/core": "^14.0.0",                        |____________ this is the Angular set of lib
                                         17     "@angular/forms": "^14.0.0",                       |
                                         18     "@angular/platform-browser": "^14.0.0",            |
                                         19     "@angular/platform-browser-dynamic": "^14.0.0",    |
                                         20     "@angular/router": "^14.0.0",                      /
                                         21     "rxjs": "~7.5.0",        <---- this to connect to a DB
                                         22     "tslib": "^2.3.0",
                                         23     "zone.js": "~0.11.4"
                                         24   },
                                         25   "devDependencies": {                  <------ these are the dep for develop only
                                         26     "@angular-devkit/build-angular": "^14.0.3",
                                         27     "@angular/cli": "~14.0.3",
                                         28     "@angular/compiler-cli": "^14.0.0",
                                         29     "@types/jasmine": "~4.0.0",
                                         30     "jasmine-core": "~4.1.0",
                                         31     "karma": "~6.3.0",
                                         32     "karma-chrome-launcher": "~3.1.0",
                                         33     "karma-coverage": "~2.2.0",
                                         34     "karma-jasmine": "~5.0.0",
                                         35     "karma-jasmine-html-reporter": "~1.7.0",
                                         36     "typescript": "~4.7.2"      <---- here it is typescript
                                         37   }
                                         38 }
                  4. npm install
                  5. npm start  <---- this run the script at line 6:  ng serve -o

                                                                    - ng is the angular cli
                                                                    - serve is the command to start the app
                                                                    - -o means top open the url in the default browser

_____________________________________
ng (cli)
                  the angular cli
                  it's installed with the 'npm install', but this will install it locally
                  $ npm install -g @angular/cli           (will install it globally)

_____________________________________
ng (cli) to create a new app from scratch

                  $ ng new stef1app  --prefix pm        # the 'pm' will be prefixed to -root to create the placehloder in the index.html

                  stef1app
                     |_____
                            README.md
                            angular.json
                            karma.conf.js
                            package-lock.json
                            package.json
                            src
                            src/app
                            src/app/app.component.css
                            src/app/app.component.html
                            src/app/app.component.spec.ts
                            src/app/app.component.ts
                            src/app/app.module.ts
                            src/assets
                            src/environments
                            src/environments/environment.prod.ts
                            src/environments/environment.ts
                            src/favicon.ico
                            src/index.html   <--------------------- index.html contains the main page
                            src/main.ts                                        which is often the only Web page of the app
                            src/polyfills.ts                                   so Angular app are called
                            src/styles.css                                     Single Page Application (SPA)
                            src/test.ts                                        it contains all the required JS to download:
                            tsconfig.app.json                                     <script src="runtime.js"   defer></script>
                            tsconfig.json                                         <script src="polyfill.js"  defer></script>
                            tsconfig.spec.json                                    <script src="main.js"      defer></script>


                                        ───────┬───────────────────────────
                                               │ File: src/index.html
                                               │ Size: 292 B
                                        ───────┼───────────────────────────
                                           1   │ <!doctype html>
                                           2   │ <html lang="en">
                                           3   │ <head>
                                           4   │   <meta charset="utf-8">
                                           5   │   <title>Stef1app</title>
                                           6   │   <base href="/">
                                           7   │   <meta name="viewport" content="width=device-width, initial-scale=1">
                                           8   │   <link rel="icon" type="image/x-icon" href="favicon.ico">
                                           9   │ </head>
                                          10   │ <body>
                                          11   │   <pm-root></pm-root>      <---- here the 'pm' prefix prepared
                                          12   │ </body>
                                          13   │ </html>


                                after 'npm start' (after transpiling/compilation) it becomes:

                                        <!doctype html>
                                        <html lang="en">
                                        <head>
                                          <meta charset="utf-8">
                                          <title>Stef1app</title>
                                          <base href="/">
                                          <meta name="viewport" content="width=device-width, initial-scale=1">
                                          <link rel="icon" type="image/x-icon" href="favicon.ico">
                                        <link rel="stylesheet" href="styles.css"></head>
                                        <body>
                                          <pm-root></pm-root>
                                                  <script src="runtime.js"            type="module">
                                                  </script><script src="polyfills.js" type="module">
                                                  </script><script src="styles.js" defer>
                                                  </script><script src="vendor.js"    type="module">
                                                  </script><script src="main.js"      type="module"></script>
                                        </body>
                                        </html>

_____________________________________
Angular Module

                                ───────┬────────────────────────────────
                                       │ File: src/app/app.module.ts
                                       │ Size: 307 B
                                ───────┼────────────────────────────────
                                   1   │ import { NgModule }      from '@angular/core';
                                   2   │ import { BrowserModule } from '@angular/platform-browser';
                                   3   │ import { AppComponent }  from './app.component';
                                   4   │
                                   5   │ @NgModule({
                                   6   │   declarations: [ AppComponent ],     <---- my componnent
                                   7   │   imports: [ BrowserModule ],         <---- angular or 3rd party component
                                   8   │   providers: [],
                                   9   │   bootstrap: [AppComponent]
                                  10   │ })
                                  11   │ export class AppModule { }

_____________________________________
Extending to reuse more components

                       1/3)         I create 1 new component (ex a list/table)

                                            ───────┬───────────────────────────────────
                                                   │ File: src/app/products/product.module.ts     <--- 1 new dir under src/app/
                                                   │ Size: 211 B
                                            ───────┼───────────────────────────────────
                                               1   │ import { Component } from '@angular/core';
                                               2   │
                                               3   │ @Component({
                                               4   │   selector: 'pm-poducts',  <------------------ here the new selector
                                               5   │   templateUrl: './product-list.component.html',
                                               6   │ })
                                               7   │ export class ProductListComponent {
                                               8   │ }


                       2/3)         I link it

                                            ───────┬───────────────────────────────────────
                                                   │ File: src/app/app.component.ts
                                                   │ Size: 227 B
                                            ───────┼───────────────────────────────────────
                                               1   │ import { Component } from '@angular/core';         here
                                               2   │                                                      |
                                               3   │ @Component({                                         |
                                               4   │   selector: 'pm-root',                               |
                                               5   │   template: " <div><h1>{{pageTitle}}</h1>  <pm-poducts></pm-poducts> <div>"
                                               7   │ })
                                               8   │ export class AppComponent {
                                               9   │   title = 'Angular: Getting Started';
                                              10   │ }


                       3/3)         I update the app


                                ───────┬────────────────────────────────
                                       │ File: src/app/app.module.ts
                                       │ Size: 307 B
                                ───────┼────────────────────────────────
                                   1   │ import { NgModule }      from '@angular/core';
                                   2   │ import { BrowserModule } from '@angular/platform-browser';
                                   3   │ import { AppComponent }  from './app.component';
                                   4   │ import { ProductListComponent }  from './products/product-list.component'; <-------- here
                                   5   │
                                   6   │ @NgModule({
                                   7   │   declarations: [ AppComponent, ProductListComponent ],  <------------ and here
                                   8   │   imports: [ BrowserModule ],
                                   9   │   providers: [],
                                  10   │   bootstrap: [AppComponent]
                                  11   │ })
                                  12   │ export class AppModule { }


_____________________________________
*ngIf
                    <table class='table' *ngIf='products.length'>         # products is here a var array coming from the component
                                                                          # so the code here checks to true if the array length > 0

_____________________________________
*ngFor
                    <tr *ngFor='let product of products'>                 # let is a keyword which defines the loop var 'product'
                                <td>{{product.name}}</td>                 # which will cycle on the component's var products
                                <td>{{product.price}}</td>



_____________________________________
DATA BINDING
               1) Interpolation:           <h1>{{pageTitle}}</h1>                 export class .... {
                                                      '--------<-----<-----<------     pageTitle: string = ....
                                                                  (1 way)

                                                     Values calculated in the template are called
                                                         TEMPLATE EXPRESSIONS
                                                     and their values come from the "component"
                                                     or said otherwise they live in the component's context


                            Note: Interpolation can be more general:
                                          - {{'Title: ' + pageTitle}}    # concat
                                          - {{2*20+1}}                   # eval

               2) Property Binding      <img [src]='product.imageUrl'>        # note the different syntax wrt interpolation:
                                               |           |                  # <img src={{product.imageUrl}}>
                                               |           |
                                             Element    Template Expression
                                             property

                                        Even if the syntax is different between 1) & 2) they do the same thing.
                                        The html attribute (ex. [src]= or src=) is mapped to a component property
_____________________________________
EVENT BINDING
               <button> (click)='toggleImage()'>        # toggleImage is a method in the component

               They bind events in the page (DOM) back to the component's code.


_____________________________________
DOUBLE BINDING
               they implement the double way.
               value in the DDM <--------------> property in the class

               ex                                                                                          |
               ____________________DOM_______________________             _________ COMPONENT __________   |
               <input type='text'   [(ngModel)]='listFilter'/>            listFilter: string = 'cart';     |
                                        |                                                                  |   what happens
                                        |                                                                  |   in this example:
                                        keyword                                                            |   the DOM is initialised
                                        dfined importing 'FormsModule'                                     |   with a text field with a value 'cart'
                                                                                                           |   if the user starts typing
                                                                                                           |   any current value is
                                        ___________________ APP MODULE _________________________           |   sent back to the
                                        import {FormsModule} from '@angular/forms';   <---------           |   component
                                        ....                                                               |
                                        @NgModule ({                                                       |
                                               ...                                                         |
                                               imports: [                                                  |
                                                          BrowseModule,                                    |
                                                          FormsModule   <---------                         |
                                               ],


_____________________________________
INTERFACES
               There are 2 ways to use an Interface

               1) to use it as a type

                                               export interface IProduct {
                                                   productId: number;
                                                   .....
                                                   imageUrl: string;
                                               }

                                     usage      ----------------------->   products: IProduct[] = [];


               2) to use it as feature set (the normal way)

                                               export interface DoTiming {
                                                    count: number;
                                                    start(index: number): void;
                                                    stop(): void;
                                               }
                                     usage      ----------------------->   export class myComponent implements DoTiming {
                                                                                count: number = 0;
                                                                                start (index: number): void {
                                                                                    ..
                                                                                }
                                                                                stop(): void {
                                                                                    ..
                                                                                }
_____________________________________
PIPE
               unix-like style to change the values in the templates
               ex
                   {{product.name | lowercase }}
                   [title]='product.name | uppercase'
                   {{product.price | currency | lowercase }}              # currency bultin (linked to locale)
                   {{product.price | currency:'USD':'symbol':'1.2-2' }}   # example how to pass args if a pipe function has some

               I can define my own 'pipe' function.
               I must import the Pipe decorator and implement the PipeTransform interface (which means providing its 'transform' function)

                                   import {} from '@angular/core'

                                   @Pipe ({
                                        name: 'AAAAAA'
                                   })
                                   export class AAAAAA implements PipeTransform {

                                         transform(value: string, character: string): string {
                                             ..
                                         }
                                   }

_____________________________________
LIFECYCLE HOOKS
              A component's lifecycle ( create/ render/ create-render-chilren/ process changes/ destroy)
              can process the events of these state,
              implementing these events ("implementing", because these events (ex OnInit/ OnChanges/ OnDestroy)  are interfaces
              (defined  in '@angular/core')

              import { ..., OnInit } from '@angular/core';

              export class ProductListComponent impements OnInit {
                                                ^^^^^^^^
                  ngOnInit():void {      <----- the required function to implement
                       ..
                  }

_____________________________________
typescript
               playground:  https://www.typescriptlang.org/play

               It's a superset of Javascript  (JS code is then valid typescript code)
               It's strong typed
               It transpiles code to JS code before the browser executes it  (so the browser will always run JS code)


