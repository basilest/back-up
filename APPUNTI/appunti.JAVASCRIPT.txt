

vim plugin:
           JSLint
            jshint.com
           Syntastic Vim plugin - Best syntax-checker around for plenty of languages,
                                  plus it integrates with Vim's location-list (==quickfix) window.
           jsl (JSLint executable)
            tern.js


npm          to update npm the best way is via itself
             npm install -g npm



                        JavaScript is part of the triad of technologies that all Web developers must learn:
.HTML        the content of web pages,
.CSS         the presentation
.JavaScript  the behavior.    (with the advent of Node (http://nodejs.org),
                               JavaScript has also become an important programming language for web servers

-UNICODE        JavaScript programs are written in Unicode (a 16.bit superset of ASCII supportings
                                                           virtually every written language currently used on the planet)
-case-sensitive.
                       Note on string comparison: all capital ASCII letters are “less than” all lowercase.
                       According to < the string “Zoo” comes before the string “aardvark”

-comments           //  1 line             /*   block  */

-var name        must begin [_$a-zA-Z]

-reserved word:
                 break  case          catch       continue       debugger      default      delete
                 do     else          false       finally        for           function     if
                 in     instanceof    new         null           return        switch       this
                 throw  true          try         typeof         var           void         while
                 with
                 ECMAScript 5 reserves :
                 class  const         enum        export         extends       import       super

-separate commands:       ';'    (optional if:
                                            .1 command on 1 line
                                            .last command of the script
                                            .last command before }

-primitive types:
                N.B. JavaScript converts from one type to another.
                     (ex. a function expects a string, and you give it a number: it's converted into a string)

-untyped:       you can assign a value of any type to a variable, and you can later assign another
                J. performs automatic conversion. To perform an explicit conversion the simplest way is to
                use the Boolean()   Number()   String()   Object() functions:
                         Number("3")   //  3
                         String(false) //  "false" Or false.toString()
                         Boolean([])   //  true
                         Object(3)     //  new Number(3)

-declare:       Variables are declared with 'var':    (you should always declare your variables with var!!)
                          var i, sum;                    <--- this var has value 'undefined'
                          var i = 0, j = 0, k = 0;

                          for(var i = 0, j=10; i < 10; i++,j--) console.log(i*j); <--- Note inside a 'for'

-scope:         In C-like each block of code {} has its own scope, (var are not visible outside)
                This is called block scope.
                JavaScript instead, uses function scope:
                var are visible in the fun where defined and in any nested fun in that function.


-numbers:       There are no int. All numbers are float 64.bit
                - hexadecimal:   0xff      0X1CA
                - exponential:   6.02e23   1.47E-32
                - Infinity -Infinity     (produced ex when dividing for 0. It's not an exception in Javascript)
                - 0/0 generates a Javscript exception  (indicated by 'NaN')
                - isNaN()    true if x is Nan
                - isFinite() true if x is different from NaN and Infinity

                  Math.pow(2,53)      => 9007199254740992: 2 to the power 53
                  Math.round(.6)      => 1.0: round to the nearest integer
                  Math.ceil(.6)       => 1.0: round up to an integer
                  Math.floor(.6)      => 0.0: round down to an integer
                  Math.abs(-5)        => 5: absolute value
                  Math.max(x,y,z)     Return the largest argument
                  Math.min(x,y,z)     Return the smallest argument
                  Math.random()       Pseudo-random number 0 <= x < 1.0

                  Math.PI                   π
                  Math.E                    e: The base of the natural logarithm
                  Math.sqrt(3)              The square root of 3
                  Math.pow(3,1/3)           The cube root of 3
                  Math.sin(0)               Trig: also Math.cos, Math.atan, etc.
                  Math.log(10)              Natural logarithm of 10
                  Math.log(100)/Math.LN10   Base 10 logarithm of 100
                  Math.log(512)/Math.LN2    Base 2 logarithm of 512
                  Math.exp(3)               Math.E cubed

                 var n = 17;
                    binary_string = n.toString(2);           // "10001"
                    octal_string  = "0" + n.toString(8);     // "021"
                    hex_string    = "0x" + n.toString(16);   // "0x11"

                parseInt() parseFloat()
                              skip leading whitespace,
                              parse as many numeric characters as they can,
                              and ignore anything that follows.

                       parseInt("3 blind mice")       //    3
                       parseFloat(" 3.14 meters")     //    3.14
                       parseInt("-12.34")             //    -12
                       parseInt("0xFF")               //    255
                       parseFloat("$72.47");          //    NaN

                var n = 123456.789;
                       n.toFixed(2);                  // "123456.79"
                       n.toExponential(3);            // "1.235e+5"
                       n.toPrecision(7);              // "123456.8"


-Strings:       - array of 16.bit Unicode Char starting from pos.0 to len-1
                  char must be accessed by s.charAt(). In ECMAScript 5 also as s[0]  or s[s.length-1]
                - Delimit them with both "" or ''
                - s.length  to have the len
                - '+' to concatenate:   msg = "Hello, " + "world";
                - usual escape   \n \t \\

                  var s = "hello, world"
                  s.charAt(0)                   => "h": the first character.
                  s.charAt(s.length-1)          => "d": the last character.
                  s.substring(1,4)              => "ell": chars 2, 3, and 4
                  s.slice(1,4)                  => "ell": same thing
                  s.slice(-3)                   => "rld": last 3 characters
                  s.indexOf("l")                => 2: position of first l.
                  s.lastIndexOf("l")            => 10: position of last l.
                  s.indexOf("l", 3)             => 3: position at or after 3
                  s.split(", ")                 => ["hello", "world"]
                  s.replace("h", "H")           => "Hello, world":
                  s.toUpperCase()               => "HELLO, WORL"

                  Note that any value other than 'null' or 'undefined' has a
                                 toString() method
                  and the result of this method is usually the same as that returned by the
                                 String() function

-'+':             + gives priority to string concatenation: if either of the operands are strings
                    (or an object that converts to a string), the other operand is converted to a string and
                    concatenation is performed. Addition is performed only if neither operand is string-like.

-Boolean:         'true' 'false'  a == 4
                  As J. is untyped, following value used in Boolean comparison means 'false'
                           / undefined
                           | null
                    false  | 0
                           | -0
                           | NaN
                           \ "" // the empty string

-null / undefined:    - null:  to use when numbers.strings.objects have no value
                               is a keyword
                               typeof(null) returns the String 'object'
                      - undefined: is a J. global variable (not a keyword)
                               is the value of var never initialized
                               the return value of fucntions which have no return
                               the value of var that not exist (field of an object, or par of a function)
                      Despite these differences, null and undefined both indicate an absence of value
                      and can often be used interchangeably. The equality operator == considers them to be equal (and 'false')
                     (Use the strict equality operator === to distinguish them.)

                     Note: In the strict mode of ECMAScript 5, a nonexistent variable throws a ReferenceError

                     Note the result here:

                         x + "" // Same as String(x)
                         +x     // Same as Number(x). Also x-0
                         !!x    // Same as Boolean(x). NB: double !

-eval()              Like any interpreted language also javascript has the 'eval()'
                     eval() expects one argument. If its is a:
                      . value it simply returns that value.
                      . string, it attempts to parse the string as JavaScript code  # ex. eval("3+2")
                         throwing a SyntaxError if it fails to parses the string

                     It has the scope of the functions that call it (so can see that fun local var), but can be
                     overwritten with possible code snippetes like the following

                         eval("var y = 3;")      # var y would hide any other local var y
                         eval("function f() { return x+1; }");   # defines on the fly an inner function

-The Global Object:  A J. program when started has a Global Object (like a unix environment) instantiated. Any
                     user global var is a field of the Global Object. You can refer in any time to the Global Object
                     (and to its fields) with the usual keyword 'this'.

-array:              [] // An empty array
                     [1+2,3+4]
                     var matrix = [[1,2,3], [4,5,6], [7,8,9]];


-Object:             Like array but use  {} instead:
                     var q = {};              // Empty object; no properties
                     var p = { x:2, y:1 };    // An object with 2 properties
                     q.x = 2; q.y = 1;        // Now q has the same prop as p

                     var rectangle = { upperLeft:  { x: 2, y: 2 },
                                       lowerRight: { x: 4, y: 5 } };

                     property names may be quoted strings (this is useful to use names that are reserved words)
                     var square = { "ul": { x: p.x, y: p.y },
                                    'lr': { x: p.x + side, y: p.y + side}};

                     Moreover property can be accessed with 2 notations:
                         object . prop
                         object [prop]
                     The [] form is useful when the property name is a reserved word or includes spaces or special cahr.

                     Object Creation:  new Point(2,3)
                                       new Object()      If no arguments are passed the empty pair of parentheses can
                                                         be omitted: new Object     new Date
                     in: returns 'true' if that object-var has a property which that name:
                         var p = { x:1, y:1 };
                             "x" in p            //  true: p has a property named "x".
                             "z" in p            //  false: p has no "z" property.
                             "toString" in p     //  true: p inherits toString.
                         var a = [7,8,9];
                             "0" in a            //  true: a has an element "0"
                             1 in a              //  true: numbers are converted

                     Instead of using the in operator, it is (sometimes)  sufficient the !==

                              var o = { x: 1 }
                              o.x !== undefined;     true
                              o.y !== undefined;     false

                     this doesn't work if property exists but have been set to undefined
                             var o = { x: undefined }
                             o.x !== undefined    false
                             "x" in o             true



                     instanceof:
                         var d = new Date();
                             d instanceof Date;        //  true
                             d instanceof Object;      //  true
                             d instanceof Number;      //  false
                         var a = [1, 2, 3];
                             a instanceof Array;       //  true
                             a instanceof Object;      //  true


Strict equality ( === )   If both operands have different types                              --> false
                          If both operands are primitive types and their values are the same --> true
                          If both operands refer to the same object, array, or function      --> true
                          If they refer to different objects
                             even if both objects have identical properties                  --> false
                         two arrays that have the same elements in the same order            --> false
                         NaN not equal to any other value, including itself!

Strict inequality ( !== ) is the exact opposite of the ===

Loose equality ( == )    If the values of the two operands are not the same type,
                         it attempts conversions and tries again.
                         null ==  undefined  --> true
                                                                 1     == "1"  \
                                                                 true  == 1     |
                                                                 "1"   == true  | <-- all true
                                                                 false == 0     |
                                                                 []    == 0    /

&&  ||:     As J. can interpret any type for boolean (according to type conversion) && and || have
            deep meaning in J. The rules are:
                1. As soon as a result can be returned the interpretation is stopped
                   (so following operands of && || are not considered) - short circuit as C & Perl
                2. The return value is the operands that make the interpretation stopped

                   var o = { x : 1 };
                   var p = null;
                   o && o.x // returns 1: o is truthy, so return o.x
                   p && p.x // returns null: p is falsy, so don't eval p.x which is evaluated would have throws an TypeError

                   var max = max_width || preferences.max_width || 500;    often used to supply default values

                   function copy(o, p) {
                                        p = p || {};               // If no object passed for p, use a new one
                                        ...... }

typeof:        it returns a String:
                                        x                 typeof x
                                 ----------------------------------------
                                 undefined                 "undefined"
                                 null                      "object"
                                 true or false             "boolean"
                                 any number or NaN         "number"
                                 any string                "string"
                                 any function              "function"
                                 any nonfunction object    "object"

delete:         attempts to delete the object property or array element
                     var o = {x:1, y:2}, a = [1,2,3];
                     delete o.x;      //  Delete a property of o
                     "x" in o         //  false: the property does not exist
                     delete a[2];     //  Delete the last element of the array
                     2 in a           //  false: array element 2 doesn't exist

with            with (object)
                     statement
                The with statement is:
                 forbidden in strict mode
                 deprecated in nonstrict mode

"use strict";   <---  This 13 chars mark in the code the position, from which on the
                 code will be 'compiled' according to ECMA5 constraints.
                 So for ex.
                        no 'with' usage
                        all variab must be declared with 'var'
                        ...
--------------------------------------------------------------- STATEMENTS

              All the C statements.

for/in        a form of iteration usefull when iteration the properties of an object:
                      for(var p in o)
                           console.log(o[p]); // Print each property

              The ECMAScript specification does not describe the order in which the loop
              enumerates the properties of an object.
              In practice, JavaScript implementations from all major browser
              enumerate  the properties of simple objects in the order in which they were defined

throw         The syntax is:    throw expression;        expression may be a value of any type:

                                          - a number (that represents an error code)
                                          - a string (that contains a human-readable error message).
                                          - an Error() object: used by J. but you can use them as well. Has:
                                                       . a name property (that specifies the type of error)
                                                       . a String message property passed to the constructor

               function factorial(x) {
               if (x < 0) throw new Error("x must not be negative"); <-----------
               for(var f = 1; x > 1; f *= x, x--) /* empty */ ;
               return f;
               }

try/catch/finally
                   try {                                                    |
                   // Normally, this code runs from the top of the block    |try {
                   // to the bottom without problems. But it can            |     var n = Number(prompt("Enter n", ""));
                   // sometimes throw an exception, either directly, with   |     var f = factorial(n);
                   // a throw statement, or indirectly, by calling a        |     alert(n + "! = " + f);
                   // method that throws an exception.                      |}
                   }                                                        |
                   catch (e) {                                              |
                   // The statements in this block are executed if, and     |  catch (ex) {
                   // only if, the try block throws an exception. These     |           alert(ex);
                   // statements can use the local variable e to refer      |  }
                   // to the Error object or other value that was thrown.   |
                   // This block may handle the exception somehow, may      |
                   // ignore the exception by doing nothing, or may         |
                   // rethrow the exception with throw.                     |
                   }                                                        |
                   finally {                                                |
                   // This block contains statements that are always        |
                   // executed, regardless of what happens in the try       |
                   // block.                                                |
                   }                                                        |



--------------------------------------------------------------- OBJECS
                          Objects are manipulated by reference rather than by value:
                          var y = x; y holds a reference to x, not a copy.
                          Any modifications through y modifies also x

create:      1.   use the syntax { name_field : value }

                     var empty = {};           // An object with no properties
                     var point = { x:0, y:0 }; // Two properties
                     var point2 = {
                                    x:point.x,
                                    y:point.y+1
                                };
                     var book = {                                 // property names are quoted
                                    "main title": "JavaScript",   // space in property name
                                    'sub-title': "Pocket Ref",    // punctuation in name
                                    "for": "all audiences",       // reserved word name


             2.  use new      (in ECMAScript 5) with the Object.create()

                 var o  =  new  Object();        // An empty object: same as {}.
                 var a  =  new  Array();         // An empty array: same as [].
                 var d  =  new  Date();          // A Date for the current time.
                 var r  =  new  RegExp("js");    // A pattern matching object.

             4.  prototype:  It's like a 'father class for an object.
                             any object has a 'Object.prototype' object behind
                             primitive types most often has this: Object.prototype
                             but they can have others (ex. Date as both Date.prototype
                             and Object.prototype) so there can be 'chains' of
                             prototypes associated to an object

                             So it's like javascript has a multiple inheritance.

                             using the following 3-steps core code I can make an
                             'inheritance' function:

                             1. function f() {};
                             2. f.prototype = p;
                             3. return new f()

                          function inherit(p) {
                             if (p == null) // p must be a non-null
                                  throw TypeError();
                             if (Object.create)              // Use Object.create()
                                  return Object.create(p);   // if it is defined.
                             var t = typeof p;               // Make sure p is an object
                                  if (t !== "object" && t !== "function")
                             throw TypeError();

                             function f() {};           // Define a dummy constructor.
                             f.prototype = p;           // Set its prototype property
                             return new f();            // Use it to create an "heir" of p.
                          }

             3.  (ECMAScript 5)  create()
                             Object.create() is a static function. The args are:
                             1st: the list of prototypes I want to associate to that object.
                             2nd (optional)  the same type as specified in  Object.defineProperties()
                                             after in these notes.

                             new Object()  is equivalent to   Object.create(Object.prototype)

             4.  fields (or properties)
                             when I write o.x  J goes through all the chain of prototypes
                             to serach for field 'x' if it's not present directly in 'o'.


                                 var o = {}           // o inherits object methods from Object.prototype (ex. toString()
                                 o.x = 1;             // and has an own property x.
                 see above f <-- var p = inherit(o);  // p inherits properties from o and Object.prototype
                                 p.y = 2;             // and has an own property y.

                                 var q = inherit(p);   // q inherits properties
                                 q.z = 3;              // and has an own property z.
                                 var s = q.toString(); // toString is inherited from Object.prototype
                                 q.x + q.y             // x and y are inherited form o, p


             5.  hasOwnProperty()
                                we've already seen the 'in' fun to return true if an Object
                                has that prop. Other fun are
                                o.hasOwnProperty("x");      true if o has x directly not inheritated!
                                o.propertyIsEnumerable("x")  more strict. It's like hasOwnProperty()
                                                             but true also if 'x' is 'enumerable'
                                                             Properties created by normal
                                                             JavaScript code are enumerable.
                                                             Certain built-in
                                                             properties are not enumerable:
                                                             toString method is not enumerable
                                function extend(o, p) {
                                         for(prop in p) {  // go through all the (enumerable) prop of p
                                         o[prop] = p[prop]; // Add the property to o.
                                         }
                                         return o;
                                } // this function add to o all the prop of p
                                     o mantains what it had before

                               Instead of for (prop in p) to go through all the enumerable prop
                               there are 2 functions to get the names:

                               Object.keys()   returns an array of the names of the enumerable own prop
                               Object.getOwnPropertyNames()  (ECMAScript 5) ALL (not just the enumerable)



--------------------------------------------------------------- Serialization

JSON.stringify()         to have a string from an object    s = JSON.stringify(o);
JSON.parse()             to reread back an build an object  p = JSON.parse(s);

JSON stands for “JavaScript Object Notation,”
--------------------------------------------------------------- GETTER / SETTER

the sugar syntax is used the keyword 'get' and 'set' and a comma after the fun definition:

      var p = {
                x: 1.0,
                y: 1.0,
                get r() {
                     return ...
                },             <--- comma
                set r( ...) {
                     this.x *= ...
                     this.y *= ...
                },             <--- comma

--------------------------------------------------------------- Property Attributes
            each field of an object has 4 properties:

                                             value
                                             writable
                                             enumerable
                                             configurable

            they are conatined in what (ECMAScript 5) calls a 'property descriptor'

         -  to get this 'property descriptor' there is the fun Object.getOwnPropertyDescriptor()
            ex. for the above p is
            Object.getOwnPropertyDescriptor(p, "x");  --> Returns {value: 1.0, writable:true,
                                                                   enumerable:true, configurable:true}

         -  it's possible to create or modify fields and their prop through the fun
            Object.defineProperty():

            var o = {}; // Start with no properties at all

            Object.defineProperty(o, "x", { value : 1,  // Add a nonenumerable x with value 1.
                                            writable: true,
                                            enumerable: false,
                                            configurable: true});

                                // Check that the property is there but is nonenumerable
            o.x;                // => 1
            Object.keys(o)      // => []
                                // Now modify the property x so that it is read-only
            Object.defineProperty(o, "x", { writable: false });
                                // Try to change the value of the property
            o.x = 2;            // Fails silently or TypeError in strict mode
            o.x                 // => 1
                                // The property is still configurable, so we can change its value like this:
            Object.defineProperty(o, "x", { value: 2 });
            o.x                 // => 2
                                // Now change x to an accessor property
            Object.defineProperty(o, "x", {
                                            get: function() { return 0; }
                                            });
            o.x                 // => 0


    If you want to create or modify more than one property at a time, use
                          Object.defineProperties() .
    1st argument is the object that is to be modified.
    2nd argument is an object that maps the names of the properties to be created or modified

    For example:
    var p = Object.defineProperties({}, {
                                          x: { value: 1, writable: true,
                                          enumerable:true, configurable:true },
                                          y: { value: 1, writable: true,
                                          enumerable:true, configurable:true },
                                          r: {
                                          get: function() {
                                          return Math.sqrt(this.x*this.x+this.y*this.y)
                                          },
                                          enumerable:true,
                                          configurable:true
                                          }
                                          });

--------------------------------------------------------------- Object Attributes

          Every object has associated 3 attributes
                                                    prototype,
                                                    class,
                                                    extensible

          prototype: we have seen that each object has behind a prototype obj. It is
                     1.  Object.prototype   when the obj is created
                                            literally:    var point = { x:0, y:0 };

                     2.  Date.prototype  (for ex)   when the obj is created
                                                    with a new():     var d = Date();

                     3. any obj spec. as 1st arg when the obj is created
                                                 with a create()      var o = Object.create(p);

                     Object.getPrototypeOf() : return the prototype chain of 1 obj
                     p.isPrototypeOf(o):  returns 'true' if p is prototype of o

                     var p = {x:1};
                     var o = Object.create(p);         // Inherit from p (prototype).
                     p.isPrototypeOf(o)                // true.
                     Object.prototype.isPrototypeOf(p) // true for any object.

          class: it should be the string name of the Class of any obj.
                     ECMA standard does not specify well. There are tricky ways which
                     rely on to String;

                     function classof(o) {
                              if (o === null) return "Null";
                              if (o === undefined) return "Undefined";
                              return Object.prototype.toString.call(o).slice(8,-1);
                     }

          extensible: allow or avoid an object can be modified/ extended in the future.
                     There is a set of functions.
                     nb. there is no way to undo their effects
                                Object.preventExtensions() :     avoid future mods
                                Object.seal()              :     more strict
                                Object.freeze()            :     even more strict

                                Object.isExtensible()
                                Object.isSealed()
                                Object.isFrozen()
--------------------------------------------------------------- Classes

    J Classes are different from standard C++/Java OO (strongly-typed)

    The prototype object, is the central feature of a class:
    "a class is a set of objects that inherit properties
     from the same prototype obj"

    Thus, if we define a prototype object, and then use Object.create()
    to create objects that inherit from it, we have defined a JavaScript class.











--------------------------------------------------------------- DOM

   Content of a Web page = Document Object (DO). It's the central object
   of a larger model (DOM: (Document Object Model)) that is a set of API
   around DO.

tree:   the HTML / XMTL docs are modelled as a 'hierarchy tree', where
        the 'NODES' are both
              the '<tag>s'   (called ELEMENTS-nodes)    (1)
              the text 'String' representing some values (called TEXT-nodes) (2)
        The 'root' of the tree is the 'DOCUMENT'-node (3)

        1-2-3 are the 3 type of nodes in the tree

        The most general above terminology in the specific case of HTML can use
        the names DOCUMENT <--> HTMLDocument  ELEMENT <--> HTMLElement

Javascript:  provides a lot of functions to manipulate the node of the tree
        The first set of API is to 'SELECT' the proper node
        There are different ways to select:
            1. by 'id'
            2. by 'name'
            3. by 'tag'
            4. by CSS class/ classes
            5. by CSS selector

    ----------------- 1. by id

     'id' is the 'attrib' of a HTML tag.
     Each HTML Elem has its own, and any value is different from the others.

     - getElementByyyId()    var sect1 = document.getElementById("section1");

    ----------------- 2. by name

    'name' is not unique like 'id'. It's usually present in some <tag>
    usually in the form, with user/ passw/ radiobutton/ checkbox/ ...


     - getElementsByName()      var btns = document.getElementsByName("color");

                                as 'name' can be not unique in the 'document'
                                the fun can return 1 entry or a list of all the
                                nodes (with that 'name')   (the list is of type 'NodeList')
                                If it's only 1 in all the doc, can be directly accessed:

                     var form = document.shipping_address; // Get the object for <form name="shipping_address">
                                        ^  ^^^^^^^^^^^^
    ----------------- 3. by tag

    ex get all the nodes for a specific <tag>  (ex <span>)

     - getElementsByTagName()             var spans = document.getElementsByTagName("span");
                                          It returns a list (ordered like they are in the doc).
                                          to get the 1st:
                                          var a = document.getElementsByTagName("p")[0]
     '*'           to get all the tags: getElementsByTagName("*")

     The list can be of type 'NodeList' or also for some tag of type 'HTMLCollections'.
     (<img> <form>  <a>). Anyhow they works with the same functions.  These lists are
     read-only.
                            // Loop through all images and hide them
                            for(var i = 0; i < document.images.length; i++)
                            document.images[i].style.display = "none";

--------------------------------------------------------------- .
   (Apache) Subversion [SVN]

   2000 created by CollabNet to replace CVS
   2009 accepted in (Apache) Incubator
        Apache Incubator is the gateway for open-source projects
        intended to become fully fledged Apache Software Foundation projects.


   2016: ver 1.9


   Repository : SNC calls them 'filesystem'

   Repository type: FSFS "FileSystem atop the FileSystem" is since 2004
                    the new format replacing the 2000 original 'Berkley DB'
                    It stores the FSF repo structure, the 'filesystem'
                    as a file in the normal Linux filesystem

   Accesses:        To access the repo, there are 3 protocols:
                       . file:///....    access the filesystem local or network)
                       . http[s]://      using inside Apache 2 the module (mod_dav_svn)  (WebDAV)
                       . svn://          custom protocol over TCP (port 3690)
                                         it becomes 'svn+ssh://' when tunneling over ssh

   Architecure:    is built as a stack of layers:
                       . FS     : lowest level, is the versioned filesystem
                       . Repos    wrapper araound the bare Filesystem (FS)
                                  it's a set of scripts that run on some events
                                  FS + Repos constitute  the 'filesystem interface'
                       . mod_dav_svn  implements the http[s] protocol interface
                       . RA       Repos Access, implements the other accesses (protocols: file, & svn)
                       . Client:  the most abstract level to manage high level client tasks (authentication, ...)

   Revisions:     a filesystem_path + number

   Transactions  operations on the Repo are
                   - atomic operations on revisions (any, not necessarily the last)
                   - done as a series of these atomic steps (transactions).

   Properties    are text pairs 'name=value' that user can add with no limit
                 to any node of the tree.
                 Some built in properties are available.
                 They have tha form: 'svn:xxxxxxx'=value (so a 'name' starting with 'svn:')
                 ex: svn:executable=....
                     svn:ignore=....
                     svn:eol-style=....

                 Properties are themself versioned.

   Rename        are implemented as 'copy + delete'



