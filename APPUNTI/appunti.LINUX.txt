--------------------------------------------------- USER INFO
user info (like name, password, default shell ....)
     can be changed with the commands:
             chpass    <---- but the 'passwd' is more powerful (chpass utility cannot change the user's password on Open Directory systems)
             chfn
             chsh
--------------------------------------------------- SHELLS
cat /etc/shells       <---- to see all the shells available
                    ex:
                        /bin/bash
                        /bin/csh
                        /bin/ksh       <--- ex to change to this as default: chsh -s /bin/ksh
                        /bin/sh                                               ^
                        /bin/tcsh
                        /bin/zsh

to change default shell (in user info)  chsh

--------------------------------------------------- known files & places


     /etc/services
     /etc/passwd
     /etc/environment
     /etc/profile.d/*.sh

     ~/.bashrc  ~/.bash_profile  ~/.bash_login
     ~/.profile
     ~/.pam_environment


--------------------------------------------------- / ipcs

    ipcs    (System V) inter-process communication
             shows the info.
             Alone or with explicit -a (default) shows ALL info

             otherwise can extract only
                    -m      shared memory
                    -q      msg-queues
                    -s      semaphores-array

            ex: ipcs -s

            ------ Semaphore Arrays --------
            key        semid      owner      perms      nsems
            0x00000000 895877189  sbasile   600        1
            0x00000000 895909958  sbasile   600        1
            0x00000000 895942730  sbasile   600        1
            0x00000000 895975500  sbasile   600        1

     ipcrm      to remove some resources
                -m  id
                -q  id
                -s  id

                there is the version UPPERCASE (-M -Q -S)
                where I can submit the 'key' instead of the 'id'

     ex. to remove all:
                for whatever in `ipcs -s | awk '{print $2}'`; do ipcrm -s $whatever;
                done


--------------------------------------------------- / OpenSSL
       library (written in C) containing the implementation of the protocols
                    SSL    Secure Sockets Layer (SSL),    - predecessor
                    TLS    Transport Layer Security (TLS) - more modern

       Snowden, revealed that since 2010, the NSA had effectively broken/bypassed SSL/TLS


--------------------------------------------------- / Encription

       SERVER             13           CLIENT
 i)    ----------------- [P]-----------------   a common prime number [P] is agreed
                                                between CLIENT & SERVER
                          7
 ii)   -----------------[AES]----------------   a common algorithm ("encryption generator" (ex AES))
                                                is agreed. Ex. choose another PRIME P2  (7)
 iii)   8                                5
       [pS]                             [pC]    2 normal integers are individually chosen by CLIENT and SEVER
                                                They are kept secret and not sent.
 iv)    1                                6
       [pubS]                           [pubC]  2 public keys are generated individually (& sent)
                                                using some formula F and the info so far:

                                                          ( P , AES , pS ) ---> pubS
                                                          ( P , AES , pC ) ---> pubC

                                                ex F: (P ^ pS   mod  P2)
                                                                      13 ^ 8   % 7 = 815730721 % 7 = 1
                                                                      13 ^ 5   % 7 = 371293    % 7 = 6


 v)    [K]                              [K]     Diffie-Hellman alg. proves that working individually with the info so far,
                                                both CLIENT & SERVER calculate the same number [K]

                                                          Diffie-Hellman ( P - pS - pubC ) ---> K
                                                          Diffie-Hellman ( P - pC - pubS ) ---> K

                                                                      6  ^ 8   % 7 = 1679616  % 7 = 1
                                                                      1  ^ 5   % 7 = 1        % 7 = 1

                                                called "Session key"
                                                that is used to encrypt all the communication that follows.

                                               The magic is due to a property of modulo exponents:

                                                           ( P ^ x mod P2 ) ^ y  mod P2  = P ^ xy  mod P2   = K
                                                           ( P ^ y mod P2 ) ^ x  mod P2  = P ^ yx  mod P2   = K


        To have K that can be any value between 1 - (P-1)
        the P2 at step ii) is chosen as a "primitive root modulo P" that is a quite complex stuff
        and it's not easy to locate it with a simple formula, even if they are still calculated with
        more complex calculations.

       session key
       Asymmetrical Encryption
       Symmetrical Encryption
       aes128-ctr
       1st authentication : establish encryption to protect future communication.
       2nd encrypting the connection
       public/private asymmetrical key pairs that can be created are only used for authentication,
       public  key:  can only encrypt messages (not able to decrypt back)
       private key:  the only component capable to decrypt
       session key:  Diffie-Hellman
                     client & server combine individually their own private data with public data
                     from the other system to arrive at an identical secret session key.
--------------------------------------------------- / ssh
        SERVER              CLIENT
         |                  | ~/.ssh/known_hosts
         |                  |       /id_rsa
         |              1)  |       /id_rsa.pub <--- ex. "ssh-rsa AAAAB3N.....sbasile@pd12682.internal.ch"
         |                  |            |                     ^
         |                  |            |to copy here
         |                  |            |
     2)  |~/,ssh/authorized_keys  <------' 1 line for each pub-key (so copy pasted here the client id_rsa.pub)
         |                  |              (nb. each *.pub key has the 1st chars saying its type: rsa/dsa/...)
       __|_____            _|_______       The server will authenticate only these clients
      |        |          |         |
      |  sshd  |  <=====> |   ssh   |
      |________|          |_________|


      There could be different ways to configure the handshaking, anyhow
      roughly it is:
             1) a client connects

    - 'sshd':   is the real OpenSSH daemon (on the server)
                that interacting with the other ssh client
                they together  allow a secure encrypted communication
                over an insecure network.

                -D   sshd will not detach and does not become a daemon.
                     This allows easy monitoring of sshd.
                -f   to specify a config file other than /etc/ssh/sshd_config
                -p   a port other than 22


    ~/.ssh    <--- is a dir (on the client) (N.B. chmod must be 700 for this dir)
                   containing usually something like:

                          -rw-r--r--  1 sbasile  staff   182 10 Jul  2015 config
                          -rw-------  1 sbasile  staff   668  2 Jul  2015 id_dsa <---- keys for SSH version 2 <--- DEFAULT
                          -rw-r--r--  1 sbasile  staff   626  2 Jul  2015 id_dsa.pub
                          -rw-------  1 sbasile  staff  3243 29 Jun  2015 id_rsa <---- keys for SSH version 1
                          -rw-r--r--  1 sbasile  staff   753 29 Jun  2015 id_rsa.pub
                          -rw-------  1 sbasile  staff  1468  6 Jan 13:00 known_hosts
                          -rw-r--r--  1 sbasile  staff    45  3 Jun  2015 ssh_configo

                          the convention is
                            |    ~/.ssh/identity     rsa  SSH ver. 1
                       (D)  |    ~/.ssh/id_rsa       rsa  SSH ver.   2
                            |    ~/.ssh/id_dsa       dsa  SSH ver.   2
                            |    ~/.ssh/id_ecdsa   ecdsa  SSH ver.   2

                                                   ec : elliptic curve

    - Once having a public key (eg id_rsa.pub) it's possible to log into a remote server R
      doing this on R:
                     - create or enter into dir ~/.ssh   (must have chmod 700)
                     - append in ~/.ssh/authorized_keys (or create if not present, with chmod 640)
                       the exact text of ~/.ssh/id_rsa (with no new line)
                     - (some servers that the file is called with an ending 2: a authorized_keys2)

                   ______________________________________
                   | Most probably the above commands are executed directly onto server R
                   | but anyhow ssh allows to execute each as ex:
                   |    - ssh basilest@R mkdir -p .ssh   (and add the password at prompt)
                   |    - cat .ssh/id_rsa.pub | ssh basilest@R 'cat >> .ssh/authorized_keys'
                   |_____________________________________



    - 'ssh-keygen': the above files are created by 'ssh-keygen':
                    ex. ssh-keygen -t rsa -b 4096 -C "your_email@example.com"  -f pippo_rsa

                              -t : rsa1            for SSH v.1
                                   rsa,dsa,ecdsa   for SSH v. 2
                              -b : min is    768
                                   default  2048
                                   ecdsa: ec sizes are 256 384  521

                              -f   to add a meaningfull name (otherwise you don't know for which
                                   server it was created)
                                   So in ~/.ssh can stay many diffenet ssh-keys for different servers.

                              -O
                                   clear      clear all enabled permissions.  This is useful to clear
                                              the default set of permissions that can be
                                              added individually.

                                   force-command=command
                                              Forces the execution of command instead of any shell or
                                              command specified by the user when the certificate is
                                              used for authentication.

                                   no-agent-forwarding     Disable ssh-agent(1) forwarding
                                   no-port-forwarding      Disable port forwarding
                                   no-pty                  Disable PTY allocation
                                   no-user-rc              Disable execution of ~/.ssh/rc by sshd(8)
                                   no-x11-forwarding       Disable X11 forwarding


                          config
                               1	KeepAlive yes
                               2	ServerAliveInterval 20

                               3	Host github.com
                               4	  User git
                               5	  ProxyCommand /usr/local/bin/corkscrew wsproxy.internal.ch 8080 %h %p

                               6	Host wswebdev1
                               7	  HostName %h.orctel.internal
                          id_dsa
                               1	-----BEGIN DSA PRIVATE KEY-----    <--- this was without a passphrase
                               2	MIIBugIBdAKBgQCpHnP/mm59BzhOKjelK+BqozuwK3Li804qXkOfW0PC1em2CXAn
                               3	Al2AVYG/5ydl5uNuW1NEb+phcuLkhNhXYbf0fs7+q6Xbm/9Nt3I74Z4OFkSEUYfV
                                                   ....
                              10	3CKM0PWJEa4aFMC9qNRZoFhRVdTzpQlussZdunYlLOjGmwZlHnPTGgIULR79nL2p
                              11	v5Iq6mWKZqVm0sEniWY=
                              12	-----END DSA PRIVATE KEY-----
                                             id_dsa
                                                  1	-----BEGIN DSA PRIVATE KEY-----    <--- this how it looks with a passphrase
                                                  2	Proc-Type: 4,ENCRYPTED
                                                  3	DEK-Info: AES-128-CBC,2DADDEF9CB50685509A1197A4D244772
                                                                      ....
                                                 10	3CKM0PWJEa4aFMC9qNRZoFhRVdTzpQlussZdunYlLOjGmwZlHnPTGgIULR79nL2p
                                                 11	v5Iq6mWKZqVm0sEniWY=
                                                 12	-----END DSA PRIVATE KEY-----
                          id_dsa.pub
                               1	ssh-dss AAAAB3NzaC1kc3MAAACBAKkdc/+abn0HO....== sbasile@pd12682.companieshouse.local
                          id_rsa
                               1	-----BEGIN RSA PRIVATE KEY-----
                               2	MIIJKQIBAAKCAgEA8zHExVpDqZNOBO38byaIrFZn1vaNRj+lAvkNEL6HZIZYaVyc
                              50	            ....
                              51	-----END RSA PRIVATE KEY-----
                          id_rsa.pub
                               1	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQ....== sbasile@pd12682.internal.ch
                          known_hosts   <--- stores the servers where I connected to
                               1	wswebdev2.orctel.internal,192.168.60.202 ssh-rsa AAAAB3NzaC1yc2....
                               2	wswebdev1.orctel.internal,192.168.60.201 ssh-rsa AAAAB3NzaC1yc2....
                               3	github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDb....
                               4	chl-dev,10.100.100.102 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwZak....
                          ssh_config
                               1	ServerAliveInterval 15
                               2	ServerAliveCountMax 3

                      passphrase : when generating a key, if no passphrase is specified the key (ex. id_rsa file)
                                   is in clear text. With a passphrase it is encripted, so even if an hacker can access my id_rsa
                                   it's not usable.

    - 'ssh-agent':     it can be started to run in background,

                 eval "$(ssh-agent -s)"  --> Agent pid 3319
                 echo $SSH_AGENT_PID     --> 3319
                 lsof | grep -i 3318     --> ssh-agent 3319 sbasile    3u    unix 0x6b706d27656c46d7  0t0  /var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-9sXXPCGOd5l2/agent.3318
                 echo ${SSH_AUTH_SOCK}   --> /var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-9sXXPCGOd5l2/agent.3318
                                             the default values is $TMPDIR/ssh-XXXXXXXXXX/agent.<ppid>
                 echo $TMPDIR            --> /var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T/

                       it can be started to run in background, eval "$(ssh-agent -s)"
                       having a pid (which is then stored in var  $SSH_AGENT_PID).
                       This agent opens a UNIX socket in $TMPDIR (full name in ${SSH_AUTH_SOCK}
                       but it can be changed with option -a: ssh-agent -a ...).
                       On this read-only-by-the-user SOCKET channel,
                       the agent interacts with the other utilities of the ssh- family:

                           ssh-add
                           ssh-keygen
                           ssh
                           sshd

                 ssh-agent -k        <-- it exits (kill) the running instance of ssh-agent
                                        (the pid is still in $SSH_AGENT_PID))
                                        the output is unset SSH_AUTH_SOCK;  <---- so use ssh-agent -k to remember these names
                                                      unset SSH_AGENT_PID;
                                                      echo Agent pid 3319 killed;

    - 'ssh-add':   adds any desired keys to the agent  (ex. ssh-add ~/.ssh/id_rsa)

                       ssh-add         with no arguments adds the 4 files (D) above, (or what present of them)
                                       (the passphrase (if any) must be filled)
                       ssh-add -l      list of the keys inside the agent
                       ssh-add -d      To remove the loaded keys (it can be usefull to test the passpharse
                                       because after the ssh-add -d another ssh-add  will ask for the passphrase)

    - The sequence is usually:
                               1. eval "$(ssh-agent -s)"       create a running instance of ssh-agent
                               2. ssh-add                      add any desired keys
                               3.

    - Configure SSH server:  add a 'git' user shared among all the project developers:
                             sudo adduser git
                             su git
                             cd
                             mkdir .ssh && chmod 700 .ssh
                             touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
                             cat /tmp/id_rsa.john.pub    >> ~/.ssh/authorized_keys
                             cat /tmp/id_rsa.josie.pub   >> ~/.ssh/authorized_keys
                             cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
                             cd /opt/git
                             mkdir project.git
                             cd project.git
                             git init --bare
                             cat /etc/shells    <--- store all possible shells (add the path of git limited shell)
                             which git-shell    /usr/bin/git-shell
                             sudo vim /etc/shells
                             sudo chsh git      <--- add git to user able to login with a shell (chsh: change login shell)
                                                     user xxx can log from remote: ssh git@gitserver
    - 'ssh':
                ssh -v git@github.com     -v verbose   -vv   -vvv (max)


                -1    try SSH ver 1
                -2         "     2
                -4    IPv4 addr only
                -6    IPv6      only

                -p                 to connect to a port different from 22
                -i keyfile         do specify something diff from the defaults ~/.ssh/id_dsa ...
                -g                 Allows remote hosts to connect to local forwarded ports.
                -e escape_char     can change the escpae default char ~ (see below, session manag.) to another


    - session commands:
                        ENTER ~ .          ENTER: to be sure to have a newline
                                           ~      starts the submission of ssh control char
                                           .      ssh control char to mean END session

                                           The above close a stuck ssh session.

                             ~?            help (list of avail escapes)

                             ~^Z           suspend the remote ssh connection and
                                           allow to be at 'local' prompt.
                        Once I'm over, a fg bring me back into remote.
--------------------------------------------------- /
To know Ubuntu version
    cat /etc/issue
or otherwise
    lsb_release -a    # part of pkg 'lsb': Linux Standard Base support for Debian

---------------------------------------------------
                   FILE SYSTEM
-----------------------------------

  Filesystem Hierarchy Standard         FHS version 3.0   - 2015/03/19
                                       (http://refspecs.linuxfoundation.org/fhs.shtml)


  - "Shareable"   files (stored on one host and used on others ex. home user files)
                  so they can be 'mounted' by others
  - "Unshareable" files not shareable. (device lock files)
  - "Static"      files that do not change without root intervention, (binaries, libraries, docs ...)
  - "Variable"    files not static.

  Once both static and var were in /usr & /etc. Now var files should be placed in /var
  and keep /usr mounted read-only in case it is on another host.

  _____________________________
  ROOT - Filesystem:  /
  _____________________________

         - Must contain utilities to restore/repair/mount
         - Must be kept minimal to be less prone to disk corruption as the result of a system crash.
         - So as a guideline Applications must never create or require special files/subdir in the root dir.


   / bin      33 most useful commands (sh, kill, rm, cp, cat, ls, sh, mount ...)
              (less usefull ex 'id'  must be put in /usr/bin

                 - sh : if is not the POSIX compatible, must be a link (hard or soft) to that.
                 - '[' and 'test'  must be put TOGETHER in either / bin or /usr/bin

   / bin      <--- still in /bin as themselves or symlinks
                   csh  (usually to /bin/tcsh or /usr/bin/tcsh)
                   tar, gzip, cpio    to make system restoration (if / is intact)
                                      if no restoration from the root partition is ever expected
                                      but maybe is expected from the network, then ftp or tftp
                                      must be added

              Linux has also /bin/setserial to manage a serial port

   / sbin     (/usr/sbin /usr/local/sbin)
              should contain root-onlyc-cmds to boot or recover the system. Ex
                              - shutdown
                              - reboot
                              - fastboot      (optional) reboot without disk check
                              - fasthalt      (optional) stop     "           "
                              - fdisk         partition tbl
                              - fsck          disk repair
                              - mkfs          build filesystem
                              - mkswap        build swap area
                              - route         IP routing tbl
                              - swapon/off    Enable/Disable paging
              The division between /bin and /sbin
              was not created for security reasons or to prevent users from
              seeing the operating system, but to provide a good
              partition between user & root binaries. There is no inherent security advantage in
              making /sbin off-limits for users.

                   - so users should have no reason to add /sbin in their PATHs
                   - moreover sbin must have no subdirs


   / boot     what is required for the boot
                   - the kernel    (can stay even directly in '/'
                                    in this case is recommend to be named vmlinux or vmlinuz

              - progs required by boot                     --> /sbin
              - config files not strictly required by boot --> /etc

   / dev      for special / device files
              MAKEDEV <-- a command that must be present if special
                          files have to be added by hand.
                          (maybe as a link to /sbin)

              /dev/null    trash to write - EOF      when used to read
              /dev/zero       "  "   "    - 0 bytes   "            "
              /dev/tty     synonym for the controlling terminal of a process. Once this device is opened,
                           all reads and writes will behave as if the actual controlling terminal device
                           had been opened.

   / etc      should contain (preferably in subdirs than directly in /etc)
              config files of the programs, or even 'executables' but as
              scripts (NOT BINARIES (ELF)) (ex. those called by init)

              Following subdirs (even as a link)
              should be here if the corresponding subsystem is installed)

              opt     (config files for dir  /opt)
                      usually it contains subdirs xxx with same name of the
                      prog's dir in /opt/xxx

              X11    (containing xorg.conf  & Xmodmap)
              sgml
              xml

              csh.login
              exports        (NFS filesystem access control list)
              ....
              networks       (Static information about network names)
              services       (standard PORTS)
              shells         (PATH for valid shells)
              syslog.con     (Configuration file for syslogd)


   / home     On smaller systems, is usually a dir directly under /home (ex. /home/torvalds)
              On larger  systems (can be simething like: /home/staff /home/guests /home/students

              To find a user's home directory, use a library function such as
                               getpwent        C function:  man getpwent
                               getpwent_r      <--- reetrant version
                                                    A function is reentrant if it can be interrupted in the middle
                                                    of its execution and then safely be called again before
                                                    its previous invocations complete execution.
              of fgetpwent
              rather than relying on
                 /etc/passwd            (ex. cat /etc/passwd | grep -i basi
                                             sbasile:x:875:600:Stefano Basile - Development User:/home/sbasile:/bin/bash)
              because user information may be stored remotely using systems such as NIS


              NIS: The Network Information Service, (originally called Yellow Pages or YP) is a client–server
              directory service protocol for distributing system configuration data such as user and host names
              between computers on a computer network. Sun Microsystems developed the NIS; the technology
              is licensed to virtually all other Unix vendors.
              Because British Telecom PLC owned the name "Yellow Pages" trademark in the
              Sun changed to NIS, though all the commands and functions still start with “yp”.



              User specific config files are stored in the user's home in a '.' files
              If an application needs to create more than one dot file then they should
              be placed in a '.' subdirectory (a "dot directory"). In this case the
              config files should NOT start with the '.'

   / lib    -  shared libraries needed to boot and run the commands in the root filesystem (/bin /sbin)
               Only the shared libraries for /bin /sbin  should stay here.

               at least one of the following (as file or links)
            -          libc.so.*      --> ex /lib/libc.so.6
            -          ld*            --> ex ld-2.3.4.so    ld-linux.so.2  ld-lsb.so.3
               If a C preprocessor is installed,
            -          /lib/cpp
               must be a reference to it

            -  modules/           Loadable kernel modules dir
                                  ex.    2.6.9-89.EL  2.6.9-89.ELsmp  kabi-4.0-0  kabi-4.0-0smp


   / media    contains subdir which are used as mount points for removable media such as
              floppy disks, cdroms and zip disks

              Historically there have been a number of other different places used to mount
              removable media such as  /cdrom /mnt /mnt/cdrom
              Placing the mount points for all removable  media
              directly in '/' would  potentially  result in a large number of extra dirs

              Although the use of subdirs in /mnt has recently been common,
              it conflicts with a much older tradition of using /mnt directly as a TEMPORARY mount point.

              A distribution with more drives (ex. 2 CDROM) usually numbers them from 0
                      ex. /media/cdrom0 /media/cdrom1
              with /media/cdrom a symlink

   / mnt      so that the system admin may TEMPORARILY mount a filesystem

   / opt      For additional SW (like the firefox addons)
              in the form
                    /opt/<packahe_name>
                    /opt/<provider_name>     LANANA registered name.
                                             The Linux Assigned Names And Numbers Authority
                                             www.lanana.org/
                    /opt/<pxxxx_name>/share/man if there are mans

              Reserved names for system admin:
                                              /opt/bin
                                              /opt/doc
                                              /opt/include
                                              /opt/info
                                              /opt/lib
                                              /opt/man

   / root     (optional) the home for user root

   / run      files here must be cleared (removed or truncated as appropriate) at boot.
              Then it contains data related to the system since it was booted.
              Each prog can have here its file (or its dir for > files)
              Old versions used /var/run now most should have migrated to this.

              PID - a file of type <prog>.pid   (ex. crond.pid)
              containing that prog PID should stay here (once was in /etc )
              PID files should contain the number + \n  (ex PID=25 --> a file of 3 bytes)

   / srv      should store data related to a system (ex. /srv/ftp /srv/www ...)
              There is no consensus on the naming convention to use.

   / tmp      recommended to be cleared on boot.

   / usr       shareable, read-only.
               That  means is shareable between various FHS-compliant hosts
               and must not be written.

                bin/       (perl, python, tclsh, wish, expect)
                include/    C includes.
                lib/        obj files and libs (usually not intended to be executed directly by users or shell scripts)
                            ex /lib/perl5/
                            - /usr/lib/sendmail
                libexec/    used only by some distros like and together with lib/
                local/      when installing locally some SW without the risk to be overwritten
                            by SW upgrades in /usr.
                sbin/       any non-essential binaries used exclusively by root.
                share/      all read-only architecture independent data files

   / var        contains  variable  data  files: spool  dir and files,  admin logging data, transient and temp files.

---------------------------------------------------
                   KERNEL
-----------------------------------

   ftp://ftp.ora.com/pub/examples/linux/drivers/

     ---------------------------------- Kernel numbers
     2.6.x   (the even versions) are STABLE
     2.7.x   (the odd  versions) NOT   (under development, they expire in some days)



--------------------------------------------------  compile another kernel in a free dir

   1. goto:   https://www.kernel.org/pub/linux/kernel/v3.0/

   2. downloaded :
                 linux-3.18.9.tar.gz     07-Mar-2015 13:23  117M

   3. make a clean dir: ~/kernel    + ~/kernel/build

   4. unzip linux-3.18.9.tar.gz inside ~/kernel

   5. write this funct in .bashrc
             function kb {
                 mkdir -p ~/kernel/build/$(basename $(pwd))
                 echo     ~/kernel/build/$(basename $(pwd))
             }
   6. cd linux-3.18.9
      make distclean
      make defconfig O=`kb`
      make O=`kb`

   7. here the kernel image:   ~/kernel/linux-3.18.9/arch/x86/boot/bzImage
      the size is 5,6M

-------------------------------------------------- the kernel

    kernel space:   the space in RAM where only kernel can do untill the shutdown
    user   space:   the space in RAM shared by the applications and different users.



-------------------------------------------------- devices in linux

   /dev   the are special files in /dev
          /dev/bus/usb...            ex. USB are
          /dev/disk/by-label.        HD partitions
                 ex: BIOS_RVY  Data  OS_Install  SYSTEM  WinRE\x20tools

   /boot  where is stored the kernel which boots at startup
          file vmlinux
               vmlinuxz (z is compressed)
               bzImage  (also compressed)

          Old kernels are kept:
              dpkg --list 'linux-image*'      <---- gives the list of all installed kernels

          To remove use this command (this keep the last 3 kernels just in case there is a problem to boot)
              apt-get remove `dpkg --list 'linux-image*' |grep ^ii | awk '{print $2}'\ | grep -v \`uname -r\``
              or also (easier) just:
                   sudo apt-get autoremove 


          then check if there are still unused pckg around:
              sudo apt-get autoremove




   /kernel dirs:
                   1)   187M  arch/                : contains all the architectures and 1 file Kconfig to configure the make
                   2)   3,8M  block/               : block device drivers
                   3)   20K   COPYING              : GPL2 licence
                   4)   96K   CREDITS              :
                   5)   4,8M  crypto/              : code for encryption algorithms
                   6)   29M   Documentation/       :
                   7)   390M  drivers/             : code for the driver
                                                     The xen folder contains code for the Xen hypervisor
                                                     the two OS are managing the hardware together and the same time
                   8)   6,2M  firmware/            : code to  understand signals from devices.
                   9)   58M   fs/                  : each filesystem's code is in its own folder (ext4)
                  10)   34M   include/             : *.h
                  11)   764K  init/                : main.c file is the core of the kernel.
                  12)   980K  ipc/                 : Inter-Process Communication. (manage kill)
                                                     Pipes used the IPC. They tell the kernel to place the output data on
                                                     a physical page on in memory. The program or command receiving the data
                                                     is given a pointer to the page on memory.
                  13)   4,0K  Kbuild               :
                  14)   4,0K  Kconfig              :
                  15)   20M   kernel/              : code  of the kernel itself
                  16)   7,2M  lib/                 : code for the kernel's library
                  17)   288K  MAINTAINERS          :
                  18)   56K   Makefile             : to compile
                  19)   7,1M  mm/                  : code for Memory Management:  Memory is not randomly placed on the RAM.
                                                     kernel places the data on the RAM carefully.
                                                     does not overwrite any memory that is being used or
                                                     that holds important data.
                  20)   12K   modules.builtin      :
                  21)   4,0K  modules.order        :
                  22)   424K  Module.symvers       :
                  23)   60M   net/                 : code for all the protocols IPv6 Ethernet, wifi, bluetooth, bridges and DNS
                  24)   20K   README               : how to compile
                  25)   8,0K  REPORTING-BUGS       :
                  26)   248K  samples/             : if you want to contibute
                  27)   3,9M  scripts/             : the script to compile
                  28)   5,5M  security/            : the code for the security of the kernel
                  29)   35M   sound/               : code for sound drivers
                  30)   3,0M  System.map           :
                  31)   8,3M  tools/               : code for tools used by the kernel
                  32)   88K   usr/                 : where bzImage or vmlinuz
                  33)   328K  virt/                : code for virtualization: Linux is Host others are Guest Os
                  34)   17M   vmlinux*             :
                  35)   25M   vmlinux.o            :


   drives
32K     accessibility/       72K     fmc/                2,7M    mfd/                68K     reset/         1,5M    watchdog/
14M     acpi/                1,3M    gpio/               3,1M    misc/               44K     rpmsg/         788K    xen/
40K     amba/                38M     gpu/                2,3M    mmc/                2,1M    rtc/           68K     zorro/
4,3M    ata/                 4,0M    hid/                8,0K    modules.builtin     3,7M    s390/
1,3M    atm/                 228K    hsi/                4,0K    modules.order       148K    sbus/
48K     auxdisplay/          240K    hv/                 3,8M    mtd/                29M     scsi/
2,8M    base/                3,8M    hwmon/              77M     net/                40K     sfi/
216K    bcma/                52K     hwspinlock/         524K    nfc/                184K    sh/
3,8M    block/               2,2M    i2c/                128K    ntb/                32K     sn/
388K    bluetooth/           1,3M    ide/                44K     nubus/              260K    soc/
8,5M    built                64K     idle/               312K    of/                 1,5M    spi/
192K    bus/                 2,1M    iio/                104K    oprofile/           52K     spmi/
272K    cdrom/               8,1M    infiniband/         400K    parisc/             284K    ssb/
3,9M    char/                6,3M    input/              404K    parport/            30M     staging/
3,7M    clk/                 1,7M    iommu/              4,5M    pci/                1,8M    target/
564K    clocksource/         112K    ipack/              1,7M    pcmcia/             20K     tc/
236K    connector/           468K    irqchip/            384K    phy/                1,1M    thermal/
1,5M    cpufreq/             6,0M    isdn/               4,9M    pinctrl/            144K    thunderbolt/
508K    cpuidle/             4,0K    Kconfig             1,6M    platform/           8,1M    tty/
2,3M    crypto/              812K    leds/               956K    pnp/                104K    uio/
28K     dca/                 208K    lguest/             1,6M    power/              18M     usb/
128K    devfreq/             812K    macintosh/          72K     powercap/           444K    uwb/
28K     dio/                 56K     mailbox/            280K    pps/                212K    vfio/
2,4M    dma/                 8,0K    Makefile            168K    ps3/                196K    vhost/
328K    dma                  36K     mcb/                276K    ptp/                14M     video/
1,3M    edac/                4,5M    md/                 344K    pwm/                36K     virt/
92K     eisa/                33M     media/              328K    rapidio/            112K    virtio/
260K    extcon/              168K    memory/             128K    ras/                32K     vlynq/
484K    firewire/            280K    memstick/           1,7M    regulator/          292K    vme/
944K    firmware/            1,6M    message/            120K    remoteproc/         356K    w1/





   1/18  Introduction to Device Drivers
   ===========================================

  modularity:   each devide driver can be "plugged in” at runtime
  policy-free:  split into two parts:
                   “what capabilities are to be provided” (the mechanism) : the driver
                   “how those capabilities can be used”   (the policy): un upper layer

  If a code is written insie the kernel, it goes in the same block of kernel space in RAM
  it's faster, but kernel requires more RAM and more boot time.
  It the code is a separate module, it can be loaded in RAM only if needed: less boot time,
  less RAM space, but kernel and module are in different space in RAM, so it suffers more on
  performance

       Process management:    - create / destroy processes
                              - make them communicate: signals, pipes, interprocess communication
                              - abstract on 1 CPU, more processes

       Memory management:     - set of function calls, ranging from the simple malloc/free
                                to much more complex

       Filesystems:           - everything is 1 file
                                multiple filesystem TYPES, different ways of organizing data
                                on the physical medium (formatted ext3, FAT, ...)

       Device control:        - The kernel must have embedded specific CODE for any device

       Networking:            - all the routing and address resolution issues are implemented within the kernel


  Loadable Modules:  can attach and unmount at RUNTIME (through a syscall 'init_module' which only supeuser can call
                                                        or techincally one who has 'CAP_SYS_MODULE')
                     A module is a piece of code
                     (not linked into a complete executable) that can be dynamically linked to the running kernel
                     by the
                                 insmod  (or better: modprobe)
                     program and can be unlinked by the
                                 rmmod
                     program.
                     To see the running module: lsmod

                     For SECURITY resons, it is:
                        - possible to compile the kernel itself with 'CLOSE' the possibility to load new modules
                        - disable loading of modules at runtime also for normal compiled kernel.


  3 Classes of Modules:
                    Character devices:   a stream of bytes like a normal file:
                                         They implement at least the sys call:
                                                    open,
                                                    close,
                                                    read,
                                                    write
                                         The only diff respect a normal file, is that seldom there is
                                         something like a 'seek' (to go to and fro), but access is most
                                         ofetn sequentially.

                                                    examples: /dev/console
                                                              /dev/ttyS0
                                                              /dev/lp0

                    Block devices:       Block drivers have a completely different interface TO THE KERNEL
                                         than char drivers. But not to the user/application that sees them as a char device.
                                         Block devices can only handle I/O operations that transfer one or more whole
                                         blockblocks, which are usually 512 bytes (or a larger).

                                                    they also stay in /dev

                    Network devices:    is in charge of sending and receiving data packets.
                                        Many network connections
                                        (especially those using TCP) are stream-oriented, but network devices are, usu-
                                        ally, designed around the transmission and receipt of packets. A network driver
                                        knows nothing about individual connections; it only handles packets.




   2/18  Building and Running Modules
   ===========================================
   linked to kernel obj: 2.6 modules are linked against object files found in the kernel source tree;
                         the result is a more robust module loader, but also the requirement that those object file
                         are availble.

   Compiling the kernel: The build process for modules differs significantly from that used for user-space applications;
                         the kernel is a large, standalone program with detailed and explicit requirements on how
                         its pieces are put together.



   modprobe
   modinfo
   lsmod
   insmod
   rmmod

/proc/modules             is a just ~100 lines text file listing for each line a module and its info

lsmod                     is a trivial prog (no params) to nicely cat /proc/modules

/lib/modules/`uname -r`   is the dir where the modules are stored.

uname                     prints system information.
       -a, --all

       Linux stiv-GP60-2PE 3.16.0-60-generic #80~14.04.1-Ubuntu SMP Wed Jan 20 13:37:48 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

      |----|-------------|-----------------|---------------------------------------------------|------|------|------|----------|
       -s       -n              -r                              -v                                -m     -p     -i      -o

                                        -s, --kernel-name   <---  same as 'uname' alone with no option
                                        -n, --nodename (network hostname)
                                        -r, --kernel-release
                                        -v, --kernel-version
                                        -m, --machine (hardware name)
                                        -p, --processor (type / or "unknown")
                                        -i, --hardware-platform or "unknown"
                                        -o, --operating-system

"version magic"     Every module contains a small string containing important information,
                    such as the kernel and compiler versions.
                    This allows the kenel to complain if a modules is loaded with a wrong version.

CONFIG_MODVERSIONS  is an option that can be used when a module is compiled.
                    In the compilation output there will be a section detailing the versions of every interface used

depmod              Generates a file listing what other modules each module needs (if any),

modinfo             extracts module info in the format  " info : value "
                    'module' can be passed as a file name ex
                                modinfo /lib/modules/3.16.0-60-generic/kernel/drivers/hid/hid.ko
                    or module name
                                modinfo hid
                    output ex:
                            filename:       /lib/modules/3.16.0-60-generic/kernel/drivers/hid/hid.ko
                            license:        GPL
                            author:         Jiri Kosina
                            author:         Vojtech Pavlik
                            author:         Andreas Gal
                            srcversion:     A8A35D7D907D84D8F5FF7C7
                            depends:
                            intree:         Y
                            vermagic:       3.16.0-60-generic SMP mod_unload modversions
                            signer:         Magrathea: Glacier signing key
                            sig_key:        BE:C0:E2:4C:6C:15:79:A9:A8:E8:83:45:2F:3F:21:D7:73:D1:FE:BD
                            sig_hashalgo:   sha512
                            parm:           ignore_special_drivers:int
                            parm:           debug:toggle HID debugging messages (int)

                    -F, --field     to have one specific field only.
                                    ex    modinfo  -F author hid       or shorthand:  modinfo -a hid

                                                                       shorthands:
                                                                                      -a --author,
                                                                                      -d --description,
                                                                                      -l --license,
                                                                                      -p --parameters,
                                                                                      -n --filename
                    modinfo can be used to extract dependencies of a module.
                    It knows nothing of aliases or install commands, differently by  "modprobe --show-depends"

systool -v -m module_name     lists the options set for that module

insmod              Simple program to insert a module into the Linux Kernel
                    modprobe(8) is more clever and can handle module dependencies.

rmmod               like "modprobe -r"

                    rmmod [-f] [-w] [-s]      [-v]      [modulename]
                                   syslog   verbose

                                -w --wait           Normally, rmmod will refuse to unload modules which are in use.
                                                    With this option, rmmod will isolate the module,
                                                    and wait until the module is no longer used.
                                                    See lsmod(8)) for information on usage counts.

modprobe            /add/remove (-r)/get info/ for 1 or more modules
                    The work of resolving symbols and understanding parameters
                    is done by the kernel not by modprobe.
                    So module failures are logged by the kernel in 'dmesg'.

                       - list of modules on the command line can be passed indifferently with undersores _ or -
                         as modprobe will translate all into underscores _

                       - those modules are then searched in dir  /lib/modules/`uname -r`
                         or otherwise in dir /lib/modules/xxxx  with xxxx specified by option  -S, --set-version

                       - config settings  are searched in:
                                       1 /etc/modprobe.d   (can be changed by option -C --config)
                                       2 options specified on the kernel command line:
                                                           in the form <module>.<option>
                                                           and blacklists in the form of modprobe.blacklist=<module>.
                                       3 $MODPROBE_OPTIONS environment var

                         config settings are usually some 'install' or 'remove' command
                         config settings can be dumped by option -c --show config
                       - dependencies (by any other modules) are expected in a file modules.dep.bin (generated by 'depmod')
                       - the root directory for installed modules is by default /, but can be specified with option -d --dirname
                       -a                 option to add the listed modules
                       -b                 option to use blacklist
                       -r, --remove       (modules) If the modules it depends on are also unused, modprobe will try to remove them too.

                       -n, --dry-run, --show       only print what would do without doing

                       --ignore-install  ignore any 'install' commands (referring to this module) found in the config files
                       --ignore-remove   ignore any 'remove'  commands (referring to this module) found in the config files
                       -i                to have both the 2 above

                       -R                 print all modules names that match an ALIAS

                       --force-vermagic   to force adding even on "version magic" mismatch
                       --force-modversion to force adding even when the module section created by CONFIG_MODVERSIONS lists some incompatibility.
                       -f                 shorthand for having both the 2 --force-.... above


                      -q, --quiet         used when return code is enough,
                                          as it will be != 0 on errors or add/remove on modules not present.
                      --show-depends      lists the dependencies of a module, including the module itself
                                          (a list of lines starting with "insmod" / "install")
                                          ex
                                                modprobe --show-depends psmouse
                                                insmod /lib/modules/3.16.0-60-generic/kernel/drivers/input/mouse/psmouse.ko

                      -s, --syslog        log errors to syslog rather than standard error.
                      -v, --verbose




     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   3/18  Char Drivers
   ===========================================


     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------


   4/18  Debugging Techniques
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   5/18  Concurrency and Race Conditions
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   6/18  Advanced Char Driver Operations
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   7/18  Time, Delays, and Deferred Work
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   8/18  Allocating Memory
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   9/18  Communicating with Hardware
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   10/18  Interrupt Handling
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   11/18  Data Types in the Kernel
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   12/18  PCI Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   13/18  USB Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   14/18  The Linux Device Model
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   15/18  Memory Mapping and DMA
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   16/18  Block Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   17/18  Network Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   18/18  TTY Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------


-----------------------------------------
LOGIN
-----------------------------------------

         1.  /etc/nologin    <---- if it's present (written by 'shutdown' for maintenance) only root con login
                                   Other users will receive its text content as denying-reason message

         2.  /etc/usertty    or    read to see if there are any special constraints on you
             /etc/securetty
                             some also:
             /etc/fbtab

         3.  /var/log/failedlogin    some distros log here 'FAIL-login' attempts.

         4.  /var/log/lastlog        some distros log here your login-'TIME'

         5.  /var/run/utmp           adds 1 entry for your succesful login
                                     (removed on logout)

         6.  /var/log/wtmp           append utmp entry here
                                     updated (not removed) on logout so there is the total log-time

         7.  /etc/passwd             open the shell listed here for you.
                                     If it's tagged as 'interactive' a prompt is available

         8.  /etc/motd               stores the 'message'-of-the-day' to display on login-shell.


---------------------------------------------------
                   WHICH SHELL
-----------------------------------
        echo $SHELL
        ps $$
        ps T
        echo $0    (only intercactive, otherwise, inside a script, it's the script name)
---------------------------------------------------
                   ENV & SHELL vars
-----------------------------------
        ENV vars
                   There are quite a few well-known env vars for which
                   the meaning and the format have been agreed upon
                   and they are used by many applications.
                   ex:
                        $LANG      language (ex.  "en_US.UTF-8")
                        $DISPLAY
                        $CDPATH   <--- like PATH is a list of dir separated by ':'
                                       The benefit of this var, is that
                                       each time a 'cd' is written, with not relative path (ex ../../.)
                                       the search is done ONLY in this list. To have
                                       a real benefit the good convention is
                                         o)  set '.' (current dir) ALWAYS at first
                                             CDPATH=.:$HOME:.....
                                       ex. if bin is in $HOME/bin wherever I am, if there is
                                           a bin in the current dir, a (cd bin) goes there.
                                           Otherwise goes in $HOME/bin


                              +---------------+
                              |    ENV v.     |
                              |               |
                              +--|------------+
                                 |         |
                         export  |         | export -n
                                 |         |
                              +------------|--+
                              |    SHELL v.   |
                              |               |
                              +---------------+
        SHELL vars
                   If we assign a var that doesn't exist,  a=34
                   the shell will create a SHELL var.
                   (as it's known in that shell only)
                   It is similar to an ENV v. but doesn't influence
                   other apps.

        SHELL --> ENV
                   A SHELL v. can be exported to become an ENV v.
                    export A     exporting A already defined
                    export A=5   exporting and defining

        SHELL <-- ENV
                    export -n A     remove the ENV property from the var name (A)
                                    so that $A is only a value known to the original SHELL


        father --> child   Any ENV v. created in a shell, will be available
                           to all child-procs created by the SHELL.

        T1    T2           2 terminals, (ex 2 xterms) are separated shells
                           so T1.ENV.v  & T2.ENV.v  are completly different.

      % A=1 B=2  cmd args  Any var defined BEFORE a cmd (that will become a new CHILD)
                           becomes an ENV v.
                               BUT ONLY FOR THE CHILD (<-- cmd)
                           (current SHELL will keep its own var A and B values)
                           (cmd and args go in argv[] while A=1 B=2 in envp[])

                           the more general way is using 'env'
                           % env  A=1 B=2  cmd       env runs a program in a modified environment
                                                     env -i    allows to start with an EMPTY var
                                                     env       (alone, dumps all vars, a -i is
                                                                built-in)
                           NB. env WORKS only if cmd is not a builtin bash cmd
                               so in that case write inside a wrapping script:

                             % echo one > 1 && echo two > 2
                             % A=1                             SHELL var
                             % export A                        ENV   var

                             % A=2 && cat $A                   print 'one'  (because cat is a bash builtin)

                             % printf '#!/bin/bash\ncat $A\n' > e1.sh    make a wrap script
                             % chmod +x e1.sh

                             % A=2 && e1.sh                    print 'two'

    ____________________
    printenv        dump all ENV v.     (like 'env' alone)
                    printenv $HOME    print only that ENV v.


    set -o posix ; set     to print ENV & SHELL (so also not exported)


    unset a         is the only way to actually remove a var (ENV or SHELL).

                    Setting it to an empty val:  export a=
                    is not the same, as some conditions (just the var existence
                    regardless its value) remain TRUE.



     /etc/environment    file where setting ENV v. for ANY new SHELL
                         NB. var expansion doesn't work on this file
                             it's not a script, but a conf file where
                             each line is ENV_VAR_NAME=VALUE

     /etc/profile.d/*.sh    all the scripts '.sh' in dir /etc/profile.d
                            are executed each time a LOGIN shell is created
                            (so console, ssh, a new Desktop session from Gnome, KDE, ...)

     ~/.bashrc  ~/.bash_profile  ~/.bash_login    files setting ENV v. only for a new SHELL
                                                  they cannot be used to set ENV. v. for
                                                  a Graph. desktop (KDE, Gnome ....)

     ~/.profile             a file where setting ENV v. in a Graph. System, as it's read
                            by the DisplayManager
                            like /etc/environment: not a script)

     ~/.pam_environment     This file is like ~/.profile but it runs first
                            so any setting here could be overwritten by ~/.profile


     here the rules:
              1. the FIRST shell opened (in a UNIX session hierarchy), is the
                 shell through which you connected.
                 It's called LOGIN-SHELL (to know if the current shell is a LOGIN-SH
                 or not: echo $0   or  cat /proc/$$/cmdline
                 a LOGIN-SH has argv[0] (its name) starting with a '-' ex "-bash".
                 Morover a LOGIN-SH can be executed with option -l or --login)


             .---------------------
             |2. /etc/profile      is read by a login shell (of any kind)
  LOGIN.SH   |
             |3. ~/.bash_profile   in case the login-shell is BASH, it reads this.
             |                     if not present reads ~/.bash_login
             |                     if not present reads ~/.profile
             `---------------------
               NONE of the above file is read/executed with the option --noprofile


  NOT-LOGIN   4. ~/.bashrc   is read by NOT-LOGIN_shells.


             So each SH reads 1 of them:
                 -    LOGIN-SH:  doesn't read ~/.bashrc
                 - NO-  "   ":     "      "   ~/.bash_profile

             So:
                 ~/.profile  : put here all the stuff that you want applies
                               to ALL THE SESSION (till you disconnect)

                 ~/.bashrc   : put here what applies to BASH only
                               NO-LOGIN shell


  .bash_logout      if present, it's executed every time a BASH LOGIN.SH exits.

---------------------------------------------------
                   X server
-----------------------------------
        ENV v, $DISPLAY is of type     [ host_name ]  :  display_num  .   screen_num
                                            ^         ^      ^        ^        ^
                                  can be omitted          instance          almost never is
                                  on the local host       of which          required a val
                                  but I could             X server          different from 0
                                  specify a remote        on that HOST

                          ex.           :0.0  <--- missing HOST
                               localhost:10.0
                               ik2ss10:2.0

              This variable is used to indicate to graphical apps where to display
              their GUI.
              The display_num allows selecting among multiple X servers running on the same machine
              (Ubuntu uses multiple X servers to enable multiple graphical desktop sessions).
--------------------------------
|       Terminal codes (ANSI/VT100)
------------------------
Control-codes       the 'agreement' is that some special sequences of chars
                    are intended as Control-codes, so the terminal
                    won't display the char, but will perform some action

                    Main usage:
                       - to COLOUR
                       - to CHANGE POSITION (cursor)

TERMINAL TYPE       As there are many 'agreements', or many different TERMINAL conventions
                    or TYPES (T1, T2, ...) there is an 'intermediate layer', a 'terminfo DB"
                    where through some API (like tput) the correct 'control code' is retrieved
                    and sent to the Terminal

                          |
                          |
                          V
                  ---------------------
                       terminfo DB     <----  intermediate layer, that provides from a DB, the correct codes for that Terminal
                  ---------------------       terminfo(5) - to have all the codes
                          |
                          |         <--- Control code retrieved from DB
                          V
                     -------------
                     T1   T2   T3      <----  Terminal TYPEs
                     -------------

ANSI/VT100        most common Terminal TYPE

$TERM             is the bash env var storing the TYPE of Terminal.
                  Possible values:
                          "vt100"   "xterm"   "xterm-color-256"   "screen" (<-- for tmux)

                  ex. in .bash_profile: export TERM=vt100
stty              s[peed]-Terminal
                  it returns the netwoork speed the Terminal is running
                  ex
                      stty -a     --> speed 9600 baud; 46 rows; 189 columns;
                      stty -echo  --> avoid to echo what I type (disable INPUT echo) still the OUTPUT is shown
                      stty  echo  --> restore the normal echo

                                      (the -echo / echo  sequence could be ussefull whne sending
                                       with some cmd, some text on a terminal that must not be shown)


--------------------------------
|       BASH PROMPT - PS1
------------------------
PS1                 is the BASH prompt
                    (the format is store into the var $PS1
                    ex.
                       echo $PS1       ---> \h:\W \u\$

~/.bashrc           best place where setting it
                    ex
                            PS1='\[\e[1;32m\][\u@\h \W]\$\[\e[0m\] ' <--- make it green

                            nb a normal  \e[X;Ym   is included in a pair of escaped [ ]
                                       \[\e[.....\]
                                        ^         ^
                            the 2 [ ] are used to enclose sequences of non-printing char
                            (so \e but also others)

                            right positioning.


PROMPT_COMMAND      $PROMPT_COMMAND env var whose content (usually some commands, a little code).
                    is executed just before Bash displays $PS1
                    ex. PROMPT_COMMAND="date +%H%M"
                        will produce a date line before each prompt $PS1> line

trap Enter          put also this in ~/.bashrc
                             trap 'printf "\e[0m" "$_"' DEBUG
                    so that each left opened   \e[...m     is closed.
                    This is usefull when you want to still edit commands coloured
                    and have only the output (after the ENTER) in normal 'white'
                    It doesn't work on 'tab'completion as it colours everything
                    (overwriting default colours for files, dirs, symlinks, executables,...)

/root/.bashrc       nb. the /root/ path where admin .bashrc is stored
                        if not present copy it from /etc/skel

/etc/skel           For more information on customizing /etc/skel see 'man useradd'

                               /etc/skel is the dir used by 'useradd' to create
                               the default settings in a NEW user's home directory.
                               (to ensure that all NEW users on your system get the same initial settings).
                               ex.
                                   % ls -A /etc/skel
                                   .bash_profile  .bashrc  .maildir  .screenrc  .tcsh.config

                               To change the location of /etc/skel, edit /etc/default/useradd.

                               # useradd defaults file
                               GROUP=100
                               HOME=/home
                               INACTIVE=-1
                               EXPIRE=
                               SHELL=/bin/bash
                               SKEL=/etc/skel  <----------

                               Typically files included in /etc/skel are .rc files for shell initialization,
                               but you could also include a public_html directory, a custom dircolors file, or anything else.
Escapes:
               ----------------- USER
              \u      the username of the current user
              \$      if the effective UID is 0, a #, otherwise a $

               ----------------- HOST
              \h      the hostname up to the first `.'
              \H      the hostname

               ----------------- PATH
              \w      the current working directory, with $HOME abbreviated with a tilde
              \W      the basename of the current working directory, with $HOME
                       abbreviated with a tilde

               ----------------- PROC & HISTORY
              \!      the history number of this command
              \#      the command number of this command
              \j      the number of jobs currently managed by the shell

               ----------------- BASH info
              \v      the version of bash (e.g., 2.00)
              \V      the release of bash, version + patch level (e.g., 2.00.0)
              \l      the basename of the shell's terminal device name
              \s      the name of the shell, the basename of $0 (the portion following
                        the final slash)

               ----------------- DATE
              \d      the date in "Weekday Month Date" format (e.g., "Tue May 26")
              \D{format}  the format is passed to strftime(3) and the result
                        is inserted into the prompt string an empty format
                        results in a locale-specific time representation.
                        The braces are required

               ----------------- TIME
              \t      the current time in 24-hour HH:MM:SS format
              \T      the current time in 12-hour HH:MM:SS format
              \@      the current time in 12-hour am/pm format
              \A      the current time in 24-hour HH:MM format

               ----------------- ESCAPE SEQ
              \nnn    the character corresponding to the octal number nnn
              \e      an ASCII escape character (033)
              \[      begin a sequence of non-printing characters, which could be used
                        to embed a terminal control sequence into the prompt
              \]      end a sequence of non-printing characters
              \a      an ASCII bell character (07)
              \\      a backslash
              \n      newline
              \r      carriage return


Cursor position:     is used the \0333[ ....f-s-u sequence (so as any sequence
                     it must be inside \[ \]
                     )
                     with the format \0333[row;colx
                                                  ^ note the x. It can be
                                                                      - f  to set position to a value
                                                                      - s  to save the current position
                                                                      - u  to restore a saved position

                     ex. PS1=">\[\033[s\]\[\033[1;\$((COLUMNS-5))f\]\$(date +%H:%M)\[\033[u\]"
                                   ^                             ^                        ^
                                here saved                here set pos                here restored
                                pos                       window corner
                                                          high-right

                         nb. $COLUMNS var is = num cols of my TERMINAL

                     ex. set unicode red X simbol o green V according to if the command was
                         OK or ERROR
                     PS1="\[\033[01;37m\]\$?      <----------  $? = last command result
                          \$(if [[ \$? == 0 ]]; then echo \"\[\033[01;32m\]\342\234\223\";
                             else echo \"\[\033[01;31m\]\342\234\227\"; fi)
                             $(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h';
                             else echo '\[\033[01;32m\]\u@\h'; fi)\[\033[01;34m\] \w \$\[\033[00m\] "


                     Or do the same into a clean code, the assign that code to 'PROMPT_COMMAND':

                              set_prompt () {
                                  local last_command=$? # Must come first!
                                  PS1=""
                                  local blue='\[\e[01;34m\]'
                                  local white='\[\e[01;37m\]'
                                  local red='\[\e[01;31m\]'
                                  local green='\[\e[01;32m\]'
                                  local reset='\[\e[00m\]'
                                  local fancyX='\342\234\227'
                                  local checkmark='\342\234\223'

                                  PS1+="$white\$? "
                                  if [[ $last_command == 0 ]]; then
                                      PS1+="$green$checkmark "
                                  else
                                      PS1+="$red$fancyX "
                                  fi
                                  if [[ $EUID == 0 ]]; then
                                      PS1+="$red\\h "
                                  else
                                      PS1+="$green\\u@\\h "
                                  fi
                                  PS1+="$blue\\w \\\$$reset "
                              }

                              PROMPT_COMMAND='set_prompt'  <--------------



---------------------------------------------------
                   shell command and special options
----------------------------------
____________________
__  id
                give the UID and GID
       id         uid=1000(stiv) gid=1000(stiv) groups=1000(stiv),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)
       id -u      1000       (gives the uid - numeric format)
       id -g      1000       (gives the gid - numeric format)
       id -G      1000 4 24 27 30 46 108 124                              (gives all groups - numeric format)

       id -un     stiv       (gives the uid - text    format)
       id -gn     stiv       (gives the gid - text    format)
       id -Gn     stiv adm cdrom sudo dip plugdev lpadmin sambashare      (gives all groups - text    format)


       nb.  3 possible ways to have user name:
            - whoami
            - ${USER}
            - id -un   <-- the more portable ?
____________________
__  chown

       allows to change UID (user) and GID (group) as the owner of a file.

          chwon  elen      a.txt       from stiv to elem   (works with text)
          chown  625       a.txt       from 1000 to 625    (works with numeric)
          chown  elen.g2   a.txt       change user & group (both . and : can be used as separator)
          chown  .g2       a.txt       change only group


                 man chown    (other options  -R (recursive) --reference  --from)

____________________
__  chmod

          chmod  -755
                 ||||_ o: other
                 |||__ g: group  chmod g+w  (add write to  group)  chmod g=u  (set group same as user value)
                 ||___ u: user   chmod u+w  ("   "     "   user)   chmod u-x  (remove exec)
                 |_____4: user  ID
                       2: group ID
                       1: sticky bit

    to remember        a: all (u/g/o)  chmod a+wx  give w & x  to all 3 u,g,o
    italian                            chmod a=u   give to all 3 the same value of u
    ugola ----\
            [ugoa...][+-=][perms]
                             |________ r
                                       w
                                       x  execute (for dir means 'search', or 'view' its content)
                                       X  execute only if is a dir or there is already an x on some of u,g,o
                                       s
                                       t
     _____________________________________________________________________________
     N.B. I can have more at the same time:    chmod uo+rw  <------------ N.B.
                                                     ^  ^
     _____________________________________________________________________________


 SUID / SGID    's' can be present instead of 'x' in u (called SUID) or g (called SGID)
                SUID:
                    It means that the file/folder is always executed (by whoever user runs it)
                    with the priviledges of his owner. (In case of root, with root priviledges)
                SGID:
                   - on a file: that file has rights like that group
                   - on a dir : any file or subdir created inside has rights like that group


                (set SUID):  chmod u+s   or  chmod 4...  (ex 4755)      rws ... ...
                (set SGID):  chmod g+s   or  chmod 2...  (ex 2755)      ... rws ...

                If a file has no x permission  (ex ls -l a.sh      -->  rw- r-x r--)
                setting s  (ex chmod u+s a.sh) produces an UPPERCASE S  rwS r-x r--
                as the root priviledge is set but there is no x rights,
                so add them and the S becomes s:  chmod u+x a.sh    --> rws r-x r--
                (The same applies on SGID)

 Sticky bit     't' can replace the 'x' of o, meaning that each user can DELETE
                only its own files. Even if it can be set on a file, usually has
                no real sense, so it's set on a dir. Any file/subdir and the dir itself
                can be DELETED only by its owner

                chmod o+t   or  chmod 1...  (ex 1755)      ... ... r-t

                a T means the 'x' was not set, so fix it with (chmod o+x)

                Once If set on a file: that file will be kept in cache memory, for quicker access.


umask           the umask command (ex in .bashrc: umask 022) set a value that
                when any new file/dir is created its starting value will be
                    dir:  777 - umask  (ex  777 - 022 = 755)
                    file: 666 - umask  (ex  666 - 022 = 644)

                files are 666 and not 777 for security reasons, (no 'x').


____________________
__  SELINUX

               is a set of kernel modules (LSM- Linux Security Modules) which add security features.
               If installed, the following command works:

                    %getenforce            # to give the info if SELINX is in my box returns the strings "Enabled" or "Disabled"

                    %sestatus   -b         # when SELINUX is "Enabled", gives the config
                                               SELINUX can be configured to be
                                                  - Enforcing: stops any breaking attemps
                                                  - Permissive: only warns on "     "
                                             option -b, if specified, adds verbose output

               static config:
               edit /etc/selinux/config   -->    SELINUX=disabled  /   SELINUX=enforcing

               runtime config:
               echo 0 > /selinux/enforce      (or also: setenforce 0
               echo 1 > /selinux/enforce      ( "   "   setenforce 1


____________________
__  .Xauthority

               ls -l ~/.Xauthority
               -rw------- 1 stiv stiv 107 Mar 13 18:12 /home/stiv/.Xauthority

               The .Xauthority  file can be found in each home dir
               It stores credentials in cookies used by xauth for authentication of X sessions.
               Once an X session is started, the cookie is used to authenticate connections to that specific display.

               So, if you are not the owner of this file you can't login since you can't store your credentials there.
               This is the reason why gui commands must not be started with sudo but with gksudo
               that copies /.Xauthority in a temp dir
____________________
__  sudo
               sudo allows you to run commands with the rights of another user (root or anyother ex amanda)
               ex
                  sudo /etc/init.d/networking restart

               sudo commands always requires YOUR user password (so there is never another to remember)
                    a 15 minutes default period allows to run other sudo without asking again the password.
                    This timer can be changed (with 'sudo visudo')
                    -k         # sudo -k  closes the timer (whatever it is) so next sudo command for sure
                                                                           asks the password again.

    /var/log/auth.log         sudo commands are logged in:  /var/log/auth.log

               user amanda can run sudo if someone with rights on command 'adduser' did:
                   sudo adduser amanda sudo

               -i   instead of running a command I can log-in as another user as
                    sudo -i -u amanda
                    that gives all the 'env' vars of amanda (so a consistent state)

                    su -i      # without a -u it's intended root  (deprecated)

               -s   means shell. Is the same as running 'sudo bash' In this case a complete shell
                    is opened with root rights (deprecated)

               shell root    there are 3 ways (all deprecated) they differ in the value of var $PATH
                             (and the other 'env' vars) so also $HOME

                                          $HOME      $PATH     env (untainted by amanda's env ?)
                          -----------------------------------------
                          sudo -i         /root        1        Y <----
              sudo bash / sudo -s         ~amanda      1        N
                          sudo su         /root        2        N

                          so the only clean env is obtainted with sudo -i

                ---------------------------------------------
                basile@pd13121  (master) ~/CHIPS-SHARE/Scrum_Dev $  echo $HOME $PATH
                /Users/sbasile /opt/local/bin:/opt/local/sbin:/usr/lib/oracle/11.2/client64:.:/usr/local/bin/:/Users/sbasile/bin/:
                               /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin:
                               /usr/lib/oracle/11.2/client64:.:/usr/local/bin/:/Users/sbasile/bin/:/Users/sbasile/GRADLE/gradle-2.14/bin:
                               ~/Development:/Users/sbasile/GRADLE/gradle-2.14/bin:~/Development
                ---------------------------------------------
                sbasile@pd13121  (master) ~/CHIPS-SHARE/Scrum_Dev $  sudo -i
                Password:
                pd13121:~ root#  echo $HOME $PATH
                /var/root /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin:
                          /usr/lib/oracle/11.2/client64:.:/usr/local/bin/:/Users/sbasile/bin/:/Users/sbasile/GRADLE/gradle-2.14/bin:~/Development
                pd13121:~ root# logout
                ---------------------------------------------
                sbasile@pd13121  (master) ~/CHIPS-SHARE/Scrum_Dev $  sudo -s
                bash-3.2#  echo $HOME $PATH
                /Users/sbasile /opt/local/bin:/opt/local/sbin:/usr/lib/oracle/11.2/client64:.:/usr/local/bin/:/Users/sbasile/bin/:
                               /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin:/usr/lib/oracle/11.2/client64:.
                               :/usr/local/bin/:/Users/sbasile/bin/:/Users/sbasile/GRADLE/gradle-2.14/bin:~/Development:/Users/sbasile/GRADLE/gradle-2.14/bin:~/Development
                bash-3.2# exit
                ---------------------------------------------
                sbasile@pd13121  (master) ~/CHIPS-SHARE/Scrum_Dev $  sudo su
                sh-3.2#  echo $HOME $PATH
                /var/root /opt/local/bin:/opt/local/sbin:/usr/lib/oracle/11.2/client64:.:/usr/local/bin/:/Users/sbasile/bin/:
                          /usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/opt/local/bin:/opt/local/sbin:/usr/lib/oracle/11.2/client64:.
                          :/usr/local/bin/:/Users/sbasile/bin/:/Users/sbasile/GRADLE/gradle-2.14/bin:~/Development:/Users/sbasile/GRADLE/gradle-2.14/bin:~/Development








    /etc/sudoers              Is the file where users and rghts are configured.
              "sudo visudo"    opens it with your $EDITOR
              As usual, there are first some sections to define some vars (called ALIAS) then
              they are mixed together to define who can do what, with the format
              <user list> <host list> = <operator list> <tag list> <command list>
              ex
              USERS WORKSTATIONS=(ADMINS) ADMIN_CMDS
              myuser ALL = (root) NOPASSWD:NOEXEC: /usr/bin/vim


              User_Alias    (specifies users by name)     User_Alias USERS = tom, dick, harry
                            system groups (prefixed by a %) and
                            netgroups (prefixed by a +)   User_Alias ADMINS = %admin
              Runas_Alias   (specifies users by id)       Runas_Alias ROOT = #0
              Host_Alias     Host_Alias SERVERS = 192.168.0.1, 192.168.0.2, server1
              Cmnd_Alias     list some commands (if a dir is specified all inside cmd are considered
                             but NOT the subdirs) Cmnd_Alias PRINTING_CMDS = /usr/sbin/lpc, /usr/sbin/lprm

              !       You can also use ! to exclude
                      User_Alias LIMITED_USERS = USERS, !WEBMASTERS, !ADMINS

              ALL     builtin alias which matches everything
                      ALL ALL=(ALL) NOPASSWD: PRINTING_CMDS

              <tag list>    NOPASSWD:  no password is required (ex to print)
                            NOEXEC:    no shell can be executed as a child (as it will be a su shell
                                                                            then bypassing all sudo settings)
____________________
__  w


                     (a)      (b)       (c)                                                        (a) current time
                  13:28:28 up  4:54,  2 users,  load average: 0.01, 0.21, 0.65                     (b) time from boot
                 USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT               (c) num of connected users
                 stiv     :0       :0               08:44   ?xdm?   2:34m  0.10s init --user       (d) from where connected
                 stiv     pts/5    :0               13:21    2.00s  0.03s  0.00s tmux              (e) JCPU: CPU time used from boot
                                  (d)                                (e)   (f)   (g)               (f) PCPU: used by that proc
                                                                                                   (g) proc
                 w -i      # gives IP addr for col (d)
                 w -s      # gives short output
____________________
__  ls

    -1            1 file for line
    -m            all on a single line separated by comma ','
    -x            sort horizontally between cols (so a1 and a2 will be on the same line)
    -p            append a  '/' at dirs
    -T0           use internally spaces and not TABs to separate cols
                  (it can be usefull if for any reason the output is not properly aligned)
    --color       --color=always  (the same as only --color)
                  --color=auto             color only if printing to a terminal (ex not use in a pipe | or redirection >)
                  --color=none  (default)  never

                  color requires a 'stat' of each file to then decide (directory, link, executable, ...)
                  how to color.
                  Thus a performance penalty.
                  So avoid using this 'stat' during a pipe or redirection (ls | ... ls > ...)
                  is why  --color=auto is the good choice)

         LS_COLORS  is the ENV var setting what to color (dir, link, exe ...) and with which color

                  its values is something as a long string like
                  LS_COLORS=no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=...

         dircolors  is the command ( /usr/bin/dircolors ) to use to set the value for LS_COLORS.
                  Using:
                             dircolors -p
                  I  have a dump of the fabric default original values in a style like a bash text file.
                  So that to change it, a way could be:
                             eval $(dircolors -p | perl -e ' .......' | dircolors -)
                                               ^                                  ^
                          ex
                             eval $(dircolors -p | perl -pe 's/LINK\s+[0-9;]+/LINK 01;36/' | dircolors -)
____________________
__  sort
    to sort with the option -k (that allow to specify the column to use as key)
    it must be always used even -b, otherwise it doesn't work:
    The syntax of a -k is <num col>,<position of the char>        n.b. positions start from 1

    ex: to sort by the  4th col of this:

    0   2 Que  12/08/12  16:51
    988 1 Act  10/29/12  03:51
    49  6 Wri  07/30/12  20:01
    49  3 Wri  07/25/12  20:01
    988 8 Wri  08/09/12  06:45
    988 5 Wri  09/23/11  06:45
    988 7 Wri  02/09/11  06:45
               ^  ^  ^
            1,2  4,5  7,8  <------ char positions at the 4th col

         sort -k 4.7,4.8    -k 4.1,4.2    -k 4.4,4.5


____________________
__  inodes

    UNIX filesystem splits disk into 2 areas
         - a list of -inodes   (to store info about the file)
         - a list of data blocks  (to store the content of the file)

    When any of these 2 lists should be over, the filesystem is FULL
    and no more data can be stored.

          df     : gives info on the used data-block  space
          df -i  : gives info on the used inode-block space

          ______________________
          df:

               Filesystem     1K-blocks     Used Available Use% Mounted on
               udev             4024948        0   4024948   0% /dev
               tmpfs             809036     9724    799312   2% /run
               /dev/sda9       43262136 10545708  30495732  26% /
               tmpfs            4045168    10644   4034524   1% /dev/shm
               tmpfs               5120        4      5116   1% /run/lock
               tmpfs            4045168        0   4045168   0% /sys/fs/cgroup
               /dev/sda8       49071920 11623936  34932332  25% /home
               /dev/sda2         303104    54784    248320  19% /boot/efi
               cgmfs                100        0       100   0% /run/cgmanager/fs
               tmpfs             809036       72    808964   1% /run/user/1000
          ______________________
          df -i :

               Filesystem      Inodes  IUsed   IFree IUse% Mounted on
               udev           1006237    560 1005677    1% /dev
               tmpfs          1011292    878 1010414    1% /run
               /dev/sda9      2760704 564411 2196293   21% /
               tmpfs          1011292     30 1011262    1% /dev/shm
               tmpfs          1011292      7 1011285    1% /run/lock
               tmpfs          1011292     18 1011274    1% /sys/fs/cgroup
               /dev/sda8      3117120  97022 3020098    4% /home
               /dev/sda2            0      0       0     - /boot/efi
               cgmfs          1011292     14 1011278    1% /run/cgmanager/fs
               tmpfs          1011292     34 1011258    1% /run/user/1000
          ______________________


          ______________________ INODE
          An inode is the C-struct that can be seen with a   "man 2 stat"    (stat(2))


           struct stat {
               dev_t     st_dev;         /* ID of device containing file */
               ino_t     st_ino;         /* inode number */
               mode_t    st_mode;        /* protection */
               nlink_t   st_nlink;       /* number of hard links */  <----------------------.
               uid_t     st_uid;         /* user ID of owner */                             |
               gid_t     st_gid;         /* group ID of owner */                            |
               dev_t     st_rdev;        /* device ID (if special file) */                  |
               off_t     st_size;        /* total size, in bytes */                         |
               blksize_t st_blksize;     /* blocksize for filesystem I/O */                 |
               blkcnt_t  st_blocks;      /* number of 512B blocks allocated */              |
                                                                                            |
               /* Since Linux 2.6, the kernel supports nanosecond                           |
                  precision for the following timestamp fields.                             |
                  For the details before Linux 2.6, see NOTES. */                           |
                                                                                            |
               struct timespec st_atim;  /* time of last access */                          |
               struct timespec st_mtim;  /* time of last modification */                    |
               struct timespec st_ctim;  /* time of last status change */                   |
                                                                                            |
           #define st_atime st_atim.tv_sec      /* Backward compatibility */                |
           #define st_mtime st_mtim.tv_sec                                                  |
           #define st_ctime st_ctim.tv_sec                                                  |
           };                                                                               |
                                                                                            |
          ______________________ DIR   (and HARD-LINKs)                                     |
                                                                                            |
          a dir is a file, whose content (in the data-block) stores a 2 columns table:      |
                                                                                            |
              | inode-num-A  |     "file_name-A"    |                                       |
              | inode-num-B  |     "file_name-B"    |                                       |
                                                                                            |
          This way, the same file-A can be present in 2 or + dirs, with                     |
          the same or different names, just because what matters is its inode-num           |
          A same file present in 2 or more dirs it's said to have HARD-LINKS to it          |
          The total number of HARD-LINKS to a file is store in its inode -------------------'

          ______________________ ls -i   / find -inum

              ls -i          allows to see inode num
              find -inum     allows to search based on inodes
                             ex to delete a file with a strange name:

                                   find -inum 328356  -delete

              debugfs        command that enters a private "shell" of commands
                             (that can be seen with "help") to operate on the filesystem
                             [included dumping the inode info with a normal cat]
                             As an admin I can even recover deleted files (if not yet overwritten)
                                  mount |  grep home ---> /dev/sda8
                                  sudo debugfs /dev/sda8

                                  logdump -i <328356>         if I know the inode of the deleted file
                                                              (n.b.  also the '<'  '>' required)
                                  logdump  lsdel              if I don't know the inode

                                  it dumps many info I found the number of the line "Blocks:  (0+1): " ex:
                                     Blocks:  (0+1): 7559168


                             With that number I can use dd:
                             dd if=/dev/sda8 of=file_name bs=4096 count=1 skip=7559168



          ______________________ "."     ".."


              | inode-num-.  |     "."              |
              | inode-num-.. |     ".."             |

              note that any dir stores 2 entries  to have inodes of itself and its parent.
              That means that as any dir "xxxxx" is usually a child of a parent (pppp/xxxxx), its inode is listed
              twice:
              ________________________________                _____________________________
              | inode-num-x  |     "xxxxx"    |               | inode-num-x  |     "."     |
              ________________________________                _____________________________
                  in the parent                                      in itself

             So:
                 (HARD-LINK number of a dir)  >=  2

____________________
__  find


        find  has 3 parts:

             find [paths] [filters]   [actions]
                    |        |             |
                    |        |           what to do   (default action is -print:  so find .   is the same as find . -print)
                    |        |           -print     adds a new line after the filename
                    |        |           -print0    adds a NUL      after the filename
                    |        |                      is the best when find is piped as it skips that newline
                    |        |                      (and avoids mess in cases where a filename has a new-line (in unix is possible))
                    |        |                       if it is piped into a xargs, xargs should be   xargs -0 ...
                    |        all the usual options:
                    |        -name  -type -maxdepth .... -o -not
                    |
                The 'LIST' (yes, they can be more than 1: find /a /b /c)
                of dirs where to search.
                   A trailing /    ex /test/
                   'can' be added for normal dirs
                   and 'MUST' be added if they are SYMLINKS
               _______________________________

        -type    d     dir     ex    find . -type d
                 f     regular file
                 l     sym link

        -maxdepth 2      to limit the subdir recursive search   (maxdepth 1  is only the current dir omitting any subdir)

        -depth    2      to limit at exact level 2 (neither lower nor upper)

        -d               find normally 'descends' : 1st dir / 2nd its files / 3rd recursive on any subdirs
                         -d   is use to go in the opposite way, from the bottom up to the specified  dir.

        -s               To alter the normal searching order going alphabetically

        -prune           To not descend in the current file (usefull so on dirs only) ex: find . -name xxxx -prune
                         (for the meaning of -d option, prune doesn't work if  -d  was specified).

        -empty           to find empty file or dir:   find -empty           (both files and dirs)
                                                      find -type f -empty   (files)
                                                      find -type d -empty   (dirs)

        -not   (!)    to negate:
        -o            to boolean 'or':
                         find ./test -not -name "*.php"
                         find ./test -name 'abc*' ! -name '*.php'
                         find . -name "*.tmpl" -o -name '*.json'

        -perm 0664         to search based on permissions (here find anything with chmod 0664)

        -perm /u=r         letters instead of numbers (note the starting /)
                           ex. all executable /a=x

        -user basilest     to serach based on user

        -group develop     to search based on group

        -ctime             for time functions there are :

                           atime: (access time) changed when you open a file but also when a file is used
                                                for other operations like grep, sort, cat, head, tail and so on.

                           mtime: (modify time) changed when you change or only save a file

                           ctime: (change time) is the 'inode' change time. It changes when the file attributes are changed,
                                                like changing the owner / permission / moving the file / and of course  modify a file.
                                                for other operations like grep, sort, cat, head, tail and so on.

                           values are
                                 N : exact        -->  -mtime 2     exact 2 days ago
                                -N : less than    -->  -mtime -2    less than 2 days ago
                                +N : more than    -->  -mtime +2    more than 2 days ago

        -cmin              the same of the -ctime -atime -mtime  but for MINUTES instead of DAYS

        -size 50M          based on size  (usual convention for N / -N / +N)

        -exec              to execute a command on what is found.
                           {} is the alias for the current item found
                           and it can be used as the variable in the command

                           ex, .... -exec rm -f {} \;

                              \;   <--- this close the command
                              +    <--- this close the command in case
                                        it's possible to collapse more conceptual {} for
                                        the same command execution (that make it faster)

                                        ex -exec chmod 755 {} +

                                            will be translated into chmod 775 f1 f2 f3 f4
                                            instead the slower chmod 775 f1
                                                               chmod 775 f2
                                                               chmod 775 f3
                                                              ....
        find . -regex '.*\.\(tmpl\|json\)'            <---- no -name  and  .*  instead of * only


        find -regextype posix-extended -regex '.*\.(jpg|png)' <--- nb. -regextype MUST be BEFORE -regex
        find -E . -regex '.*\.(jpg|png)'                      <--- shortcut for above in some linux


        to exclude dirs (ex. /xxx)
                  path  '.....' -prune -o print<---- nb  xxx doesn't work as the match should be full
                                                          so works ./xxx/*
____________________
__  lsof
             is an 'utility' not a bash builtin
             installed usually in /usr/(bin,sbin)
             so in case of 'command not found' check those dirs are in $PATH.

    1. list all open files                   lsof

    2. process which has opened a file       lsof /home/somefile

    3. by users                              lsof -u user
                                             lsof -u user1 -u user2 -u user3
                                             lsof -u user1,user2,user3    <--- same as above but only 1 -u)

    4. by pid                                lsof -p 1245
                                             lsof -p 1245 -p 4365
                                             lsof -p 1245,4365


    5. by command                            lsof -c java
                                             lsof -c httpd
                                             lsof -c java -c httpd

    6. -a (AND op. (to join more options))   lsof -a -u user -c httpd

    7. ^ (negate op)                         lsof -u ^user1

    8. list network connections              lsof -i
                                             lsof -i tcp
                                             lsof -i udp
                                             lsof -i :19500  <-- port
                                             lsof -i :ftp    <-- for port i can use string defined (as usual)
                                                                 in /etc/services
____________________
__  ps

to see the command line (with the args passed) of a specified command:

   1/5 $ ps -efw       --> sbasile  22065 22057  0 Apr27 ?        00:00:04 /usr/sbin/httpd -DPROJ_XMLGW -f /home/sbasile/apache2/conf/sbasile_httpd.conf -k start
   2/5 $ ps -efww      -->     "                    "                   "              "                           "
   3/5 $ ps -evfww     <------ VERY MASSIVE OUTPUT

   4/5 $ ps -eao args  --> /usr/sbin/httpd -DPROJ_XMLGW -f /home/sbasile/apache2/conf/sbasile_httpd.conf -k start

   5/5 with the pid of the proc (ie 22065):

       $ cat /proc/22066/cmdline   --> /usr/sbin/httpd-DPROJ_XMLGW-f/home/sbasile/apache2/conf/sbasile_httpd.conf-kstart

       this second option removes all the spaces

____________________
__  iostat

     dump statistics of both cpu and devices
     (for cpu there is the 100% split in user/nice/kernel/iowait/steal/idle)
        -c     only cpu
        -d     only devices
     can be followed by 1 or 2 numbers

     ex.  iostat 1        dump forever   at 1 sec each sample
     ex.  iostat 1 3      dump 3 samples at 1 sec each

     The first sample is since BOOT time, so can be useless
        -y     to skip first sample
        -h     human readable
        -k     KB
        -m     MB
        -x     extended info (usuefull to have wating-IO-time, and rate w/r)
        -g ALL   to specify ALL group devices
        -p     to add all the PARTITIONs for each divice  (
                         ex. iostat -p          dump partitions for all devices
                         ex. iostat -p sda        "      "       "   device sda

____________________ od iconv
__  iconv

     cat a.txt | iconv -f utf-8 -t ucs-4le | od -tx4       (little endian)
                                   ucs-4be                 (big endian)

     od -cx     to see the chars as both char and hex format.
                ex  '  \n   ’  **  **  \n   “  **  **  \n   "  \n
                      0a27    80e2    0a99    80e2    0a9c    0a22

                0a is the new line

     echo -e "\xE2\x80\x99\xA0"     to verify that the char ’ (different from ')
                                    has the UTF-8 coding: e2 80 99
____________________
__  dd


/dev/zero     provides ASCII NULL (0x00) bytes to init disk area (files/partitions)

dd if=/dev/zero of=/dev/xxxxxx
      bs:    to specify my personal block size (in bytes, or even decimal with letter G, M, )
      count: number of 'blocks'

      dd if=/dev/zero of=foobar count=1024 bs=1024       it's 1 MB: 1024 blocks  X  of personal size:1024 bytes
      dd if=/dev/zero of=foobar count=1 bs=1G            it's 1 GB: 1 block X 1G



____________________
__  rsync


      -z          --compress
      -r          --recursive
      -d          --dirs         opposite of recursive,  any dir is skipped
      -l          --links        copy links (only as symbolic)
      -L          --copy-links   copy links (copying real pointed object)  nb. if the pointed object is external, it is NOT copied
      --copy-unsafe-links        copy all links even external

      --times                    preserves timestamp   \
      --perms                    permissions            |  these 4 flags are all on if using -a (archive)
      --owner                                           |
      --group                                          /


      --delete                  delete on server files not present locally (so making a real mirror)

      -v           --verbose
      --progress               a progress bar
      --stats                  statistics info

      -e           --rsh       force using ssh on remote connections (nb. the short flag is -e the long flag is --rsh)

      --exclude                which files exclude. Can be more:   ex. --exclude "*.log"  --exclude "*.swp"
      --include

      ex.
        rsync -za  --delete --exclude "*log" /my/dir/* basilest:/backup      <--- nb. always best ending with /* the source path



--------------------------------------------------- mail

---- send a mail when CPU usage > 75%

    SUBJECT="WARNING CPU USAGE HIGH"
    TO=yourteam@companiesemailcom
    MESSAGE=/tmp/messages
    echo "#######################" > $MESSAGE
    echo "CPU statistics as follows.." >> $MESSAGE
    mpstat >> $MESSAGE
    echo "#######################" >> $MESSAGE
    CPU_USAGE=$(top -b -n1 | awk '/^Cpu/ {print $2}' | cut -d. -f1)
    [ $CPU_USAGE -gt 75 ] && mail -s "$SUBJECT" "$TO" < $MESSAGE



    give execute permissions to that script and add to crontab.

    0-59 * * * *  bash /pathtoscript.sh

---- send a mail when CPU usage > 75%
--------------------------------------------------- crontab
 crontab means cron table, that is where root or any user
 can add some rows (with the cron syntax) to specify periodic tasks
 to be executed.
 The syntax for each row is:

  * * * * *  command to execute
  │ │ │ │ │
  │ │ │ │ │
  │ │ │ │ └───── day of week (0-6) (Sunday=[0 or 7], or use names SUN-SAT)  - SC
  │ │ │ └─────── month (1-12 or JAN-DEC) - SC
  │ │ └───────── day of month (1 - 31)   - SC
  │ └─────────── hour (0-23)             - SC
  └───────────── min  (0-59)             - SC

SC (Special Chars) are
      *    value skipped
      ,    when the value is a list  (ex. MON,WED,FRI)
      -    when the value is a range (ex. 2000-2010)
      /    (only on some cron implementations) the syntax */<value>
           means only 'mod' <value>. ex a hour */3 means any hour mod-3 (0,3,6,9,...)
ex:
   0 20 * * * /home/oracle/scripts/export_dump.sh      (run each day at 20:00)
   1 0  1,2 * *  printf > /var/log/apache/error_log    (run on 1st and 2nd days of each month at 00:01)

/etc/cron.allow        can list on rows, the usernames with    the rights to run cron
/etc/cron.deny              "        "         "       without      "          "

File location depends on the Unix distribution. A file named with the user name (`whoami`)
is store in the following dirs:

/var/cron/tabs/             FreeBSD/OpenBSD/NetBSD
/var/spool/cron/            IBM AIX Unix CentOS/Red Hat/RHEL/Fedora/Scientific Linux
/var/spool/cron/crontabs/   HP-UX Unix Debian / Ubuntu Linux
/usr/lib/cron/tabs/         Mac OS X

and output (ex error messages) is logged in files /var/log/cron  ..cron.1  ..cron.2 ...

crontab [-u user] [ -elri ] <file>

-e     crontab files (for each user) are not edited directly but with crontab -e
       which opens the editor specified in env var (VISUAL or EDITOR)

-l     to list the entries

-r     to clean all the tables (any crontab row)
       -i      (prompt before deleting user's crontab)

[-u user]   to do the above commands as associated to user
            (used by root to add to some of the users)

<file>   instead of -e, I can load a crontab directly from a file



a way to backup and restore is:
     1. crontab -l > c.txt
     2. crontab  c.txt

a way to copy from an user to another:
     crontab -u <user1> -l | crontab -u <user2>

a way to copy to another server
     crontab -l | ssh $remote_host crontab

     NB. cron is not run as YOU. So for instance the PATH or any othet vars
         defined in profile or bashrc could not be defined when running the
         same script during a cron session. (ex. add full path of the exe)

------- sending mail:
                 cron can use the normal 'mail' prog
                 to send mails:

                 ...... mail -s "subject.."  ...
                 send an email in crontab in the crontab
                 add a line 'MAILTO=username@domain.com' at the top of crontab file:

                 MAILTO=username@domain.com
                 1 0  1,2 * *  ....



--------------------------------------------------- date
  date  +%s    ->     1445293970       num sec 01.01.1970

  date --date $xxxxx       gives time related to the text string in val $xxxxx
  date  -d    $xxxxx         "                "        "           "

  date --date $xxxxx +%s   gives again num sec ----> I can operates on date with + - * /


  date +%x    ---->    22/10/15      dd/mm/yy
                                                  the fact it's dd/mm (en_GB)
                                                  and not mm/dd  (en_US) depends from the
                                                          echo $LANG    --> en_GB.UTF-8
                                                  setting to US
                                                          LANG=en_US
                                                  now
                                                     date +%x   ---->  10/22/15


--------------------------------------------------- echo -e
    echo -e       allows to print ANSI escape sequences

    color:        escapes for color are
                  \e[  +   colo_1 + ;  +  col_2 + m         col1,col2 are foreground, background colors
                                                            they can be in any order as they have different ranges
                  \e or \E is the same                         foreg. 30-37   backg. 40-47

                                                                       foreg      backg. (+10)
                                                               black    30          -
                                                               red      31          -
                                                               green    32          -
                                                               yellow   33          -
                                                               blues    34          -
                                                               magenta  35          -
                                                               cyan     36          -
                                                               white    37          -
                  "\e[33;44m blah blah blah"

                  an optional 0; or 1; can be added. It has meaning only for FOREGROUND
                  color and make it light (1) or dark (0)
                  ex
                        "\e[1;32;41m     light green on red
                        "\e[0;32;1;41m   light green on red (the same, as the second 1; replace the first 0;





tput sgr0             reset terminal to original settings
echo -e "\e[0m"        "         "            "            (better, as more portable)


to avoid so the effect remains after the echo -e, add the \e[0m at the end

                  "\e[33;44m blah blah blah \e[0m"

--------------------------------------------------- dmesg
command that prints the message-buffer of the kernel.

the 'buffer' is the file   /var/log/dmesg
that can be accessed directly

During boot all the output at video are stored in that buffer.
So printing after the boot can be read. After some time, the
buffer is overwritten, so those information go lost.

       ex.
           dmesg | grep -i memory

       can be used to inspect the amount of RAM

--------------------------------------------------- kermit
   to manage in 1 tool all theine

     minicom, cu, tip, seyon, pcomm, telnet, or rlogin.
     Zmodem, FTP, rcp
     Expect, Runscript, Perl, Tcl
     ssh, scp, ktelnet, srp-telnet

the linux implementation of kermit is ckermit


--------------------------------------------------- term
echo $TERM      to see which terminal (ex. xterm)
infocmp         to display 'terminfo' data, used by my terminal
/usr/share/terminfo      may be in another loaction. It's the repository
                for terminfo files.
                This value can be also set in var $TERMINFO
                which so can be $TERMINFO= /usr/share/terminfo/
 tic            to 'compile' modifications done in terminfo file


 tput colors    if display 8: not good

 -->   sudo apt-get install ncurses-term
       vim ~/.bashrc                          | or also:~/.profile:
                                              |
       add line:   export TERM=xterm-256color |   if [ -e /usr/share/terminfo/x/xterm-256color ]; then
                                              |           export TERM='xterm-256color'
                                              |   else
                                              |           export TERM='xterm-color'
                                                 fi








 redo tput colors  --> 256
--------------------------------------------------- (dash) -
if - is in place of a input file, means stdin
      idem            output            stdout (video)

--    'end of options'
--------------------------------------------------- help

    man ls
    man -a aaaa    open one after the others, all the man pages containing aaaa
    man -k aaaa    search manages with the given string (here aaaa)
    man -d ...     usual man, but at the 'exit', print debug info
    man -w ...     not open man page. Just link where it is on disk
    info ls
    cmd --help
    /usr/share/doc


    $ man -wa mkfifo
    /usr/share/man/man1/mkfifo.1
    /usr/share/man/man3/mkfifo.3   <---- then open this: man 3 mkfifo
--------------------------------------------------- X
     more complex graphical env (GNOME, KDE) are built on X


--------------------------------------------------- System dir


--------------------------------------------------- /
--------------------------------------------------- /
--------------------------------------------------- /tmp
    1. Capture video with Recordmydesktop (ogv format)
    2. convet ogv to gif (Use mplayer and imagemagik)
    mplayer -ao null <video file name> -vo jpeg:outdir=output
    convert output/* output.gif
    convert output.gif -fuzz 10% -layers Optimize optimised.gif
    convert -delay 20 -loop 0 *.jpg myimage.gif

    (UPDATE: Debian came back to ffmpeg. avconv is a link: /usr/bin/avconv -> ffmpeg) <==== N.B.

    also as:
      1. extract a section from the video:
         avconv -i Lupin_sigla_fisarmonica_.mp4 -ss 00:00:17 -t 00:00:06 -codec copy lupin.mp4
         ffmpeg -i Lupin_sigla_fisarmonica_.mp4 -ss 00:00:17 -t 00:00:06 -codec copy lupin.mp4

      2. create a temp dir to extract images: mkdir jpeg; cd jpeg
      3. extract images: avconv -i ../lupin.mp4 -r 30 -f image2 %04d.png
                         ffmpeg -i ../lupin.mp4 -r 30 -f image2 %04d.png
          -f     is to specify we want the frames
          -r 30  is because 30 is the closest num to the rate of 29.97 frames/sec
      3. ceate the gif with convert:
         convert -delay 2 -loop 0 *.png  -fuzz 5% -scale 160x90 -layers optimize lupin3.gif

         -fuzz is the real compression flag.  Values > 10% become too lossy.
--------------------------------------------------- /tmp


The cleaning of /tmp is done by the upstart script
                 /etc/init/mounted-tmp.conf.
 The script is run by upstart everytime /tmp is mounted.
 Practically that means at every boot.

The script does roughly the following:
        if a file in /tmp is older than $TMPTIME days it will be deleted.

$TMPTIME is an environment variable defined in /etc/default/rcS.
The default value of $TMPTIME is 0, which means every file and directory in /tmp gets deleted.
$TMPTIME=7 means 1 week   $TMPTIME=-1 means never

useful commands are 'tmpreaper'  which is based on 'tmpwatch'
but both are not by default installed.
-------------------------------------------------- avconv
avconv -i Simple_Man.mp4 -acodec copy -ss 00:00:07 -t 00:00:25 Simple_Man.07-34.aac
--------------------------------------------------- masscan
This is the fastest Internet port scanner.
It can scan the entire Internet in under 6 minutes, transmitting 10 million packets per second.

It produces results similar to nmap, the most famous port scanner.
Internally, it operates more like scanrand, unicornscan, and ZMap, using asynchronous transmission.
The major difference is that it's faster than these other scanners.
In addition, it's more flexible, allowing arbitrary address ranges and port ranges.
--------------------------------------------------- concat more pdf files
gs -dBATCH -dNOPAUSE -q -sDEVICE=pdfwrite -dPDFSETTINGS=/prepress
              -sOutputFile=merged.pdf 10.Bristol.Londra 10.Londra.Stansted 16.Londra.Bristol

use gostrscript that is available everywhere.
Other options are:
    pdftk:   also comes with Ghostrscipt but can be not installed
             lot of option, fast, good compression
    pdfjam:  cames with LaTeX
             lot of option as well
    pdfunite: no options

pdftk    input1.pdf input2.pdf input3.pdf cat output output.pdf
pdfjam   input1.pdf input2.pdf input3.pdf        -o  output.pdf
pdfunite input1.pdf input2.pdf input3.pdf            output.pdf


--------------------------------------------------- xinput  &  xev

command to see and configure keyboard / mouse

   xinput list   (providdes a list of devices and their id= )
                  e.g
                  -----> USB Optical Mouse     id=11   [slave  pointer  (2)]
   xinput test 11
                 to test what appens cliking and scrolling. ex:

                                  button press   1
                                  button release 1    <--- left click
                                  button press   3
                                  button release 3    <--- right
                                  button press   4
                                  button release 4    <--- wheel forward
                                  button press   5
                                  button release 5    <--- wheel backward

  instead of xinput test    it can also be used   xev
--------------------------------------------------- xorg.conf
typically located in /etc/X11/xorg.conf
but
does not exist by default any more.
Recent releases of Ubuntu haven't required a xorg.conf file.
You can generate one pretty easily though:

               sudo Xorg -configure
               or
               sudo X -configure

if above commands are executed once X server is already running (usually it is already running
on display or port 0) so you open on first available display; in most cases 1 :

                 X :1 -configure

this command produce a file    "xorg.conf.new"  in the user home
and can be renamed and moved in /etc/X11/xorg.conf

All the settings of the new xorg.conf file are overwritten by the already present X.conf files
usually located in dir /usr/share/X11/xorg.conf.d

--------------------------------------------------- xmodmap
The set of physical keys of a keyboard can be functionally groupped as:
         - alphanumeric keys (only to print char, numbers or symbols)
         - navigation keys for moving
         - function keys (Fn, Esc, Del, Break)
         - modifier keys (Shift, AltGr), Control): to be added to alphanumeric keys to modify
                                                   the behaviour and allow more symbols.

So through the modifiers keys, 1 single physical keys (e.g. n) can produces MORE symbols, ex.:

          n    (when pressed alone)
          N    (when pressed with Shift)
          ñ    (when pressed with AltGr)
          Ñ    (when pressed with Shift+AltGr)

X server,  identifies :
               - the physical key by a number (keycode)
               - all the possible system printing symbols in the file /usr/include/X11/keysymdef.h (removing the XK_ )
ex.:
        grep -wi xk_n /usr/include/X11/keysymdef.h

        #define XK_N                             0x004e  /* U+004E LATIN CAPITAL LETTER N */
        #define XK_n                             0x006e  /* U+006E LATIN SMALL LETTER N */

        grep -i _ntilde /usr/include/X11/keysymdef.h

        #define XK_Ntilde                        0x00d1  /* U+00D1 LATIN CAPITAL LETTER N WITH TILDE */
        #define XK_ntilde                        0x00f1  /* U+00F1 LATIN SMALL LETTER N WITH TILDE */

Whenever a key is pressed or released, X server generates an event that contains
       the 'keycode' of the pressed key
       the 'mask' with the pressed modifiers.

Try to see with xev:

------------------------------------- press n

KeyRelease event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16015893, (48,46), root:(670,624),
    state 0x0, keycode 57 (keysym 0x6e, n), same_screen YES, <-----   here the KEYCODE: dec 57
    XLookupString gives 1 bytes: (6e) "n"                                  the symbol:  hex 6e
    XFilterEvent returns: False

------------------------------------- press Shift + n

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16023348, (48,46), root:(670,624),
    state 0x0, keycode 50 (keysym 0xffe1, Shift_L), same_screen YES,  <--- here the KEYCODE: dec 50
    XLookupString gives 0 bytes:                                       /* no symbol as it's Shift
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16024067, (48,46), root:(670,624),
    state 0x1, keycode 57 (keysym 0x4e, N), same_screen YES, <-----   here the KEYCODE: again dec 57
    XLookupString gives 1 bytes: (4e) "N"                                  the symbol:  hex 4e
    XmbLookupString gives 1 bytes: (4e) "N"
    XFilterEvent returns: False

------------------------------------- press AltGr + n

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16034738, (48,46), root:(670,624),
    state 0x0, keycode 108 (keysym 0xfe03, ISO_Level3_Shift), same_screen YES, <--- here the KEYCODE: dec 108
    XKeysymToKeycode returns keycode: 92                                        /* no symbol as it's AltGr
    XLookupString gives 0 bytes:                                                   AltGr is also called ISO_Level3_Shift
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16035091, (48,46), root:(670,624),
    state 0x80, keycode 57 (keysym 0xf1, ntilde), same_screen YES,  <-----   here the KEYCODE: again dec 57
    XLookupString gives 2 bytes: (c3 b1) "ñ"                                      the symbol: ñ
    XmbLookupString gives 2 bytes: (c3 b1) "ñ"
    XFilterEvent returns: False

------------------------------------- press AltGr + Shift + n

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16038178, (48,46), root:(670,624),
    state 0x0, keycode 108 (keysym 0xfe03, ISO_Level3_Shift), same_screen YES,
    XKeysymToKeycode returns keycode: 92
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16039344, (48,46), root:(670,624),
    state 0x80, keycode 50 (keysym 0xffe1, Shift_L), same_screen YES,
    XLookupString gives 0 bytes:
    XmbLookupString gives 0 bytes:
    XFilterEvent returns: False

KeyPress event, serial 37, synthetic NO, window 0x3c00001,
    root 0x9c, subw 0x3c00002, time 16039645, (48,46), root:(670,624),
    state 0x81, keycode 57 (keysym 0xd1, Ntilde), same_screen YES,
    XLookupString gives 2 bytes: (c3 91) "Ñ"
    XmbLookupString gives 2 bytes: (c3 91) "Ñ"
    XFilterEvent returns: False

X has 8 bit mask reserved to identify (one bit each) a modifier. 3 are Shift, Lock (the CapsLock), Control.
The others are called Mod1 ... Mod5.
To see your current X modifiers configuration, use xmodmap -pm ex.:

                   shift       Shift_L (0x32),  Shift_R (0x3e)
                   lock        Caps_Lock (0x42)
                   control     Control_L (0x25),  Control_R (0x69)
                   mod1        Alt_L (0x40),  Meta_L (0xcd)
                   mod2        Num_Lock (0x4d)
                   mod3
                   mod4        Super_L (0x85),  Super_R (0x86),  Super_L (0xce),  Hyper_L (0xcf)
                   mod5        ISO_Level3_Shift (0x5c),  Mode_switch (0xcb)


While Shift-Lock-Control are modifiers with a physical key, mod1 ... mod5 even if defined (e.g. the above
output from xmodmap -pm list some values for them) can be really submitted only if the keycode is a physical key.


The association between the physical key and list of the symbols that can be generated from that key with the modifiers,
is a table that is managed by the command xmodmap.

                xmodmap -pke
                                -pk    print the keyboard  (-pke print in a format that can be then submitted again as input)
                                -pp    print the mouse
                                -pm    print the modifiers
                                -e     to execute a command

ex.
                xmodmap -pke | grep -w N      --->    keycode  57 = n N n N ntilde Ntilde

Whichever is the list of symbols associated to a key (the above report 6 symbols) X foresees the standard  behaviour
for the 1st 2nd 3th 4th and they can be obtained as:

1. 1st : pressing the key alone
2. 2nd : pressing Shift + key
3. 3th : pressing Mode_switch + key
4. 4th : pressing Shift + Mode_switch + key

Mode_switch is a builint X-keyword to identify that through that modifier you can add 2 more symbols to that key.
Ok, so we have a scheme to have at leat 4 symbols for each alphanumeric keys, but which is the physical key for Mode_switch ?
Mode_switch comes by default with a high keycode value (0xCB, 203) outside the physical keycodes space, so
you cannot print symbols 3th and 4th.

Anyhow most X installation comes with 6 symbols in the list. The standard 4 and 2 more:      ex. keycode  57 = n N n N ntilde Ntilde

   1. Key                          : the key alone: n
   2. Shift+Key                    : N
   3. mode_switch+Key              : as Mode_switch is usually not mapped to a physcal key you cannot generate this
   4. mode_switch+Shift+Key        : as Mode_switch is usually not mapped to a physcal key you cannot generate this
   5. ISO_Level3_Shift+Key         : ñ
   6. ISO_Level3_Shift+Shift+Key   : Ñ

ISO_Level3_Shift modifier comes both already associated to a Mod1 ... Mod5, as mapped onto the physycal AltGr key.
So the above it's:

   5. AltGr+Key                : ñ
   6. AltGr+Shift+Key          : Ñ

Thus in most all clean X system you should have for free the keysym table reported by
                           xmodmap -pke
where there are 6 symbols and you can submit the 1st 2nf 5th 6th with proper Shift / AltGr combination
but not the 3th and 4th. That is really more than enough for all the symbols you must require,
anyhow just to see that mode_switch works you can associate to some physical key:
  - Fn keys do not generate X events, and so are totally dead. You can't use it.
  - maybe we can free NmLock and take it

xmodmap -pm :

                   shift       Shift_L (0x32),  Shift_R (0x3e)
                   lock        Caps_Lock (0x42)
                   control     Control_L (0x25),  Control_R (0x69)
                   mod1        Alt_L (0x40),  Meta_L (0xcd)
                   mod2        Num_Lock (0x4d)
                   mod3
                   mod4        Super_L (0x85),  Super_R (0x86),  Super_L (0xce),  Hyper_L (0xcf)
                   mod5        ISO_Level3_Shift (0x5c),  Mode_switch (0xcb)


free the physical key 77 (NumLock) to map onto it the Mode_switch:    xmodmap -e 'remove mod2 = Num_Lock'
remove Mode_switch from mod5 (where there is also AltGr):             xmodmap -e 'remove mod5 = Mode_switch'
add Mode_switch to physical key 77 (NumLock)                          xmodmap -e 'keycode 77 = Mode_switch'

so now you can print all the 6 symbols from the table ex.:
                                xmodmap -pke | grep 47
                                keycode  47 = ograve ccedilla semicolon colon at dead_cedilla

                      1. Key               :  ò
                      2. Shift+Key         :  ç
                      3. NumLock+Key       :  ;
                      4. NumLock+Shift+Key :  :
                      5. AltGr+Key         :  @
                      6. AltGr+Shift+Key   :  ¸



To configure your own mapping, you can try:

                xmodmap -pke > ~/my_map_file

                then change something as you like in the my_map_file

                and resource it:  xmodmap ~/my_map_file

                To have it sourced at boot write the above command in your own xinitrc  (~/.xinitrc)
                or in the common one /etc/X11/xinit/xinitrc


____________________________________________________________

BOOT:
      1. BIOS search 'OS loader'  (LILO, GRUB, ..)
         which can be in any device (also external USB, CD)
         following any sequence specified (1st CD, 2nd HD, ...)

       . boot-loader finds the proper kernel to load,
         with configurations stored in its config file
                            (ex /etc/lilo.conf
                                /boot/grub/menu.lst
                                /grub/grub.conf)

         this default can be interrupted submitting a command line list of args
         ex. LILO: linux root=/dev/hda9
         where the kernel loaded is that with label 'linux' and the root filesystem
         is taken from partition /dev/hda9
         So kernel-options are passed through those file or even at command line

       . the config for kernel modules are not passed on command line
         but they are loaded from file  /etc/modules.conf
         So module-options are passed only through conf file

dmsg     print the messages that were fast displayed through the boot
         so usually you inspect as dmsh | vi -
         These data are stored in a fixed size kernel buffer (ring buffer)
         so to inspect them, do after the boot, as the kernel during runtime
         output msgs, they will overwrite the buffer.
         Other info are instead written in syslog files, and they are
         not overwritten.

runlevels   from 0 (shutdown) to 6 (reboot)
            1,s,S  Single-user (no network) filesystem maintenance. Most daemons are down
                   The best way is add 1 or 'single' at the grub command line
                        kernel /vmlinuz ....... 1
                        kernel /vmlinuz ....... single
                   The worst is run 'init 1'

            2      Multi-user with no X win system / NFS (Debian default)
            3      Multi-user with no X  (Red Hat default)
            4      not used
            5      Multi-user with X.

            the above levels are just for a rough idea. The real important things
            is the
                       init
            process, that runs a series of script, usually in /etc

            /etc/init.d     stores most scripts to run different daemons
                            ex /etc/init.d/httpd  (for Apache server)
                               /etc/init.d/httpd start       (stop, restart, reload)

            /etc/rc0.d ...  /etc/rc6.d contains sym (soft) links
            to the scripts in the /etc/init.d   (0...6 as the init level)
            So runlevel 3 is completed once all the script of /etc/rc3.d
            have been executed.
            The names are usually in the form  KNNname SNNname
            NN is a number, which specifies which script is called first than another
            K  refers that the script contains daemnons to Kill (stop)
            S  refers               idem                to Start
            First are called all K files (any service is stopped) then all S.

     default runlevel: in file etc/inittab the line
                           id:3:initdefault:                  (in case of 3)

     runlevel    to know in which runlevel I am. ex. it shows 3 5 is I passed
           from 3 to 5 with a 'init' cmd, or shows N 5   in case a normal boot in 5

     init n    to change inite level to n.  (exec init 0   shutdown)

     shutdown  to perform a init 0 or init 6 specifying when, and optionally
            sending a msg.

                shutdown [options] time [warning_message]

               -r    reboot after shutdown  (same as init 6)
               -h    halt     "      "      (same as init 0)
               -k    don't really shutdown but send a msg to all user
               -f    on next reboot skip filesystem check
               -F           "       do       "        "

               time:    (now, +minutes_from_now, hh:mm)o
                     shutdown -r +5 System maintenance is required
                     shutdown –h 23:59
                     shutdown –h now

____________________________________________________________ partitions
partition the dist to allocate various filesystems


/boot    (partition to store most of the kernel) this is the partition
         that LILO or GRUB go to address
         usually 50 / 100 MB
         below the 1024-cylinder limit for older kernels and BIOS
/        (root partition)  500/850 MB
swap     usually double of the RAM size
/usr     4 GB    for exec shared through NFS
/var     2 GB    log files, mails, spools
/tmp     500 MB  for temp files
/home    90  GB


/etc/fstab    is the table which specifyc where and how
              the different filesystem partition have been mounted

sfdisk        to manage the partition layout
              sfdisk -d /dev/hda > partition_backup.txt     to dump a bakup
              sfdisk /dev/hda < partition_backup.txt        to restore later

superblock    the linux equivalent of Windows FAT.
              Stores metadata info for disk and filesystem (size,blocks ...)

MBR           A small program in 1 sector (--> 512 B) of disk. It launches OS
              To backup:
                    dd if=/dev/hda of=~/mbr.txt count=1 bs=512     #count 1 means 1 copy
              To restore:
                    dd if=~/mbr.txt of=/dev/hda count=1 bs=512

backup        use dd.   You can backup copy a partition (ex. /dev/hdx) to another partition
              on the same disk, or into another disk:  dd if=/dev/hdx of=/dev/hdy

____________________________________________________________ boot loaders
 LILO: a 1st part of this utility is in MBR and only has instructions
       to launch a 2nd part (normally stored in the boot partition on disk)
       that provides the prompt with the list of options to launch.

       LILO map installer, is the utility that installs LILO (in MBR) and
       thus allows to configure the prompt options and so on, normally store
       in file /etc/lilo.conf:

       boot = /dev/hda                 partition containing boot sector
       timeout = 50                    timeout on prompt
       prompt                          wait for user
       read-only                       the kernel will in case convert then in write
       map = /boot/map                 default path for map file
       install = /boot/boot.b

       image=/boot/bzImage-2.6.0       1 kernel image to offer
          label=test-2.6.0             any text to present on menu
          root=/dev/hda1               root partition

 GRUB: is much flexible to manage different kernel and OS.
       It address partitions on disks as
                       (hd0)        first hard disk 1st partition
                       (hd0,1)      first hard disk, 2nd partition
                       (fd0)        floppy disk, 1st partition

       To install grub launch the script grub-install '(hd0)'
       or do interactively through cmd:
                  grub

____________________________________________________________ shared library

  The libraries shared among different programs (ex the printf)
  allow program exe to have less size. The common code,
  stored in a 'shared library' is linked dynamically to each of them.

  If an exe has not the libraries it needs, it fails to run.

  In a static library the final exe is a single file with all the code inside.
  (static lib are files .a
    .a is an archive files, containg 1 or more files
       is created by the ar command.
       ar is currently used only to create .a static libs.
       gcc is able to read the .a format and extract the .o files
       it needs.
       ar is also the format of the debian packages  (.deb)
       To see the typical symbol relocation table of a file ar
       use  ar tvf xxxxx     or even      nm -s    xxxxxx.deb
  )

  Anyhow it could even be, that if the memory page of a static library is not already
  paged in cache, the load+call could be slower that the call of a shared-library where
  for any reason (lib already used, or loaded by other progs that uses it)
  the page is already loaded.

  A shared lib. has 3 names according to who uses it:

  REAL name
      lib xxxxx . so . n . n . n                   (ex. libpthread.so.1.1)
                       ^   ^   ^
                               release number (optional)
                           minor number : for changes that DON'T make prev. version incompatible
                                          (ex. bug fixes)
                       version number : numbers are added (so new versions are delivered)
                                        if a change makes the previous library incompatible
                                        (ex. a function is removed)
      - MANY VERSIONS: So, many versions of the same lib can be present in a system.
                       The last succesfully installed version is the one to which all the progs then link to.

  SONAME (or 'Fully qualified name') keeps only lib xxxxx . so . n        (ex .libpthread.so.1)
  LINKER NAME : it only uses lib xxxxx . so                               (ex. libpthread.so)

  LINKER NAME is a SYMLINK ---> to SONMAE that is a SYMLINK to REAL NAME:
  ex. looking in /lib:

     lrwxrwxrwx  1 root root      14 Dec  9  2010 libuuid.so.1 -> libuuid.so.1.2
     -rwxr-xr-x  1 root root   11296 Jan 27  2009 libuuid.so.1.2


  - LOCATIONS: /lib             (the libs used at start-up & root file system)
               /usr/lib         (the libs used internally by the system)
               /usr/local/lib   (the libs NOT part of the standard distro (can be buggy))

ADD A NEW LIB:    1. add the dir in /etc/ld.so.conf
                  2.  "       "    $LD_LIBRARY_PATH
                  3.  "       "  to the cache (ldconfig -n ...) <--- if 1. & 2. have been done, thi step will be
                                                                     automatically re-done during boot

loader:    is the file /etc/ld.so
           it loads for an ELF exe all its libs. searching in a list of dirs.
           conatined in the file  /etc/ld.so.conf
           To optimise future searches a cache-file is created: /etc/ld.so.cache
           So:

           ld.so   Search each library in
                   1. $LD_LIBRARY_PATH  that like $PATH, lists the dir separated by ':'
                   2. list of dirs conatined in the file  /etc/ld.so.conf
                   3. the file '/etc/ld.so.cache'  which is a bin file (fast to read) generated
                      by 'ldconfig'

ldconfig:  Is the command to execute by hand when a shared lib is added/removed
           - it can be in /sbin (so normally not found in $PATH)

                          ldconfig -p         list what is inside the cache
                          ldconfig -n dirs... add new dir in the cache.

  --------------------------------------------------------------------------------------------------------------------------
  |CREATE A SHARED LIB:                                                                                                     |
  |           - gcc -c -Wall -Werror -fPIC shared.c         <--- compile the code into 'position independent' format        |
  |           - gcc -shared -o libshared.so shared.o        <--- create the actual lib: libshared.so                        |
  |           - put the lib in the dir xxxx you want it should be installed (ex. /usr/local/lib)                            |
  |           - gcc -Lxxxx   -Wall main.c -o main -lshared  <--- compile a prog main.c that uses the code inside shared.c   |
  |                                                              -l    link the shared lib                                  |
  |                                                              -L    in which dir it is                                   |
  --------------------------------------------------------------------------------------------------------------------------

ldd:   is the prog that allow to know which libraries are required
       by an exe.
               ex.  ldd /bin/bash
                linux-vdso.so.1 =>  (0x00007fff5613c000)
                libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007ff4d1282000)
                libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007ff4d107e000)
                libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007ff4d0cb9000)
                /lib64/ld-linux-x86-64.so.2 (0x00007ff4d14d0000)




below 3 cmds used in: pmap `pgrep -u 1000` | grep total | awk '{print $2}'

______________ free
         show the RAM
                       Options:
                        -b, --bytes         show output in bytes
                        -k, --kilo          show output in kilobytes
                 ---->  -m, --mega          show output in megabytes
                        -g, --giga          show output in gigabytes
                            --tera          show output in terabytes
                        -h, --human         show human-readable output
                            --si            use powers of 1000 not 1024
                        -l, --lohi          show detailed low and high memory statistics
                        -o, --old           use old format (without -/+buffers/cache line)
                        -t, --total         show total for RAM + swap
                        -s N, --seconds N   repeat printing every N seconds
                        -c N, --count N     repeat printing N times, then exit

______________ pmap
         show the RAM used by 1 proc

                      Options:
                       -x, --extended              show details
                       -X                          show even more details
                                  WARNING: format changes according to /proc/PID/smaps
                       -XX                         show everything the kernel provides
                       -c, --read-rc               read the default rc
                       -C, --read-rc-from=<file>   read the rc from file
                       -n, --create-rc             create new default rc
                       -N, --create-rc-to=<file>   create new rc to file
                                  NOTE: pid arguments are not allowed with -n, -N
                       -d, --device                show the device format
                       -q, --quiet                 do not display header and footer
                       -p, --show-path             show path in the mapping
                       -A, --range=<low>[,<high>]  limit results to the given range

______________ pgrep
         grep on proc  (ex instead of ps -ef | grep basil  -->     pgrep -u $(id -u basil)

                      Options:
                       -d, --delimiter <string>  specify output delimiter
                 ----> -l, --list-name           list PID and process name
                       -v, --inverse             negates the matching
                       -w, --lightweight         list all TID
                       -c, --count               count of matching processes
                       -f, --full                use full process name to match
                       -g, --pgroup <id,...>     match listed process group IDs
                       -G, --group <gid,...>     match real group IDs
                       -n, --newest              select most recently started
                       -o, --oldest              select least recently started
                       -P, --parent <ppid,...>   match only child processes of the given parent
                       -s, --session <sid,...>   match session IDs
                       -t, --terminal <tty,...>  match by controlling terminal
                 ----> -u, --euid <id,...>       match by effective IDs
                       -U, --uid <id,...>        match by real IDs
                       -x, --exact               match exactly with the command name
                       -F, --pidfile <file>      read PIDs from file
                       -L, --logpidfile          fail if PID file is not locked
                       --ns <pid>                match the processes that belong to the same
                                                 namespace as <pid>
                       --nslist <ns,...>         list which namespaces will be considered for
                                                 the --ns option.
                                                 Available namespaces: ipc, mnt, net, pid, user, uts

____________________________________________________________ packages

  ------------
  .deb     (Debian). They are in the form

                name_vvv-rrr_aaa.deb

                vvv   version      (major id)
                rrr   revision     (minor id)
                aaa   architecture (patch level)

           they are managed by the tools:

         . dpkg        command line
         . apt-get     command line
         . dselect     interactive fron-end for dpkg

         . alien   can create .deb pkg or also
                   convert non deb pkg like (rpm)

                   -i   install the pkg and remove the converted pkg
                   -r   convert pkg in rpm
                   -t     "      "     tgz

                   ex.  alien -i package.rpm


         . /var/lib/dpkg/  contains text files (ex status / available) and dirs
                           with the information of installed pkg, what to remove, ...
                           This dir is used by both dpkg and apt-get

         . dpkg:
               -i       pkg    install pkg
               --purge  pkg    remove  pkg
               -r       pkg    remove  pkg but not the .conf files
               -E              not overwrite prev installed pkg (with same  version)
               -G                        idem                   (..   older   ..   )
               -L       pkg    list files installed from pkg
               -s       pkg    display status info for pkg
               -S   pattern    Search for files with that patter in all pkgs
               -l  [pattern]   list info for all pkg names that match pattern
                               if pattern is not specified list info for all pkgs
               --unpack pkg    unpack but not install
               -R              recursively on subdir (ex to add at option -i, ..)
               --print-avail pkg   extract info for pkg from /var/lib/dpkg/available
               --configure   pkg   Configure an unpacked pkg. Requires setup of conf files.


               ex.  # dpkg -S apt-get
                      apt: /usr/share/man/man8/apt-get.8.gz
                      apt: /usr/bin/apt-get

               ex.  # dpkg -l 'ap*'
||/ Name                    Version          Architecture     Description
+++-=======================-================-================-============================
un  apache2.2-bin           <none>           <none>           (no description available)
ii  apg                     2.2.3.dfsg.1-2ub amd64            Automated Password Generator
un  apmd                    <none>           <none>           (no description available)
ii  app-install-data        14.10            all              Ubuntu applications (data files)
                    ...     ...     ...     ...     ...

  ------------
  apt-get      Advanced Package Tool (APT), not only specific for .deb

               -d   download only not install (to prevent install errors if download stops)
    options    -s   simulate the changes, but do nothing
               -y   answer yes automatically to all prompts

               install pkg  install / upgrade
    commands   remove  pkg
               upgrade pkg  upgrade only if dep are ok with no conflicts.
               update  pkg  fetch a list of currently available pkg
               dist-upgrade   upgrade the debian distribution

               list the pkg to obtain in
                                        /etc/apt/sources.list



  apt-get      Advanced Package Tool (APT), not only specific for .deb


  ------------
  rpm
        -i
            -v        verbose
            -vv       super "
            -h        display hash (#) as progression bar during install
            --test    not install, only test
            --force   replacement (allow an old pkg to replace a newer!)

        -U  upgrade   upgrade also if there wasn't a previous version
                      so it acts like the install (-i)
            --test    not upgrade, only test

        -e  remove
            --test    not remove, only test

        -q  query
            -a        list all pkgs                      rpm -qa
            -l pkg    list all files inside pkg          rpm -ql kernel-source
            -c        list only conf files               rpm -qc at
            -d        list only doc  files               rpm -qd at
            -i pkg    list info of pkg                   rpm -qi kernel-source
            -f xxx    list any pkg containing file xxx   rpm -qf /etc/aliases
            -R        list the Required pkg by this pkg
            -p        to specify a pkg (ex. I can write rpm -qi pkg / or rpm -qi -p pkg)

        -V  Verify
  ------------
  yum   (Yellowdog Updater Modified)
        is configured through the /etc/yum.conf

        yum install        yum install samba
        yum erase          yum erase   httpd  # remove only if ok with dep
        yum remove         yum remove  httpd  # remove without check dep (caution!)
        yum check-update
        yum update
        yum list           list all pkg in the system
        yum info           ex. yum info samba
        yum search
____________________________________________________________ network
  ipconfig     (can be an alias for   nmcli dev list iface eth0 | grep IP4)
  ip route     (to get default gateway)
  ip addr      (to get my addr)
  route -n     (overbiew where traffic is going)
  cat /et/resol.conf  (dns info)
  cat /etc/hosts      (preloaded hostnames)

____________________________________________________________

/proc  list info like

       cat /proc/interrupts
               CPU0    CPU1    CPU2    CPU3    CPU4    CPU5    CPU6    CPU7
         0:      18       0       0       0       0       0       0       0  IR-IO-APIC-edge      timer
         1:   25529    1004     807     884    1470    1138    1023     851  IR-IO-APIC-edge      i8042
         7:       8       0       0       0       0       0       0       0  IR-IO-APIC-edge
         8:       0       0       0       1       0       0       0       0  IR-IO-APIC-edge      rtc0
         9:   13528    6556    4940    4684    5402    3156    2419    2306  IR-IO-APIC-fasteoi   acpi

        cat /proc/dma
         4: cascade

        cat /proc/ioports
        0000-0cf7 : PCI Bus 0000:00
          0000-001f : dma1
          0020-0021 : pic1
          0040-0043 : timer0
          0050-0053 : timer1
          0060-0060 : keyboard
          0062-0062 : PNP0C09:00
            0062-0062 : EC data
____________________________________________________________

USB     # lsusb -t             (to show devices physically USB attached)
                        Bus# 4
                        '-Dev#    1 Vendor 0x0000 Product 0x0000
                        Bus# 3
                        '-Dev#    1 Vendor 0x046d Product 0xc501
                        |-Dev#    2 Vendor 0x0781 Product 0x0002
                        '-Dev#    3 Vendor 0x0000 Product 0x0000
                        Bus# 2
                        '-Dev#    1 Vendor 0x04b8 Product 0x0005

        # types of USB host controllers

          OHCI  - USB1.1   12 Mbps   Open      Host Controller Interface
          UHCI  - USB1.1   12 Mbps   Universal Host Controller Interface
          EHCI  - USB2.0  480 Mbps   Enhanced  Host Controller Interface
____________________________________________________________

MODULES:       cat -n /proc/modules     to see which is running
                                        'lsmod' is a trivial prog to make that cat
                                        better presented.

               modinfo                  list info on a module (ex. author)

               lspci                    list the PCI bus, and the device attached
                        -t              displays in a tree form
                        -vv             very verbose

               insmod                   to insert a new module in the running kernel
                                        ex. insmod fat
                        -s              output to syslog instead of stdout
                        -v              verbose

               rmmod                    to remove a module
                        -a              remove all unsude mod
                        -s              syslog

               modprobe                 Act as a wrapped arounf both insmod and rmmod
                                        taking care of dependency.
                                        So modprobe add mods
                        -r              modprobe -r remove mods


