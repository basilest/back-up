-----------------------------------
           MongoDB is implemented in C++.
           Drivers and client libraries are typically written in their respective languages,
           although some drivers use C extensions for better performance.

           Documents are stored as JSON items
           and JAVASCRIPT code can be used to manage them on the fly
           ex. how to duplicate a doc:
                     . get it (into a var)
                     . change what you need
                     . add the var:

                > db.coll.insert({_id: 'h_A', val: 1})
                > var orig = db.coll.findOne({_id: 'h_A'})  <-- GET
                > orig._id = 'h_B'                          <-- CHANGE
                > db.coll.insert(orig)                      <-- ADD


                ________________________________________________________________________________
               |NB. always use 'findOne()' when setting a var and not 'find()'                  |
               |                                                                                |
               |           var o=db.company_profile.findOne({"_id":"LP006400"}) <---- OK        |
               |           var o=db.company_profile.find   ({"_id":"LP006400"}) <---- NOT OK    |
               |                                                                                |
               |    findOne: returns a doc, so the var can be used over and over                |
               |    find   : returns a cursor, so it's ok for 1 statement, then the var seems   |
               |             to vanish (as the cursor has been used once and should be reloaded)|
               |________________________________________________________________________________|

-----------------------------------
db.getCollection('company_profile').find({}).forEach(function(doc) {
var accounts = doc.data.accounts;
print("aaaaa");
})

db.getCollection('company_profile').find({}).forEach(function(doc) {
var accounts = doc.data.accounts;
print("accounts");
})


db.getCollection('company_profile').find({"data.accounts": {$ne : null}})


db.getCollection('company_profile').find({"data.accounts": {$ne : null}}).forEach(function(doc) {
var comp_no = doc._id;
db.getCollection('company_profile').update({"_id":comp_no},
{"$set": {"data.accounts.next_accounts.period_end_on" : ISODate("2014-08-31T00:00:00.000Z")}}
)})


       creates                "next_accounts" : {
           this --->                          "period_end_on" : ISODate("2017-05-23T00:00:00.000Z")
                               },
-----------------------------------
          _______________________
          | Actually internally the docuemnts are stored in BSON (a Binary JSON))
          | usually in  /data/db. There should be 2 files per collection there,
          |              collection.0       stores the data (and that integer is then incremented as needs be)
          |              collection.ns      stores the namespacing metadata for the collection.
          |______________________
-----------------------------------
1. run on all the svales
myaws l cmd "mongo --host localhost -u admin --authenticationDatabase admin company_profile -p <password_here> -eval '"'db.company_profile.find({_id : "NI036890"},{"data.company_name":1})'"'"
-----------------------------------
1. run the daemon in a shell:

           mongod                             # with no params
           mongod --dbpath mongo_test/        # or specify in which dir the DB is

           if with just "mongod" I receive a
               exception in initAndListen: NonExistentPath: Data directory /data/db not found., terminating
               shutdown: going to close listening sockets...
               ....
           then specify the "db" dir (or create it empty somewhere)
           which will be used later on.

   the above 2 ways keep that shell not usable
   a way is to run as a daemon (param "--fork", having it running in background)

           mongod --fork --logpath /var/log/mongodb.log

                          the --logpath specify the log file

   the daemon is so running (foreground or background)
   listening to its standard port 27017:

   2016-12-20T07:34:33.178+0000 I CONTROL  [initandlisten] MongoDB starting : pid=3317 port=27017 dbpath=mongo_test/ 64-bit host=pd12968.internal.ch
   ...
   ...
   ...
   ...

2. in another shell run "mongo" which opens the mongo shell
   to run interactive commands that are in the forms
               db.xxxxxx()

   to see them all:

   > db.help()  <--- good

     db.listCommands();   <---- plenty of commands with examples

  _________________
  |
  | mongo --host mongodb://envb.mongo.ch.gov.uk --port 15307     <---- it I want to connect to a remote host
  |________________
  |
  | mongo -u user1 -authenticationDatabase dbauth1 --port 27017 -p       <--- it will ask for a password
  |
  |
  |Or even:
  |
  |MONGO_HOST='localhost'
  |MONGO_PORT='27017'
  |MONGO_AUTHCODE_DB='aaaa'
  |MONGO_DB='dddd'
  |MONGO_USER='uuuu'
  |MONGO_PASSWORD='pppp'
  |
  |MONGO_URL="mongodb://${MONGO_USER}:${MONGO_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/${MONGO_DB}?authSource=${MONGO_AUTHCODE_DB}&authMechanism=SCRAM-SHA-1"
  |
  |
  |echo "$MONGO_URL"
  |    "mongodb://uuuu:pppp@localhost:27017/dddd?authSource=aaaa&authMechanism=SCRAM-SHA-1"
  |
  |mongo "$MONGO_URL"    <-------------- easy
  |
  |_________________ replica set
  |   HOST =  I can list + hosts (each with its own port) if they are part of a replica set. They are separated by a comma ','
  |           ex:
  |              HOST='mongo-db1.live.aws.internal:27017,mongo-db2.live.aws.internal:27017,mongo-db3.live.aws.internal:27017'
  |   when I list + hosts, I must then add the 'replicaSet' parameter with the replica set name: ex 's1'
  |
  |   MONGO_URL="mongodb://${USER}:${PASSWORD}@${HOST}/${DB}?authSource=${AUTH_DB}&authMechanism=SCRAM-SHA-1&replicaSet=s1"
  |_________________                                                                                         ^^^^^^^^^^^^^
  |
  |   TRICK:  If I don't know the replica set name I put a random name
  |           I will receive many errors, anyhow it's dumped even this info: 'setName: "s1"
  |           which is exactly the replica set name to use.
  |_________________
  |
  | mongodump --host envb.mongo.ch.gov.uk --port 16007           <---- this creates a dir ./dump/   with inside all the db collections
  |_________________
  |
  | mongoexport -h envb.mongo.ch.gov.uk:16407 -d company_profile -c company_profile > statler.txt    <---- thix export a colection into a json TEXT file
  | mongoexport -h 'mongo-db1.live.aws.internal:27017'
  |             -u admin
  |             -p $MONGO_PASSWORD
  |             --authenticationDatabase admin
  |             -d company_profile
  |             -c company_profile
  |             --fields '_id,data.company_name'  <-------  export ONLY these fields
  |             --type=csv > company.export.cs              (works only for csv not json)
  |_________________
  |
  | mongorestore                                                 <---- to be run from the dir containing ./dump
  |                                                                    It populates (restores) a db from ./dump
  |
  |  ex. mongorestore -h envb.mongo.ch.gov.uk --port 27018 -d account -c company_auth_codes dump/account/company_auth_codes.bson
  |_________________
  |
  |  mongoimport -h envb.mongo.ch.gov.uk:47307 -d account -c company_profile -u u123 -p p123 --file export.json
  |
  |_________________

  to save interactive command output into a file:

  1st way: mongo dbname << EOF > output.json     # then run the command and ^D
  2nd way:
-----------------------------------
           to have info on the db:

                db.stats()

           /* 1 */
                    {
                        "db" : "bris_messages",
                        "collections" : 2,
                        "views" : 0,
                        "objects" : 50,
                        "avgObjSize" : 167.9,
                        "dataSize" : 8395.0,
                        "storageSize" : 73728.0,
                        "numExtents" : 0,
                        "indexes" : 2,
                        "indexSize" : 53248.0,
                        "fsUsedSize" : 1238929408.0,
                        "fsTotalSize" : 10430468096.0,
                        "ok" : 1.0
                    }

----------------------------------- see DB list

                              In MongoDB default database is 'test'.
                              If I don't create any database,
                              the collections will be stored in 'test'

           show dbs                        # To see the DB list

           db                              # To see which is the current DB

           use stef                        # To create a new db named "stef" if not present
                                             otherwise, just to select that as the current DB to work on

           db.dropDatabase()               # To remove a database stef:
                                                           1/2   use stef
                                                           2/2   db.dropDatabase().

           db.createCollection("cccc")     # to create a collection cccc

           db.createCollection("cccc",     # to create cccc with the 4 Optional params
                                { capped : true,       if 'true', cccc is size_limited (oldest entries are overwritten)
                                  autoIndexID : true,  if 'true', cccc has an index auto-created (on _id field)
                                  size : 6142800,      max size (in bytes)       for 'capped'
                                  max  : 10000 } )     max size (in num of docs) for 'capped'

           show collections   # to see the collections in the DB
           db.getCollectionNames()   # does the same

           db.cccc.find()     # to see all the content of the cccc collection  (more on find() below)

           db.cccc.insert({"name":"tutorials point"})   # to insert a doc in collection cccc
                                                          If cccc is not already created, it creates it
                                                          (so another way to create)

           db.cccc.insert({                                                  4         3           2          1
                            _id: ObjectId(7df78ad8902c),  <-- 12 bytes  |timestamp| machine id |proc id| increment |
                            title: 'MongoDB Overview',
                            description: 'MongoDB is no sql database',
                            by: 'tutorials point',
                            url: 'http://www.tutorialspoint.com',
                            tags: ['mongodb', 'database', 'NoSQL'],
                            likes: 100
                         })

           db.cccc.insert([   <----- '[' an array of docs
                          {
                            aa: 'vvvv 1',
                            aa: 'vvvv 2'
                          },
                          {
                            aa: 'vvvv 3',
                            aa: 'vvvv 4'
                          },
                          {
                            aa: 'vvvv 5',
                            aa: 'vvvv 6'
                          }
                         ])

           db.cccc.save(doc)            # another way to insert a doc in cccc
                                        - without the '_id' in 'doc' it is like 'insert'
                                          (and _id is auto created)
                                        - with an '_id' it replaces that entry

           db.cccc.update(doc)                       # like 'save()' but while the save() substitutes in full the doc
           db.cccc.update(query, update, options)    the update() changes only the fields provided
                                                     Since version 2.2. there is also the 'multi-update'
                                                     that is the update with the option  'multi' set to 'true'
                                                     (default is 'false', and then it updates only one document)
                                                     If multi is set to true, the update() updates all docs that match the <query>
                                                     ex. db.cccc.update({}, {$set: {lastLookedAt: Date.now() / 1000}}, { multi: true })



           db.cccc.drop()              # To delete cccc

           db.ccc111.aggregate([ { $match: {} }, { $out: "ccc222" } ])      # to copy a collection ccc111 into ccc222

           db.dropDatabase()           # To delete the selected DB

           db.cccc.find()              # To query/select from cccc

           db.cccc.find().pretty()     # To have a better output

           db.cccc.find({},{"k":1,"k2":0}) # normally find will return ALL the fields of a doc
                                         (like all the cols of a table)
                                         to have only some fileds turn them OFF/ON with :0 :1
                                         Note the syntax:   {} , {.....}       <--- so first a {}
                                        (This way it's possible to skip _id field
                                         because, by default, _id field is always returned)

                                         db.getCollection('queue').find({},{"data" : 0})        will show ALL the fields "data"-excluded
                                         db.getCollection('queue').find({},{"data" : 1})        will show "data"-only         (ALL other fields excluded)
                                         db.getCollection('queue').find({},{"data" : 1, _id:1}) will show "data" & "_id" only (ALL other fields excluded)

           db.cccc.findOne()           # To query/select from cccc - ONLY 1 doc

           db.cccc.find({"kk":"vv"})   # add the WHERE clause key=val :
                                         ex  db.cccc.find({"by":"tutorials point"})
                                         The other operators use the strange syntax with a '$'

                                             $lt    <
                                             $lte   <=
                                             $gt    >
                                             $gte   >=
                                             $ne    !=          ex. {"data.type" : {$ne : "publish_filing"}}
                                             $eq    ==
                                             $where             ex. find( { $where: function() { return this.Grade1 > this.Grade2 } } );
                                                                    find( { $where : "this.Grade1 > this.Grade2" } );
                                             $exp   (> mongo 3.6)
                                                                    find({$expr:{$gt:["$Grade1", "$Grade2"]}})
                                             $regex //   <------------ it's the 'LIKE' operator but the '%' in mongo is '.*'
                                                                so it is ex           db.users.find({"name": /.*m.*/}
                                                                 or even shorter :    db.users.find({"name": /m/})
                                                                 or longer            db.users.find({"name": {$regex : /m/}}
                                                                 or with option       db.users.find({"name": {$regex: /acme.*corp/, $options: "si" } }

                                                                 options are i,s,x,m and only i & m can be also
                                                                 in the shorter form /  /i
                                                                                     /  /m

                                                                         . i       case insensitive
                                                                         . s       the '.' includes \n
                                                                         . x       (ignores ALL white spaces) and UNIX-like comments: # ...
                                                                         . m       to match in a multiline the start ^ and end $
                                                                                   ex in "First line\nSecond line"   a /^S/
                                                                                       will not match while /^S/m will do

                                        Still in the form:

                                            {"kk" :
                                             { $op : "vv" }
                                            }

                                        ex.   db.cccc.find({"price" : {$gt:50}})

                                        The AND - OR  are the operators $and $or
                                        with the syntax

                                            { $op : [            <---  '['  an array
                                              {"k1" : "v1" },
                                              {"k1" : "v1" },    <-- the comma ',' separated items
                                              {"k1" : "v1" }
                                             ]
                                            }

                                        The AND can be omitted as a simple list of values
                                        separated by commas is managed as an implicit AND
                                        ex.
                                        db.getCollection('queue').find({$and : [{"attempt" : {$gt : 0}}, {"attempt" : {$lt : 10}}]})
                                        db.getCollection('queue').find({$and : [{"created" : {$gt : ISODate("2017-03-23")}}, {"created" : {$lt : ISODate("2017-03-24")}}]})

           db.cccc.find({"kk": {$exists:true}});     # find elem containing that field )even if null)
           db.cccc.find({"kk": {$ne:null}});         #    "                  "          only if NOT null

           db.cccc.find().limit(5)     # like bash head -5. It outputs not more than those docs
           db.cccc.find().skip(5)      # It outputs starting after the firts 5 (skipping them)
           db.cccc.find().sort({"k":1})   # :1 means ascending (<--default)  (:-1 descending)
           db.cccc.find().count()      # on the shell it can be omitted .find() : db.cccc.count()

           db.cccc.remove(...)         # delete from cccc the docs specified by any clause (...)
                                       ex. db.cccc.remove({'price': 5})
                                       with no args it deleted ALL the docs
                                       db.cccc.remove()  or
                                       db.cccc.remove({})  <--- empty query

           db.cccc.ensureIndex({k:1})  # to create an index on field "k"  (ex. {"price":1})
                                         :1 ascending  :-1 descending

                                       nb. MongoDB limits the size of your sort without an index.
                                       That is, if you try to sort a very large
                                       result set which can’t use an index, you’ll get an error

                                       Using 'limit' in conjunction with sort , can be a way
                                       to avoid running into problems when sorting on non-indexed field

           db.cccc.aggregate(...)      # to subfilter according to the similar count/min/avg/max SQL operators.
                                         The following operators must be preceded by the 'aggregate' operator: $group

                                              $sum
                                              $avg
                                              $min
                                              $max
                                              $push
                                              $first
                                              $last
                                              $addToSet

                                       So the general syntax is   .aggregate (
                                                                               [
                                                                                 $group  :
                                                                                    { "k"  :
                                                                                         {Sop : __ }
                                                                                    }
                                                                               ]
                                                                            )

           references 1                # instead of having each doc FULLY SELF-CONTAINED
                                         (ex suppose the 'address' information of all the employes
                                          of a company is the same, so it could be usefull to just
                                          reference it externally and not SELF-CONTAINED in each employer)

                                        {
                                           "_id":ObjectId("52f..."),
                                            "contact": "987654321",
                                            "dob": "01-01-1991",
                                            "name": "Tom Benzamin",
                                            "address_ids": ObjectId("c4a5...")  <-- reference to external doc
                                       }

                                       Then to retrieve:

                                       >var result = db.users.findOne({"name":"Tom Benzamin"},{"address_ids":1})
                                       >var addresses = db.address.find({"_id":{"$in":result["address_ids"]}})

           references 2                # a second more general way to add a ref is
                                         to assign the special 3 fields named "$ref" $id" "$db"
                                         {
                                            "_id":ObjectId("53402597d852426020000002"),
                                              "address": {
                                                     "$ref": "address_home",   <-- the name of the collection
                                                     "$id": ObjectId("534009e4d852427820000002"), <-- the doc inside that collection
                                                     "$db": "tutorialspoint"   <-- this is optional (the name of DB)
                                                     },
                                              "contact": "987654321",
                                              "dob": "01-01-1991",
                                              "name": "Tom Benzamin"
                                         }



         _______________________________________________________________________________________
         |
         |     Mongo Shell                       Javascript equivalent
         |______________________________________________________________________________________
         | show dbs, show databases 	db.adminCommand('listDatabases')
         |
         | use <db>                     db = db.getSiblingDB('<db>')
         |
         | show collections             db.getCollectionNames()
         |
         | show users                   db.getUsers()
         |
         | show roles                   db.getRoles({showBuiltinRoles: true})
         |
         | show log <logname>           db.adminCommand({ 'getLog' : '<logname>' })
         |
         | show logs                    db.adminCommand({ 'getLog' : '*' })
         |
         | it
         |                             cursor = db.collection.find()
         |                             if ( cursor.hasNext() ){
         |                                cursor.next();
         |                             }
         _______________________________________________________________________________________


-----------------------------------
           REPLICA SET     (is the SET of PRIMARY + SECONDARY nodes
                            to manage data redunandy/crash recovery)

           _______________________
          | MongoDB works with N nodes, of which
          |    . 1 and only 1 is a PRIMARY node that receives the WRITEs
          |      and forwards them to the others N-1 SECONDAY nodes
          |
          |    . If the PRIMARY node goes OUT of service, 1 of the SECONDARYs
          |      is elected PRIMARY
          |
          |    . If the old PRIMARY is put back in service, it joins
          |      but now as a SECONDARY
          |_______________________

          To set-up:
                    1.a  start 1 daemon with arg --replSet    (suppose this is on a machine host75.net)
                         mongod --port 27017 --dbpath "..." --replSet nnnn   <-- the name to give to the SET

                    1.b  connect with a mongo shell to configure it:
                           - rs.initiate()      # initiate a new set
                           - rs.conf()          # to inspect current configuration
                           - rs.status()        # to inspect current status

                         mongod --port 27017 --dbpath "..." --replSet nnnn

                    2.a  start normally any other SECONDARY  daemons

                    2.b  connect with a mongo shell to configure them:
                           - rs.add("host75.net:27017")      # attach as SECONDAY to the SET


          > db.isMaster()         <--  to know which node I am
                               {
                                       "ismaster" : true,
                                       "maxBsonObjectSize" : 16777216,
                                       "maxMessageSizeBytes" : 48000000,
                                       "maxWriteBatchSize" : 1000,
                                       "localTime" : ISODate("2016-12-20T11:50:46.847Z"),
                                       "maxWireVersion" : 5,
                                       "minWireVersion" : 0,
                                       "readOnly" : false,
                                       "ok" : 1
                               }




-----------------------------------
           .
-----------------------------------
           .
-----------------------------------
           .
-----------------------------------
In contrast to RELATIONAL DATABASES (and their notion of "Relation", i.e., a tuple (or row)
of related strong-typed data) there are NoSQL databases:
                           NoSQL DB
                                |
                           key-value store DB
                                |
                           Full text DB    One of the earliest systems was IBM STAIRS,
                                |          introduced in 1973.
                                |          Full text databases became common about 1990 when
                                |          computer storage technology made them economic and
                                |          technological possible.
                                |
                           document-store DB
                                |
                           XML databases DB

key-value store:  the data (called the 'value') is considered to be inherently OPAQUE to the database.

a subclass:  document-oriented database: data (called the 'document') are not opaque,
                                          but their internal structure is known and the engine
                                          relies in order to extract metadata

a subclass:  XML databases  (as well as YAML, JSON, and BSON)
               JSON is widely used in online programming for interactive web pages and mobile app.

smometimes used a mapping : Some  doc-based DBs allow documents to be mapped
                            onto a more suitable format using a schema language such as
                            DTD, XSD, Relax NG, or Schematron.

similar:             Documents inside a document-oriented database are similar

key:                 Documents may be addressed in the database via a unique key that is often
                     a simple string, a URI, or a path.
simple doc-based DB: only provide to retrieve an opaque doc from its key
modern doc-based DB: provide far more, because they extract and index all kinds of metadata,
                     Such DBs offer a query language that allows the user to retrieve doc based on their content.
                     (ex. all doc with DATE in some range)

advantage:           docs can change in type and form at any time.
                     If one wishes to add a COUNTRY_FLAG to a CONTACT,
                     simply add this field to new documents as they are inserted,
                     this will have no effect on the DB or the docs already stored.
                     This indicates an advantage of the document-based model

advantage:           Because optional values are not represented by placeholders as in most RDBs,
                     key-value stores often use far lss memory to store the same database,
                     which can lead to large performance gains in certain workloads.


sharding             A type of Horizontal partitioning. Rows of a table are held separately,
                     rather than being split into columns (which is what normalization and
                     vertical partitioning do). Each partition forms part of a shard,
                     which may in turn be located on a separate DB server or physical location.

                     sharding splits large partitionable tables across the servers,
                     while smaller tables are replicated as complete units.

Load balancing       MongoDB scales horizontally using sharding.
                     The user chooses a shard key, which determines how the data in a
                     The user chooses a shard key, which determines how the data in a
                     collection will be distributed. The data is split into ranges
                     (based on the shard key) and distributed across multiple shards.
                     (A shard is a master with one or more slaves.)
                     MongoDB can run over multiple servers, balancing the load and/or
                     duplicating data to keep the system up and running in case of
                     hardware failure. Automatic configuration is easy to deploy,
                     and new machines can be added to a running database.

JSON / BSON:         Internally MongoDB uses a binary serialized JSON format called BSON.
                     Externally, this means that we use JSON a lot.

the terms: MongoDB is made up of databases which contain collections. A collection
                     is made up of documents. Each document is made up of fields.
                     Collections can be indexed, which improves lookup and sorting performance.
                     Finally, when we get data from MongoDB we do so through a
                     cursor whose actual execution is delayed until necessary.

collections          are like tables, anyhow they are schema-less (while tables are strongly typed)
documents            are like row:Notice that, in addition to the data you specified, there’s an
field.               Every document must have a unique _id field. If not specified, MongoDB
                     generates a value (type ObjectId)
                     By default, the _id field is indexed (internal collection: system.indexes)
                     ex. _id assigned explicitally:
                     db.employees.insert({_id: ObjectId(
                                           "4d85c7039ab0fd70a117d730"),
                                            name: 'Leto'})

doc size 16MB        individual document is currently limited to 16 megabytes in size.

mongod:              the server
mongo:               the (javascript) shell
mongodb.config       insert this string:
                     dbpath=PATH_TO_WHERE_YOU_WANT_TO_STORE_YOUR_DATABASE_FILES ex:
                     dbpath=c:\mongodb\data  on Linux  dbpath=/var/lib/mongodb/data
--config             so now run as:
                     c:\ mongodb\bin\mongod --config c:\mongodb\bin\mongodb.config


mongo shell         most used commands:
                    (omitting the ending () show the javascript function() implementation
                    for that cmd

                    db.version()
                    db.help()
                    db.stats()
                    db.getCollectionNames()

                    db.COLLECTION_NAME()  ex: db.unicorns.help()    db.unicorns.count()
                    system.indexes        this collection is created once per database and
                                          contains the information on our database’s indexes


                    use learn
                    db.unicorns.insert({ name: 'Aurora', gender: 'f', weight: 450})  /* JSON */
                    db.unicorns.find()
                    db.system.indexes.find()
                    db.unicorns.remove ({})          remove any docs

find()   remove()   count()    both these 3 cmd, use selectors:
                    Query Selectors  (like the 'where'  in normal SQL query) are:

                    $lt   $lte   $gt   $gte  $ne

                    db.unicorns.find ({ gender: 'm', weight: {$gt: 700}})
                    db.unicorns.find ({ gender: {$ne: 'f'}, weight: {$gte: 701}})



                    $exist  $in

                    db.unicorns.find ({ vampires: {$exists: false }})   to test presence of a field
                    db.unicorns.find ({ loves: {$in :['apple', 'orange']}})



                    $or

                    db.unicorns.find ({gender: 'f', $or: [{loves: 'apple'}, {weight: {$lt: 500}}]})

                    $not

                    db.inventory.find( { price: { $not: { $gt: 1.99 } } } )



                    _id

                    db.unicorns.find ({ _id: ObjectId( "TheObjectId ")})

update() / set()    db.unicorns.update ({name: 'Roooooodles'}, {weight: 590})   MAYBE NOT!!! as replace
                                                                                ALL the doc with a new doc only
                                                                                a only {weight: 590}
                    db.unicorns.update ({name: 'Roooooodles'}, {$set: {weight: 590}})  MAYBE YES!!!


                    $inc   $push

                    db.unicorns.update ({name: 'Pilot' },  {$inc:  {vampires: -2}})
                    db.unicorns.update ({name: 'Aurora' }, {$push: {loves: 'sugar'}})  add a value to
                                                                                       a field (here 'loves')
                                                                                       already present.


                    $Upserts

                    An upsert updates the document if found or inserts it if not.
                    db.hits.update ({page: 'unicorns'}, {$inc: {hits: 1}}, {upsert: true});



                    Multiple Updates

                    db.unicorns.update({}, {$set: {vaccinated: true}}, {multi: true});



                    db.unicorns.find({}, {name: 1});          turns only field name
                    db.unicorns.find({}, {name:1, _id: 0};    avoid turning _id


____________________________________________________________ NO JOIN

    Definition: A foreign key is 1 column (1 or more) in a table that matches
    the primary key column of another table.
    The foreign key can be used to cross-reference tables.

    A JOIN is a table built with cols coming from more tables.

    there are no Joins in MongoDB. The approach to overcome this can be for ex
    to store the data of another table as 'embeded' doc of the 1st table.
    ex:
        db.employees.insert({_id: ObjectId(
        "4d85c7039ab0fd70a117d734"),
        name: 'Ghanima',
        family: {mother: 'Chani',
        father: 'Paul',
        brother: ObjectId(
        "4d85c7039ab0fd70a117d730")}})


        embedded documents can be queried using a '.' (dot-notation)
        db.employees.find({'family.mother': 'Chani'})
                                  ^
____________________________________________________________ OTHER FATRURE

capped:                  db.createCollection('logs', {capped: true, size: 1048576})  when the collection reaches
                                                        ^            ^               1MB  (1048576) old docs are
                                                                                     purged. Instead of 'size'
                                                                                     I can use 'max' and old docs
                                                                                     are purged when their num
                                                                                     reaches 'max'


____________________________________________________________ EXAMPLES
_____________________________ 1

[ec2-user@mesos-slave1-bulk:~]$   cat getzeropages.js
use restore_10
DBQuery.shellBatchSize = 1000
db.getCollection('dynamo').find({"Pages.s":"0"},{_id:1,"DocumentID.s":1,"CompanyNumber.s":1,"CreatedAt.s":1,"Barcode.s":1,"OriginalID.s":1,"Pages.s":1,"Category.s":1})
[ec2-user@mesos-slave1-bulk:~]$   mongo --norc mongo-db1-bulk.live.aws.internal < getzeropages.js
MongoDB shell version v4.0.10
connecting to: mongodb://mongo-db1-bulk.live.aws.internal:27017/test?gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("5ab547c4-e114-44e1-a8e7-f93ae1325f98") }
MongoDB server version: 3.6.13
WARNING: shell and server versions do not match
switched to db restore_10
1000
{ "_id" : ObjectId("5ec55e3b21713a93da6fe646"), "Pages" : { "s" : "0" }, "Category" : { "s" : "accounts" }, "CompanyNumber" : { "s" : "00029846" }, "OriginalID" : { "s" : "CHIPS:58503702" }, "Barcode" : { "s" : "A0G31CSY" }, "CreatedAt" : { "s" : "\"2015-02-01T00:42:06.947280554Z\"" }, "DocumentID" : { "s" : "4UtTkyAsZryuw5omRyya_s0rB7MnmgM_m0CphNyTCAc" } }
{ "_id" : ObjectId("5ec5958721713a93da381bd8"), "Pages" : { "s" : "0" }, "Category" : { "s" : "accounts" }, "CompanyNumber" : { "s" : "FC005158" }, "OriginalID" : { "s" : "CHIPS:188478704" }, "Barcode" : { "s" : "A0LSKUMN" }, "CreatedAt" : { "s" : "\"2015-01-31T18:12:23.568028492Z\"" }, "DocumentID" : { "s" : "EzGIqKuG9w3lmsTsj4GqUWm0IC3laFgfl8waCbQwUdg" } }
{ "_id" : ObjectId("5ec59c7621713a93da3baf3b"), "Pages" : { "s" : "0" }, "Category" : { "s" : "accounts" }, "CompanyNumber" : { "s" : "08687223" }, "OriginalID" : { "s" : "CHIPS:3101460374" }, "Barcode" : { "s" : "A397RU6R" }, "CreatedAt" : { "s" : "\"2015-01-31T22:20:24.030832223Z\"" }, "DocumentID" : { "s" : "JK1b4KBvDLJBU6_618fUN-ol-x0B-dUJLvC8FGWB5mQ" } }
bye
[ec2-user@mesos-slave1-bulk:~]$
_____________________________ 1

   mongoexport --host mongo-db1-bulk.live.aws.internal -d restore_10 -c dynamo -f _id,Pages,Category --query '{"_id" : ObjectId("5ec55cef21713a93da12621f")}' --type=csv --out testfile.txt
   mongoexport --host localhost:27017 -d restore_10 -c dynamo -f _id,Pages,Category --query '{"_id" : ObjectId("5ec55cef21713a93da12621f")}' --type=csv --out testfile.txt
   mongoexport --host mongo-db1-bulk.live.aws.internal -d restore_10 -c dynamo -f _id,Pages,Category --query '{"_id" : ObjectId("5ec55cef21713a93da12621f")}' --type=csv --out testfile.txt
   mongoexport --host mongo-db1-bulk.live.aws.internal -d restore_10 -c dynamo  --query '{"_id" : ObjectId("5ec55cef21713a93da12621f")}' --type=csv --out testfile.txt
   mongoexport --host mongo-db1-bulk.live.aws.internal -d restore_10 -c dynamo -f _id,Pages.s,Category.s,CompanyNumber.s,OriginalID.s,Barcode.s,CreatedAt.s,DocumentID.s --query '{"_id" : ObjectId("5ec55cef21713a93da12621f")}' --type=csv --out testfile.txt
   mongoexport --host mongo-db1-bulk.live.aws.internal -d restore_10 -c dynamo -f _id,Pages.s,Category.s,CompanyNumber.s,OriginalID.s,Barcode.s,CreatedAt.s,DocumentID.s --query '{"Pages.s":"0"}' --type=csv --out zeropages.txt
   mongoexport --host mongo-db1-bulk.live.aws.internal -d restore_10 -c dynamo -f '_id,Pages.s,Category.s,CompanyNumber.s,OriginalID.s,Barcode.s,CreatedAt.s,DocumentID.s' --query '{"Pages.s":"0"}' --type=csv --out zeropages.txt


--------------------------- AGGREGATE

    {
        "_id" : "abcb32d5-62e6-45cf-a3b2-61e37f5c1d2c",
        "created_at" : ISODate("2020-10-08T07:33:40.243Z"),
        "data" : {
            "kind" : "psc_discrepancy#psc_discrepancy_report",
            "etag" : "e971f234872445334034d16fedc8c97d1a9c2c78",
            "psc_name" : "Shorif Uddin",
            "psc_date_of_birth" : "03/1989",
            "details" : "Barclays Bank - Greenline",
            "links" : {
                "self" : "/psc-discrepancy-reports/c3636428-aad2-4303-95a2-aead490e7f4e/discrepancies/abcb32d5-62e6-45cf-a3b2-61e37f5c1d2c",
                "psc-discrepancy-report" : "/psc-discrepancy-reports/c3636428-aad2-4303-95a2-aead490e7f4e"
            }
        }
    }


   .======================================
   |  db.getCollection('psc_discrepancies').aggregate( [                 db.getCollection('queue').aggregate([{
   |    {                                                                     $group: {_id: "$data.officer_id", count: { $sum: 1 }}
   |      $group: {_id: {name:"$data.psc_name"}, count: { $sum: 1 } }       }],{"allowDiskUse":true})
   |    }                                                                      ^^^^^^^^^^^^^^^^^^^^^
   |  ])                                                                        to use temp files for results > 100 MB
   |           use RAM up to 100 MB limit
   '======================================



   will give

   {
    "_id" : {
        "name" : "Mr Markhan Singh Johal"
    },
    "count" : 1.0
    }
    /* 2 */
    {
        "_id" : {
            "name" : "Mr Manpreet Singh Kohli"
        },
        "count" : 1.0
    }
    /* 3 */
    {
        "_id" : {
            "name" : "PSC missing"
        },
        "count" : 22.0
    }
   .======================================
   |  db.getCollection('psc_discrepancies').aggregate( [
   |  {
   |    $group: {_id: "$data.etag",
   |             etag: { $first: "$created_at" }
   |        }
   |  } ])
   '======================================
   will give

    {
        "_id" : "309b363b4660532e6509c20971f81896672581ee",
        "etag" : ISODate("2021-06-01T16:50:26.372Z")
    }
    /* 2 */
    {
        "_id" : "4db2c54c62d6225e555b85af97ede3545db64142",
        "etag" : ISODate("2021-05-28T09:16:34.882Z")
    }
    /* 3 */
    {
        "_id" : "e971f234872445334034d16fedc8c97d1a9c2c78",
        "etag" : ISODate("2020-10-08T07:33:40.243Z")
    }
