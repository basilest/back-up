In contrast to RELATIONAL DATABASES (and their notion of "Relation", i.e., a tuple (or row)
of related strong-typed data) there are NoSQL databases:
                           NoSQL DB
                                |
                           key-value store DB
                                |
                           Full text DB    One of the earliest systems was IBM STAIRS,
                                |          introduced in 1973.
                                |          Full text databases became common about 1990 when
                                |          computer storage technology made them economic and
                                |          technological possible.
                                |
                           document-store DB
                                |
                           XML databases DB

key-value store:  the data (called the 'value') is considered to be inherently OPAQUE to the database.

a subclass:  document-oriented database: data (called the 'document') are not opaque,
                                          but their internal structure is known and the engine
                                          relies in order to extract metadata

a subclass:  XML databases  (as well as YAML, JSON, and BSON)
               JSON is widely used in online programming for interactive web pages and mobile app.

smometimes used a mapping : Some  doc-based DBs allow documents to be mapped
                            onto a more suitable format using a schema language such as
                            DTD, XSD, Relax NG, or Schematron.

similar:             Documents inside a document-oriented database are similar

key:                 Documents may be addressed in the database via a unique key that is often
                     a simple string, a URI, or a path.
simple doc-based DB: only provide to retrieve an opaque doc from its key
modern doc-based DB: provide far more, because they extract and index all kinds of metadata,
                     Such DBs offer a query language that allows the user to retrieve doc based on their content.
                     (ex. all doc with DATE in some range)

advantage:           docs can change in type and form at any time.
                     If one wishes to add a COUNTRY_FLAG to a CONTACT,
                     simply add this field to new documents as they are inserted,
                     this will have no effect on the DB or the docs already stored.
                     This indicates an advantage of the document-based model

advantage:           Because optional values are not represented by placeholders as in most RDBs,
                     key-value stores often use far less memory to store the same database,
                     which can lead to large performance gains in certain workloads.


sharding             A type of Horizontal partitioning. Rows of a table are held separately,
                     rather than being split into columns (which is what normalization and
                     vertical partitioning do). Each partition forms part of a shard,
                     which may in turn be located on a separate DB server or physical location.

                     sharding splits large partitionable tables across the servers,
                     while smaller tables are replicated as complete units.

Load balancing       MongoDB scales horizontally using sharding.
                     The user chooses a shard key, which determines how the data in a
                     The user chooses a shard key, which determines how the data in a
                     collection will be distributed. The data is split into ranges
                     (based on the shard key) and distributed across multiple shards.
                     (A shard is a master with one or more slaves.)
                     MongoDB can run over multiple servers, balancing the load and/or
                     duplicating data to keep the system up and running in case of
                     hardware failure. Automatic configuration is easy to deploy,
                     and new machines can be added to a running database.

JSON / BSON:         Internally MongoDB uses a binary serialized JSON format called BSON.
                     Externally, this means that we use JSON a lot.

the terms: MongoDB is made up of databases which contain collections. A collection
                     is made up of documents. Each document is made up of fields.
                     Collections can be indexed, which improves lookup and sorting performance.
                     Finally, when we get data from MongoDB we do so through a
                     cursor whose actual execution is delayed until necessary.

collections          are like tables, anyhow they are schema-less (while tables are strongly typed)
documents            are like row:Notice that, in addition to the data you specified, there’s an
field.               Every document must have a unique _id field. If not specified, MongoDB
                     generates a value (type ObjectId)
                     By default, the _id field is indexed (internal collection: system.indexes)
                     ex. _id assigned explicitally:
                     db.employees.insert({_id: ObjectId(
                                           "4d85c7039ab0fd70a117d730"),
                                            name: 'Leto'})

doc size 16MB        individual document is currently limited to 16 megabytes in size.

mongod:              the server
mongo:               the (javascript) shell
mongodb.config       insert this string:
                     dbpath=PATH_TO_WHERE_YOU_WANT_TO_STORE_YOUR_DATABASE_FILES ex:
                     dbpath=c:\mongodb\data  on Linux  dbpath=/var/lib/mongodb/data
--config             so now run as:
                     c:\ mongodb\bin\mongod --config c:\mongodb\bin\mongodb.config


mongo shell         most used commands:
                    (omitting the ending () show the javascript function() implementation
                    for that cmd

                    db.version()
                    db.help()
                    db.stats()
                    db.getCollectionNames()

                    db.COLLECTION_NAME()  ex: db.unicorns.help()    db.unicorns.count()
                    system.indexes        this collection is created once per database and
                                          contains the information on our database’s indexes


                    use learn
                    db.unicorns.insert({ name: 'Aurora', gender: 'f', weight: 450})  /* JSON */
                    db.unicorns.find()
                    db.system.indexes.find()
                    db.unicorns.remove ({})          remove any docs

find()   remove()   count()    both these 3 cmd, use selectors:
                    Query Selectors  (like the 'where'  in normal SQL query) are:

                    $lt   $lte   $gt   $gte  $ne

                    db.unicorns.find ({ gender: 'm', weight: {$gt: 700}})
                    db.unicorns.find ({ gender: {$ne: 'f'}, weight: {$gte: 701}})



                    $exist  $in

                    db.unicorns.find ({ vampires: {$exists: false }})   to test presence of a field
                    db.unicorns.find ({ loves: {$in :['apple', 'orange']}})



                    $or

                    db.unicorns.find ({gender: 'f', $or: [{loves: 'apple'}, {weight: {$lt: 500}}]})



                    _id

                    db.unicorns.find ({ _id: ObjectId( "TheObjectId ")})

update() / set()    db.unicorns.update ({name: 'Roooooodles'}, {weight: 590})   MAYBE NOT!!! as replace
                                                                                ALL the doc with a new doc only
                                                                                a only {weight: 590}
                    db.unicorns.update ({name: 'Roooooodles'}, {$set: {weight: 590}})  MAYBE YES!!!


                    $inc   $push

                    db.unicorns.update ({name: 'Pilot' },  {$inc:  {vampires: -2}})
                    db.unicorns.update ({name: 'Aurora' }, {$push: {loves: 'sugar'}})  add a value to
                                                                                       a field (here 'loves')
                                                                                       already present.


                    $Upserts

                    An upsert updates the document if found or inserts it if not.
                    db.hits.update ({page: 'unicorns'}, {$inc: {hits: 1}}, {upsert: true});



                    Multiple Updates

                    db.unicorns.update({}, {$set: {vaccinated: true}}, {multi: true});



more on find()      find turns a' cursor' whose execution is delayed until needed.
                    In the shell find is executed immediately. This is a behavior of the shell only.
                    find takes a second optional parameter called “projection”. This
                    parameter is the list of fields we want to retrieve or exclude.
                    db.unicorns.find({}, {name: 1});          turns only field name
                    db.unicorns.find({}, {name:1, _id: 0};    avoid turning _id
                                                              (By default, _id field is always returned)

                    order:  1 for ascending and -1 for descending.
                           db.unicorns.find().sort({weight: -1})
                           db.unicorns.find().sort({name: 1, vampires: -1})

                           nb. MongoDB limits the size of your sort without an index.
                           That is, if you try to sort a very large
                           result set which can’t use an index, you’ll get an error

                           Using 'limit' in conjunction with sort , can be a way
                           to avoid running into problems when sorting on non-indexed field

                    limit / skip:  ex. get the 2nd and 3rd heaviest unicorn:
                           db.unicorns.find().sort({weight: -1}).limit(2).skip(1)

                    count:
                           db.unicorns.find({vampires: {$gt: 50}}).count()

                           the count is a cursor method (so as above find() . count )
                           On the shell there is a shortcut
                                         db.unicorns.count({vampires: {$gt: 50}})
                           that make it seems as a method of a collection,
                           but it's only a shell shortcut, it's still remain a cursor method.

____________________________________________________________ NO JOIN

    Definition: A foreign key is 1 column (1 or more) in a table that matches
    the primary key column of another table.
    The foreign key can be used to cross-reference tables.

    A JOIN is a table built with cols coming from more tables.

    there are no Joins in MongoDB. The approach to overcome this can be for ex
    to store the data of another table as 'embeded' doc of the 1st table.
    ex:
        db.employees.insert({_id: ObjectId(
        "4d85c7039ab0fd70a117d734"),
        name: 'Ghanima',
        family: {mother: 'Chani',
        father: 'Paul',
        brother: ObjectId(
        "4d85c7039ab0fd70a117d730")}})


        embedded documents can be queried using a '.' (dot-notation)
        db.employees.find({'family.mother': 'Chani'})
                                  ^
____________________________________________________________ OTHER FATRURE

capped:                  db.createCollection('logs', {capped: true, size: 1048576})  when the collection reaches
                                                        ^            ^               1MB  (1048576) old docs are
                                                                                     purged. Instead of 'size'
                                                                                     I can use 'max' and old docs
                                                                                     are purged when their num
                                                                                     reaches 'max'


