YUM          . utility to manage packages in Linux systems

             . written in Python

             . ~ 2003: written at the  Duke University Department of Physics
               to replace YUP (the package manager of a Linux distribution: Yellow Dog Linux)

             . The meaning it's so Yellowdog Updater, Modified

             . 2007: was considered "the tool of choice" for RPM-based Linux
               Yellow Dog Linux itself, replaced its original YUP

             . based on RPM

             . Can be extended with other Python plugins (especially "yum-utils")

             . Can be extended with GUI front-ends (mainly "Yum Extender")


    METADATA     . metadata is the Information about packages
                   metadata are combined with information inside each package
                   to determine (and resolve, if possible) dependencies among the packages.


    createrepo   . the tool to create the repository of metadata
                   in XML (or SQLite with option -d )

    mrepo        . another tool (previously known as Yam)
                   to create & manage repo

DNF          . DNF is a rewrite of YUM based on the gitHub project "libsolv" to find
               the package dependencies.


_______________________________________ ANSIBLE


_________________________ ( 6- Config. Manag)   ANSIBLE  (1.9)

        Ansible is a free SW platform for configuring and managing computers (nodes)
        over SSH or PowerShell and requires Python (2.4 or later) to be installed on them.


                     Ansible                           Python > 2.6
                     -------     ------------------->  -----------
                    (client)                           TARGET HOSTS


        Actually now it requires Python 2.6
        The logic of ansible is to 'inject' Python modules
        into the remote HOST via the SSH channel.
        Thus, the only requirement is to have Python in there.
        If Python is < 2.6 most of the modules executed will give the error on "AnsiballZ_command.py":

            "module_stdout": "  File \"/home/ewfltest/.ansible/tmp/ansible-tmp-1559722022.568987-202165508282610/AnsiballZ_command.py\", line 40\r\n
                                with open(module, 'wb') as f:\r\n            ^\r\nSyntaxError: invalid syntax\r\n",
            "msg": "MODULE FAILURE\nSee stdout/stderr for the exact error",


        If Python is not present ?
        I can install it with the 'raw' module.

              hosts: development
              become: yes
              gather_facts: no   <---- turn off the gathering facts (which relies already on Python and its cote modules)
              pre_tasks:         <---- not only 'tasks' because it must be executed before any tasks (*1)
              - name: 'install python'
                raw: 'sudo apt-get -y install python'


                 (*1)   The pre_task is even more important because if I use Ansible roles
                        any tasks defined in the role will be executed first before Ansible examines
                        the tasks in the playbook.

                 (*2)   The above playbook is not idempotent so better to keep it separate
                        as a one-only playbook.

        __________________________ simple example: perform "ls -lrt > aaa.txt"
                                   on a group of hosts
                                   where I specify user and password to ssh
                                           . no default behaviour is used (ssh key)
                                             but user/password :
                                                  user : passed on the command
                                           .
                __________________

                   I N V E N T O R Y                        P L A Y B O O K

                  1 [mailleg]                            1 ---
                  2 ws-mail1.orctel.internal             2
                  3 ws-mail2.orctel.internal             3 - hosts: mailleg
                  4                                      4   become: false
                  5 [preprod]                            5   gather_facts: no
                  6 wswebtest2.orctel.internal           6
                  7        ^                             7   tasks:
                           |                             8   - name: ls files
                        (hosts)  (preprod.yml) --------> 9     shell: ls -lrt > aaa.txt
                           |                |           10     args:
                           .                .           11       executable: /bin/bash
                            \___________     \_________________________________
                                         \                                     \
                ansible-playbook  -vvv -i hosts -b -c paramiko -u webapps  -k preprod.yml
        __________________________
        Modules work over JSON and standard output and can be written in any programming language.

        The system uses YAML to express reusable descriptions of systems.

        It is included as part of the Fedora distribution of Linux, owned by Red Hat inc.,
        and is also available for Red Hat Enterprise Linux, CentOS, and
        Scientific Linux via Extra Packages for Enterprise Linux (EPEL)
        as well as other operating systems.

        Ansible is commercially supported and sponsored by Ansible, Inc.
        On 16 October, 2015, Red Hat Inc. announced that it had signed a definitive agreement to acquire Ansible, Inc.

        It was named "Ansible" after the fictional instantaneous hyperspace communication system featured in Orson Scott Card's Ender's Game,
        and originally invented by Ursula K. Le Guin for her 1966 novel Rocannon's World.


         . is a configuration management and provisioning tool, similar to Chef, Puppet or Salt

         . is "just SSH"; It uses SSH to connect to servers and run the configured TASKS
           If I'm running Ansible as user vagrant, it will attempt to connect as user vagrant.

         . -u  ( --user)      specify user
         . -k  ( --ask-pass)  ask for a password rather than use key-based authentication:
                              ansible all -m ping -k         -u     stef
                              ansible all -m ping --ask-pass --user stef

         . is "agentless" - no central agent(s) is running.

         . the output from Ansible commands is JSON

         . ansible comes with a list of executables: ie.

                                 ansible
                                 ansible-config
                                 ansible-connection
                                 ansible-console
                                 ansible-doc
                                 ansible-galaxy     to reuse roles from community (ansible-galaxy list: Show currently installed roles.)
                                 ansible-inventory
                                 ansible-mesos/
                                 ansible-playbook
                                 ansible-pull
                                 ansible-vault   <----  to encrypt passwords



ansible $groupname -i $inventory -m $module -a '$module_arguments'
          |              |              |            |
          |              |              |            |_____________  the arguments you'd normally pass to a task ( ex 'name=foo state=restarted')
          |              |              |__________________________  one of the standard Ansible modules (ex 'service', 'command') (without -m the default is 'command')
          |              |_________________________________________  an inventory file (as used by a playbook)
          |________________________________________________________  a group in the inventory

    (the -s flag runs via sudo):

    ansible all        -i production/hosts -m yum      -s -a "name=* state=latest"                  # upgrade all packages on all production servers
    ansible all        -i preprod/hosts    -m wait_for    -a 'host=logserver port=1337 timeout=5'   # check that all preprod hosts can connect to 'logserver' on port 1337
    ansible webservers -i hopefullynotproduction/hosts -s -a 'reboot'                               # using default module 'command'

    ansible-playbook install.yml --syntax-check           like a Make dry-run
    ansible-playbook install.yml --list-hosts             to see the hosts affected
    ansible-doc -l
    ansible-doc yum


    . The blocks are:
    _______________________________
      YAML     . Inventory:         a file with the list of servers to work on    (-i or --inventory)   ansible-playbook  -i hosts  preprod.yml
                 INVENTORY FILES      are used to group servers,
                                      to then identify all that group with its name.
                                       n.b. playbooks refer ro group-names, which means the commands
                                            will be executed on ALL ! the servers at once.

                                       ex:
                                            [zookeepers]          <-- this is the name of the group
                                             zk1
                                             zk2
                                             zk3

                                            [webservers]          <-- group name
                                             apache1
                                             apache2

                                            [databases]           <-- group name
                                              db1

    _______________________________
      YAML     . Playbooks/Roles:  the files (like makefiles) with the things to do
               PLAYBOOK FILES       the 'makefiles', (written in YAML):
                     the structure is:

                          - hosts: xxxx     <--- I use one of the group name (taken from the INVENTORY list)
                            roles: yyyy
                            tasks: zzzz
                                 - name: nnnnn nn nn
                                   notify: hhhh hh hh          <-- the name of the handler I want to trigger
                                   mmmm: aaa=vv aaa=vv aaa=vv  <-- the name of the module and its args
                            handlers:                          <-- handlers are executed only if some 'task' calls them explicitly with a 'notify'
                                 - name: hhhh hh hh                and ire executed only once even if more tasks call them
                                   mmmm: aaa=vv aaa=vv aaa=vv  <-- the name of the module and its args
                     ________________________ ex:
                          ---
                          - hosts: all
                            vars:                              <-- I can define some var (ex docroot)
                                 - docroot: /var/www/serversforhackers.com/public
                            roles:
                                 - timezone
                                 - logagent
                                 - proxyworkaround

                          - hosts: backends
                            roles:
                                 - foo

                          - hosts: webservers
                            roles:
                                 - apache
                                 - tomcat

                          - hosts: databases
                            roles:
                                 - mysql

                     They are executed by the cmd: ansible-playbook         <------ NB

                              > ansible-playbook -i some_inventory  xxxxx.yml

                              same options (-k -u -s applies:)
                              > ansible-playbook -s -k -u vagrant nginx.yml

                                -v[vvv]    verbose                                   |
                                -C         dry run  (CHECK mode only, no changes)    | so usually I run > ansible-playbook -vCD
                                -D         diff changed files                        |


    _______________________________
      PYTHON   . Modules:          the set of commands that Ansible can perform (ex. copy, setup or whatever)
      (usually)                    are provided as a library of modules, so that each time a modules is chosen
                                   and called (like a script)

                         . Modules are  I D E M P O T E N T :
                           it's safe to run over and over again.
                         MODULES:  (to see the installed ones: ansible-doc -l)  <---- I have 2080
                                    the most used modules are:

                           command: is the default module, (which means these are the same:
                                                                 ansible my_host_group -a "ls -l"             (implicit)
                                                                 ansible my_host_group -m command -a "ls -l"  (explicit)
                                                                 )
                                    It can execute any 'binary' present onto the remote
                                    but cannot use shell features (pipe / redirection / env vars)
                                    because it doesn't pass trough the shell.

                           shell:   Performs shell commands (with all the features:  |  >  <   $HOME ...)
                                    The default shell is considered
                                                        /bin/sh
                                    (but I can use the shell of my choice:

                                    _________________________________________________________
                                   |shell: ls -lrt > temp.txt
                                   |args:
                                   |  chdir: /root/ansible/shell_chdir_example
                                   |  executable: /bin/bash                               <---- bash specified in the playbook
                                   |
                                   |_________________________________________________________
                                   |ansible -m shell -a "/bin/bash | ls -lrt > temp.txt"  <---- bash specified on the command line
                                   |_________________________________________________________


                                    ansible all -s -m shell -a '/apt-get install nginx'
                                    ansible all -s -m shell -a 'apt-get install nginx'



                           setup:   to gather information from all the servers:
                                    ansible jmaster -i vagrant/ -m setup           this will retrieve tons of data (ex. kernel version,
                                                                                   architecture, all interfaces, ip address, subnet masks,
                                                                                   disk mounts, free space, ...)

                                    ansible jmaster -i vagrant/ -m setup -a 'filter=*mb*'    # arg to grep out only something


                           service:   to start / stop services
                                    Usually it's something like:
                                       service: name=nginx state=started    <---- the "state" is the important arg:
                                                                                  it is  the state you wish the service to be in,
                                                                                  You do not define the 'change' you want.
                                                                                  Ansible will decide if a change is needed.


    _______________________________


ROLES:    Instead of having a single big 'makefile' (or Playbook) usually the sections are moved into
          separate makefiles (named all "main.yml") in specific subdirs.
          These smaller makefiles are called "Roles".
          (Ansible will search for them automatically if in the ansible config file (ex /etc/ansible/ansible.cfg)
           there is a link to where the role-dir is located:
              /etc/ansible/ansible.cfg:

                      roles_path    = /vagrant/ansible/roles     <--- this is supposed to be the role-dir so
                                                                      a role "xxxx" will be a file /vagrant/ansible/roles/xxxx
          ).


          rolename                            ./
           - files                             |_   files                    "files" dir should be used to copy/download files (so here usually there is no "main.yml" file)
           - handlers                          |_   handlers / main.yml      "handlers" dir should be used to move into a "main.yml" the handler section of the big makefile
           - meta          --is suppsed this ->|_   meta / main.yml          "meta"           "                 "             "      meta info (mainly the "depencencies" section)
           - templates                         |_   templates                "templates" dir (like "files") contains no "main.yml" but stores .j2 files
           - tasks                             |_   tasks / main.yml         "tasks" dir should contain the core section of the big makefile
           - vars                              |_   vars / main.yml          "vars" should contain the var section

       __________________
            dependencies:               <--- to make the role dependent on role xxxx
                - { role: xxxxx }
       __________________



TEMPLATES:  Are files with any name but normally xxxx.j2
          (based on Python's Jinja template engine:
           {% if %}
           ({% for %},
           ...
           and filters that process variables
           (e.g.{{ "hello"|upper }}
           would print HELLO.


FACTS:    "Fact" is the Ansible-word to identify the act of gathering info
          so that what to do becomes clear. (Like make that builds according to files timetamps)

VAULTs:   They are the solution to store sensible info (like passwords) ant make them accessible to Ansible.
          To create/edit/... them use the command: ansible-vault

                  Usage: ansible-vault [create|decrypt|edit|encrypt|rekey] \
                        [--help] [options] file_name

                  ex:
                     1.  vi my_passwords.txt
                     2.  ansible-vault encrypt group_vars/vars.yml --vault-password-file my_passwords.txt
                     3.  ansible-vault decrypt group_vars/vars.yml --vault-password-file my_passwords.txt


become: false

_______________________________________ EXAMPLES

    [preprod]                                                    ---
    wswebtest2.orctel.internal                                   - hosts: preprod
                                                                   tasks:
                                                                   - name: ls files
        (hosts) file                (preprod.yml) file ---->         command: /bin/ls


    ansible-playbook -i hosts --extra-vars "ansible_user=ewfltest anisble_password=b4b00np1g" preprod.yml
                        ^^^^^                                                                 ^^^^^^^^^^^
    __________________

    export ANSIBLE_HOST_KEY_CHECKING=false
    ansible-playbook -i hosts --extra-vars "ansible_user=ewfltest" --ask-pass preprod.yml_
    __________________

    export ANSIBLE_HOST_KEY_CHECKING=false
    ansible-playbook -i hosts --user ewfltest --ask-pass preprod.yml_
                              ^^^^^^^^^^^^^^^
