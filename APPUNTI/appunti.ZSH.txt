man zsh               <--- short (~   280 lines, because the manual has been split in many different)
man zshall            <--- LONG  (~ 23000 lines, it contains all)
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zsh.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshall.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshbuiltins.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshcalsys.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshcompctl.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshcompsys.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshcompwid.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshcontrib.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshexpn.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshmisc.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshmodules.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshoptions.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshparam.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshroadmap.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshtcpsys.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshzftpsys.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/man/man1/zshzle.1
                                                                  /usr/local/Cellar/zsh/5.4.2_1/share/zsh/functions/_a2ps

 Table of Contents                                                 |
                                                                   |
 Chapter 1: A short introduction                                   |
                                                                   |
 1.1: Other shells and other guides                                |
 1.2: Versions of zsh                                              |
 1.3: Conventions                                                  |
 1.4: Acknowledgments                                              |
                                                                   | print hello  <--- 'print' like 'echo' in bash (zsh has both print & echo)
                                                                   |
                                                                   | version:  3.xx <-- is the pre-stable version
                                                                   |           4.xx <-- is the stable version   (in 2017 we are at 5.3.1)
                                                                   |           use zsh --version  or echo $ZSH_VERSION
                                                                   |
                                                                   | completion:  in 3.xx use the old  `compctl' command,
                                                                   |              since 4.xx use new way
                                                                   |
 Chapter 2: What to put in your startup files                      |
                                                                   |
 2.1: Types of shell: interactive and login shells                 |
                                                                   |  interactive: a shell reading command from input terminal
                                                                   |  non-interactive: a shell reading commands from a file (script) ex: zsh filename
                                                                   |
                                                                   |         % zsh filename
                                                                   |         |  |___ this is a non-interactive shell (ZB)
                                                                   |         |
                                                                   |        this is an interactive shell (ZA)
                                                                   |        inside which ZB is started
                                                                   |                                       ZA & ZB are 2 different copies of zsh
                                                                   |
                                                                   |        % zsh      <--- in this case ZA & ZB are both interactive
                                                                   |
                                                                   |  login-shell:      To distinguish which was the first shell ever (called login shell)
                                                                   |                    its name is marked with a `-` in front.
                                                                   |                    I can start other login shell (that think they are the first ever)
                                                                   |                    with option -l:  zsh -l
                                                                   |                    The main differentces are:
                                                                   |                                - a login shell reads some start-up files, instead of others
                                                                   |                                - any shell is terminated with 'exit'
                                                                   |                                - login shell can also be terminated with 'logout'
                                                                   |                                  that is actually an exit that returns  `not login shell'
                                                                   |                                  when executed in a not-login shell
                                                                   |
                                                                   |  $SHLVL           is 1 for first login shell, and is incremented each time I create another child zsh
                                                                   |                   (it gives me an idea of how much is nested my current shell)
                                                                   |
                                                                   |
 2.1.1: What is a login shell? Simple tests                        |
                                                                   |     if [[ -o login ]]; then      <--- [[ -o ... ]]  tests shell options (here option 'login')
                                                                   |        print yes
                                                                   |      else
                                                                   |        print no
                                                                   |      fi
                                                                   |
                                                                   |      [  or test    <--- as in bash, they are the old sh way
                                                                   |                         - it fails in tests like [ $var = foo ] if $var is null
                                                                   |                         - uses -a -o for boolean expressions
                                                                   |      [[ ]]         <--- was written to be smarter:
                                                                   |                         - it doesn't fail in $var = foo test if $var is empty
                                                                   |                         - allows the usage of &&  ||
                                                                   |
 2.2: All the startup files                                        |
                                                                   |   ~/.login         <--- historical LOGIN-csh
                                                                   |   /etc/profile     <--- historical LOGIN-bourne-sh
                                                                   |
                                                                   |            zsh keeps them as zprofile / zlogin
                                                                   |            they are not intended to be used together, although this could certainly be done if desired.
                                                                   |                     ____________________________________________________________________
                                                                   |                        login shells     interactive shells.
                                                                   |                     ____________________________________________________________________
                                                                   | 1  /etc/zshenv             .................. run for every zsh (if options RCS=1  / or NO_RCS=  --> no run)
                                                                   | 2    ~/.zshenv             .................. run for every zsh   "         "          "          "        )
                                                                   |
                                                                   | 3  /etc/zprofile             X
                                                                   | 4    ~/.zprofile             X
                                                                   |
                                                                   | 5  /etc/zshrc                          X
                                                                   | 6    ~/.zshrc                          X    <--- the most candidate to be customized
                                                                   |
                                                                   | 7  /etc/zlogin               X
                                                                   | 8    ~/.zlogin               X
                                                                   |
                                                                   |                     $ZDOTDIR = dot files '.xxxx' must be put in the dir specified in $ZDOTDIR
                                                                   |                                that is usually set to null (and home dir ~ is then considered)
                                                                   |
                                                                   |
                                                                   |          zsh  -f      runs only  1    (so /etc/zshenv should be left as small as possible, to have a way lo load nothing)
                                                                   |                                        or otherwise wrap some  code in /etc/zshenv inside something like:
                                                                   |                                                                 if [[ ! -o norcs ]]; then
                                                                   |                                        so that the wrapped code can be skipped running a zsh with the option NO_RCS=  (empty)
                                                                   |
                                                                   |
                                                                   |         so when starting a zsh the journey of the script to run is:
                                                                   |
                                                                   |            login shell (inter):        1 2 3 4 5 6 7 8
                                                                   |            login shell (not inter):    1 2 3 4     7 8
                                                                   |            not login   (inter):        1 2     5 6
                                                                   |            not login   (not inter):    1 2     5 6
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
 2.3: Options                                                      |
                                                                   | . 1/0          : they all have boolean values only (set / not set)
                                                                   | . U u _        : uppercase/lowercase/underscore can be mixed in any way, but
                                                                   |                  the option is always the same: NO_RCS  = norcs = __N_o_R_c_s__
                                                                   | . no           : for any option xxxx there is the option noxxxx
                                                                   |                  so I can write if [[ ! -o noxxx]]     or if [[ -o xxx ]]
                                                                   |                              (or even ! -o _N_o_x_Xx ....)
                                                                   |
                                                                   | . set / unset :  setopt   or   set -o     is the same way to set an option   (ex   setopt NO_RCS     set -o NO_RCS)
                                                                   |                  unsetopt                 is the only way to unset an option (ex unsetopt NO_RCS)
                                                                   |
                                                                   | . as in bash set -o   to view all:
                                                                   |
                 1   noaliases             off  nocaseglob            off  errreturn             off  histignorealldups     off  nolistambiguous       off  pathdirs              off  norcs                 off   xtrace  off
                 2   allexport             off  nocasematch           off  noevallineno          off  histignoredups        off  nolistbeep            off  pathscript            off  recexact              off   zle     on
                 3   noalwayslastprompt    off  cbases                off  noexec                off  histignorespace       off  listpacked            off  pipefail              off  rematchpcre           off
                 4   alwaystoend           off  cdablevars            off  extendedglob          on   histlexwords          off  listrowsfirst         off  posixaliases          off  restricted            off
                 5   appendcreate          off  chasedots             off  extendedhistory       off  histnofunctions       off  nolisttypes           off  posixargzero          off  rmstarsilent          off
                 6   noappendhistory       off  chaselinks            off  noflowcontrol         off  histnostore           off  localloops            off  posixbuiltins         off  rmstarwait            off
                 7   autocd                off  nocheckjobs           off  forcefloat            off  histreduceblanks      off  localoptions          off  posixcd               off  sharehistory          off
                 8   autocontinue          off  noclobber             off  nofunctionargzero     off  nohistsavebycopy      off  localpatterns         off  posixidentifiers      off  shfileexpansion       off
                 9   noautolist            off  combiningchars        off  noglob                off  histsavenodups        off  localtraps            off  posixjobs             off  shglob                off
                10   noautomenu            off  completealiases       off  noglobalexport        off  histsubstpattern      off  login                 on   posixstrings          off  shinstdin             on
                11   autonamedirs          off  completeinword        off  noglobalrcs           off  histverify            off  longlistjobs          off  posixtraps            off  shnullcmd             off
                12   noautoparamkeys       off  continueonerror       off  globassign            off  nohup                 off  magicequalsubst       off  printeightbit         off  shoptionletters       off
                13   noautoparamslash      off  correct               off  globcomplete          off  ignorebraces          off  mailwarning           off  printexitvalue        off  noshortloops          off
                14   autopushd             off  correctall            off  globdots              off  ignoreclosebraces     off  markdirs              off  privileged            off  shwordsplit           off
                15   noautoremoveslash     off  cprecedences          off  globstarshort         off  ignoreeof             off  menucomplete          off  promptbang            off  singlecommand         off
                16   autoresume            off  cshjunkiehistory      off  globsubst             off  incappendhistory      off  monitor               on   nopromptcr            off  singlelinezle         off
                17   nobadpattern          off  cshjunkieloops        off  nohashcmds            off  incappendhistorytime  off  nomultibyte           off  nopromptpercent       off  sourcetrace           off
                18   nobanghist            off  cshjunkiequotes       off  nohashdirs            off  interactive           on   nomultifuncdef        off  nopromptsp            off  sunkeyboardhack       off
                19   nobareglobqual        off  cshnullcmd            off  hashexecutablesonly   off  interactivecomments   off  nomultios             off  promptsubst           off  transientrprompt      off
                20   bashautolist          off  cshnullglob           off  nohashlistall         off  ksharrays             off  nonomatch             off  pushdignoredups       off  trapsasync            off
                21   bashrematch           off  nodebugbeforecmd      off  histallowclobber      off  kshautoload           off  nonotify              off  pushdminus            off  typesetsilent         off
                22   nobeep                off  dvorak                off  nohistbeep            off  kshglob               on   nullglob              off  pushdsilent           off  nounset               off
                23   nobgnice              off  emacs                 off  histexpiredupsfirst   off  kshoptionprint        off  numericglobsort       off  pushdtohome           off  verbose               off
                24   braceccl              off  noequals              off  histfcntllock         off  kshtypeset            off  octalzeroes           off  rcexpandparam         off  vi                    off
                25   bsdecho               off  errexit               off  histfindnodups        off  kshzerosubscript      off  overstrike            off  rcquotes              off  warncreateglobal      off

 2.4: Parameters                                                   |
                                                                   | like bash:
                                                                   |             var=value
                                                                   |             var='value with spaces / even newlines! inside single quotes'
                                                                   |             $var    <--- the usage of the var  ($ performs the 'parameter expansion' or 'parameter substitution')
                                                                   |
                                                                   |             " ... $var "   allows the param expnsion/substitution
                                                                   |             ' ... $var '   inhibits
 2.4.1: Arrays                                                     |
                                                                   |  a=(first second third fourth)      $a[1]  $a[2]  $a[3]  $a[4]    like bash {} can be optionally used to disambiguate the var name ${a[1]}
                                                                   |  b=('first element' 'second element')  <--- if there are spaces
                                                                   |
                                                                   |  zsh inherits the array logic from both ksh and csh (those two shells are not compatible)
                                                                   |
                                                                   |  option KSH_ARRAYS set array logic to ksh  : . mandatory usage of {} ex. ${a[1]}
                                                                   |                                              . arrays start from 0 --> ${a[0]}
                                                                   |
                                                                   |                           ex. set -o   ksharrays     print ${a[1]} --> second
                                                                   |                               set -o noksharrays     print ${a[1]} --> first
 2.5: What to put in your startup files                            |
                                                                   |
 2.5.1: Compatibility options: SH_WORD_SPLIT and others            |
                                                                   |________________________________________
                                                                   |     ZSH usually does not expand values of variables before their usage (while bash usually does)
                                         KSK OPTIONS -----         |________________________________________
                                                                   |  SH_WORD_SPLIT allows to have a behaviour similar to the bash (to manage spaces in var's values)
                                                                   |  zsh by default manages the value as 1, while bash splits into many:
                                                                   |
                                                                   |   ex. cat a.sh -----> echo [$1][$2][$3]
                                                                   |       a='aaa bbb ccc'
                                                                   |       bash a.sh $a    --> [aaa][bbb][ccc]
                                                                   |        zsh a.sh $a    --> [aaa bbb ccc][][]        set -o shwordsplit   --> [aaa][bbb][ccc]
                                                                   |
                                                                   |________________________________________
                                                                   |                expand globbing BEFORE var usage:
                                                                   |  GLOB_SUBST              bash:   a='*' ; echo $a <--- will expand to all the file names in the dir
                                                                   |                           zsh    a='*' ; echo $a <--- will print '*'
                                                                   |                                  set -o GLOB_SUBST   <--- zsh behaves like bash
                                                                   |                NB. usage of ""  : both bash and zsh print '*' if the var is quoted: echo "$a"
                                                                   |________________________________________
                                                                   |                expand filenames BEFORE var usage:
                                                                   |  SH_FILE_EXPANSION       ex.
                                                                   |                               ~/.zshrc  expaned to /Users/sbasile/.zshrc
                                                                   |________________________________________
                                                                   |
                                                                   |  NO_NOMATCH / NO_BAD_PATTERN
                                                                   |                           % print nosuchfile*
                                                                   |                           zsh: no matches found: nosuchfile*     <-- this error message can be disabled with set -o  NO_NOMATCH
                                                                   |                           % print [-
                                                                   |                           zsh: bad pattern: [-                   <-- this error message can be disabled with set -o  NO_BAD_PATTERN
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  NO_BG_NICE               backgroung process (ex. cmd_xxx &) do not receive a low priority (reniced to big values)
                                                                   |  NOTIFY
                                                                   |                           % sleep 3 &
                                                                   |                           [1] 40366
                                                                   |                           % print The quick brown             <--- I'm writing ....
                                                                   |                           [1]  + 40366 done       sleep 3     <--- while a bg proc terminates ...
                                                                   |                           % print The quick brown             <--- with set -o NOTIFY there is no mess up
                                                                   |                                                                    but zsh reprints my on-editing line
                                                                   |________________________________________
                                                                   |
                                                                   |  FUNCTION_ARG_ZERO        echo $0    <--- usually returns the name of the shell (ex 'zsh')
                                                                   |                                           Inside functions (ex. fn() { echo $0 })
                                                                   |                                           zsh return the function name (here 'fn')
                                                                   |                                           set -o noFUNCTION_ARG_ZERO --> return 'zsh' even inside a function
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  KSH_AUTOLOAD             instead of writing many functions in a startup file (like all in bash_profile)
                                                                   |  $fpath                   any function can be written in a file xxxx
                                                                   |                           ____________________________________________________________________________________
                                                                   |                                      zsh                                       ksh
                                                                   |                           ____________________________________________________________________________________
                                                                   |                                 # this is a simple function                xxxx() {
                                                                   |                                 print My name is $0                              # this is a simple function
                                                                   |                                                                                  print My name is $0
                                                                   |                                                                            }
                                                                   |                                      here just the body                      here a function called like the file (xxxx) + the body
                                                                   |
                                                                   |                           the functions (the files xxxx) are searched for, looking to the array $fpath
                                                                   |                           that is a usual list of dirs
                                                                   |                           In the startup file there is just 1 line to load the function:
                                                                   |                                               autoload xxxx         <--- zsh will look for xxxx and load it only the first time
                                                                   |                                                                          xxxx is entered at the command line (saving time/memory)
                                                                   |
                                                                   |                           with set -o KSH_AUTOLOAD it is set the ksh style (that anyhow zsh is able to manage even without that set)
                                                                   |________________________________________
                                                                   |
                                                                   |  LOCAL_OPTIONS            It's useful to have any options or traps that are set inside a function to set back to any previous value
                                                                   |  LOCAL_TRAPS              ex.
                                                                   |                                 fn() {                                fn() {
                                                                   |                                   setopt localoptions kshglob           setopt localoptions localtraps
                                                                   |                                   ...          ^                        trap '' INT    ^        ^
                                                                   |                                 }
                                                                   |                                 a shorthand is to write "emulate -L zsh" at the start of the function
                                                                   |                                 that does for both OPTION & TRAP
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  PROMPT_PERCENT           These 2 options must be set to have a custom prompt both with the ability to use the various % (PERCENT)
                                                                   |  PROMPT_SUBST             both with the ability to have other command substitution running in place (ex git)
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  RM_STAR_SILENT           should be always set off : it manages the rm * (RM STAR)
                                                                   |                           (so every time I delete all files in a dir, I receive a confirmation message, first)
                                                                   |                           Setting it the rm turn into silent.
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  SH_OPTION_LETTERS        turns on the ability to use 1 letter for options  (ex set -f  instead of set -o NO_RCS)
                                                                   |                           But as the letters are not standard it's better to use always the full OPTION name
                                                                   |
                                                                   |________________________________________
                                                                   |
                                         CSH OPTIONS -----         |  CSH_JUNKIE_HISTORY       .
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  CSH_JUNKIE_LOOPS         .
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  CSH_NULL_GLOB            suppose to enter `print file1* file2*' and the dir contains only file1.c.
                                                                   |                             . By default, there must be files matching both patterns, so an error is reported.
                                                                   |                             . NO_NOMATCH: any patterns which don't match are left alone, so `file1.c file2*' is printed.
                                                                   |                             . CSH_NULL_GLOB: file1* matched, so file2* is silently removed; `file1.c' is reported.
                                                                   |                               If that had not been there, an error would have been reported.
                                                                   |                             . NULL_GLOB: any patterns which don't match are removed, so again `file1.c' is printed, but in this case if
                                                                   |                               that had not been there a blank line would have been printed, with no error.
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |  CSH_JUNKIE_QUOTES        .
                                                                   |
                                                                   |________________________________________
                                                                   |
                                                                   |
                                                                   |
 2.5.2: Options for csh junkies                                    |
 2.5.3: The history mechanism: types of history                    |
                                                                   |  'events'               is the name used to mean a previous command in the history
                                                                   |
                                                                   |  1. Editing the history directly     with the arrows I move on the line and the I edit
                                                                   |                                      The editor used is retrieved in order by the 2 vars $VISUAL then $EDITOR
                                                                   |                                      (ex. set them to be both 'vi' or 'vim')
                                                                   |
                                                                   |  2. BANG '!'                         The usual (ex !!:1 last  command 1st arg .... !!:3-$   last command args from 3rd to the end)
                                                                   |                                        .NO_BANG_HIST   option to disable
                                                                   |                                        .HIST_VERIFY    option to print first what will be the command and the run with an ENTER
                                                                   |
                                                                   |            !..... :t                 tail modifier  -   like basename, returns the last part of a pathname  (ex. !-5:$:t)
                                                                   |            !..... :h                 head  "        -   like dirname,  returns the previous part
                                                                   |
                                                                   |                                      nb: they work even on vars or directly:
                                                                   |                                                   foo=/usr/bin/cat
                                                                   |                                                   print ${foo:h}          # /usr/bin
                                                                   |                                                   print $foo:h            # works even without {}
                                                                   |
                                                                   |                                                   print /usr/bin/cat(:t)  # works directly inline
                                                                   |
                                                                   |            !..... :r                 remove extension     file.c --> file
                                                                   |            !..... :l                 lowercase
                                                                   |            !..... :u                 UPPERCASE
                                                                   |            !..... :s/old/new/        subst 1st         note shortcut:    !!:s/old/new/  =  ^old^new^    or even ^old^new  if nothing must follow last ^
                                                                   |            !..... :gs/old/new/       subst globally
                                                                   |            !..... :&                 redo last s///
                                                                   |            !..... :g&                redo globally last s///
                                                                   |
                                                                   |            concatenation ok          I can concatenate many.
                                                                   |                                      ex: :t:r    dir/file.c   --> file
                                                                   |                                      ex: :h:h    /Users/sbasile/CHL/chl-perl/websystems/MODULES --> /Users/sbasile/CHL/chl-perl
                                                                   |
                                                                   |  3. fc                               it's the usual builtin
                                                                   |
 2.5.4: Setting up history                                         |
                                                                   |   $HISTFILE                          file where to save (ex. ~/.history')
                                                                   |   $HISTSIZE                          how many lines to READ  at the session start
                                                                   |   $SAVEHIST                          how many lines to WRITE at the session end
                                                                   |
                                                                   |
                                                                   |                                       |       ______
                                                                   |                           .... |      |      | .... |
                                                                   |                  $HISTSIZE.... |      |<<<<<<| .... |                    ex HISTSIZE=1000
                                                                   |                           .... |      |      | .... |                       SAVEHIST=1000
                                                                   |                                       |      | .... |                       HISTFILE=~/.history
                                                                   |                  $SAVEHIST.... |      |>>>>>>|______|
                                                                   |                           .... |      |      $HISTFILE
                                                                   |                                       |
                                                                   |                                       |                         fc -R      reads  hist
                                                                   |                                    SESSION                      fc -W      writes  $SAVEHIST-lines     (overwrites)
                                                                   |                                       |                         fc -A      appends $SAVEHIST-lines
                                                                   |                                       |                         fc -WI     writes        num-lines   num: since the last time history was written.
                                                                   |                                                                 fc -AI     apppend       num-lines
                                                                   |
                                                                   |      SESSION: consider that runtime zsh uses a SESSION history (like a cache) so the $HISTFILE
                                                                   |      is only accessed through explicit writes/reades to it.
                                                                   |      Actually if the HISTFILE is not even set there is only the SESSION cache (that vanishes at the logout)
 2.5.5: History options                                            |
                                                                   |  .NO_BANG_HIST                   disable BANG
                                                                   |  .HIST_VERIFY                    see before execute
                                                                   |
                                                                   |  .APPEND_HISTORY                 zsh appends to $HISTFILE instead of overwriting (and also pays attention to not write any command already present)
                                                                   |  .INC_APPEND_HISTORY             commands are appended on the fly as they are executed (usefull when having more zsh)
                                                                   |  .SHARE_HISTORY                  commands are also read (so I see history of the other zsh) nb. SESSION-history is updated from shared history file
                                                                   |                                  ONLY via explicit reads (ex. 'history' / 'fc' commands) so a !! will always execute my last SESSION cmd, not others.
                                                                   |
                                                                   |  .EXTENDED_HISTORY               allows (consuming bit of disk space) to have timestamp for every command
                                                                   |                                  (so that, I can list also that:
                                                                   |                                                                     history       only the commands
                                                                   |                                                                     history -d    time + cmd
                                                                   |                                                                     history -f    date + cmd
                                                                   |                                                                     history -D    elapsed time + cmd
                                                                   |                                                                     history -E    date European  d.m.yy
                                                                   |                                                                     history -i    date Internat. yy-m-d
                                                                   |
                                                                   |  .HIST_IGNORE_DUPS               store 1 single cmd of a repeated series
                                                                   |  .HIST_IGNORE_ALL_DUPS           store 1 single cmd i(even if repeated somewhere else not the previous only)
                                                                   |  .HIST_EXPIRE_DUPS_FIRST         do .HIST_IGNORE_ALL_DUPS but only if the history becomes full
                                                                   |
                                                                   |  .HIST_SAVE_NO_DUPS              regardless any other option: NEVER store duplicate cmd
                                                                   |  .HIST_FIND_NO_DUPS              regardless how many time a cmd is present, history will show it once only
                                                                   |
                                                                   |  .HIST_REDUCE_BLANKS             remove (useless) spaces when storing
                                                                   |  .HIST_IGNORE_SPACE              do not store cmd starting with a space
                                                                   |
                                                                   |  .HIST_NO_STORE                  do not store cmd 'history' or 'fc'
                                                                   |
 2.5.6: Prompts                                                    |
                                                                   |  print -P                        all prompt strings can be first tested    (ex. print -P '%~')
                                                                   |  $PS1   $PROMPT  $prompt
                                                                   |  $RPS1
                                                                   |
                                                                   |  $PS2                            the prompt of a 2nd line where I go when I enter a long command on more lines
                                                                   |  $PS3                            the prompt of the 'select' when user must give input of a choice
                                                                   |  $PS4                            the input for debugging, that works after:
                                                                   |                                                               set -o xtrace           (turns on debugging everywhere)
                                                                   |                                                               typeset -ft funcname    (turns on debugging only while executing code of funcname)
                                                                   |                                                               typeset +ft funcname    (turns it off)
                                                                   |    %h     history num
                                                                   |    %m     host name
                                                                   |    %n     user name
                                                                   |
                                                                   |
                                                                   |
                                                                   |
                                                                   |
 2.5.7: Named directories                                          |
 2.5.8: `Go faster' options for power users                        |
 2.5.9: aliases                                                    |
 2.5.10: Environment variables                                     |
 2.5.11: Path                                                      |
 2.5.12: Mail                                                      |
 2.5.13: Other path-like things                                    |
 2.5.14: Version-specific things                                   |
 2.5.15: Everything else                                           |
                                                                   |
 Chapter 3: Dealing with basic shell syntax                        |
                                                                   |
 3.1: External commands                                            |
 3.2: Builtin commands                                             |
                                                                   |
 3.2.1: Builtins for printing                                      |
 3.2.2: Other builtins just for speed                              |
 3.2.3: Builtins which change the shell's state                    |
 3.2.4: cd and friends                                             |
 3.2.5: Command control and information commands                   |
 3.2.6: Parameter control                                          |
 3.2.7: History control commands                                   |
 3.2.8: Job control and process control                            |
 3.2.9: Terminals, users, etc.                                     |
 3.2.10: Syntactic oddments                                        |
 3.2.11: More precommand modifiers: exec, noglob                   |
 3.2.12: Testing things                                            |
 3.2.13: Handling options to functions and scripts                 |
 3.2.14: Random file control things                                |
 3.2.15: Don't watch this space, watch some other                  |
 3.2.16: And also                                                  |
                                                                   |
 3.3: Functions                                                    |
                                                                   |
 3.3.1: Loading functions                                          |
 3.3.2: Function parameters                                        |
 3.3.3: Compiling functions                                        |
                                                                   |
 3.4: Aliases                                                      |
 3.5: Command summary                                              |
 3.6: Expansions and quotes                                        |
                                                                   |
 3.6.1: History expansion                                          |
 3.6.2: Alias expansion                                            |
 3.6.3: Process, parameter, command, arithmetic and brace expansion|
 3.6.4: Filename Expansion                                         |
 3.6.5: Filename Generation                                        |
                                                                   |
 3.7: Redirection: greater-thans and less-thans                    |
                                                                   |
 3.7.1: Clobber                                                    |
 3.7.2: File descriptors                                           |
 3.7.3: Appending, here documents, here strings, read write        |
 3.7.4: Clever tricks: exec and other file descriptors             |
 3.7.5: Multios                                                    |
                                                                   |
 3.8: Shell syntax: loops, (sub)shells and so on                   |
                                                                   |
 3.8.1: Logical command connectors                                 |
 3.8.2: Structures                                                 |
 3.8.3: Subshells and current shell constructs                     |
 3.8.4: Subshells and current shells                               |
                                                                   |
 3.9: Emulation and portability                                    |
                                                                   |
 3.9.1: Differences in detail                                      |
 3.9.2: Making your own scripts and functions portable             |
                                                                   |
 3.10: Running scripts                                             |
                                                                   |
 Chapter 4: The Z-Shell Line Editor                                |
                                                                   |
 4.1: Introducing zle                                              |
                                                                   |
 4.1.1: The simple facts                                           |
 4.1.2: Vi mode                                                    |
                                                                   |
 4.2: Basic editing                                                |
                                                                   |
 4.2.1: Moving                                                     |
 4.2.2: Deleting                                                   |
 4.2.3: More deletion                                              |
                                                                   |
 4.3: Fancier editing                                              |
                                                                   |
 4.3.1: Options controlling zle                                    |
 4.3.2: The minibuffer and extended commands                       |
 4.3.3: Prefix (digit) arguments                                   |
 4.3.4: Words, regions and marks                                   |
 4.3.5: Regions and marks                                          |
                                                                   |
 4.4: History and searching                                        |
                                                                   |
 4.4.1: Moving through the history                                 |
 4.4.2: Searching through the history                                       |
 4.4.3: Extracting words from the history                                   |
                                                                            |
 4.5: Binding keys and handling keymaps                                     |
                                                                            |
 4.5.1: Simple key bindings                                                 |
 4.5.2: Removing key bindings                                               |
 4.5.3: Function keys and so on                                             |
 4.5.4: Binding strings instead of commands                                 |
 4.5.5: Keymaps                                                             |
                                                                            |
 4.6: Advanced editing                                                      |
                                                                            |
 4.6.1: Multi-line editing                                                  |
 4.6.2: The builtin vared and the function zed                              |
 4.6.3: The buffer stack                                                    |
                                                                            |
 4.7: Extending zle                                                         |
                                                                            |
 4.7.1: Widgets                                                             |
 4.7.2: Executing other widgets                                             |
 4.7.3: Some special builtin widgets and their uses                         |
 4.7.4: Special parameters: normal text                                     |
 4.7.5: Other special parameters                                            |
 4.7.6: Reading keys and using the minibuffer                               |
 4.7.7: Examples                                                            |
                                                                            |
 Chapter 5: Substitutions                                                   |
                                                                            |
 5.1: Quoting                                                               |
                                                                            |
 5.1.1: Backslashes                                                         |
 5.1.2: Single quotes                                                       |
 5.1.3: POSIX quotes                                                        |
 5.1.4: Double quotes                                                       |
 5.1.5: Backquotes                                                          |
                                                                            |
 5.2: Modifiers and what they modify                                        |
 5.3: Process Substitution                                                  |
 5.4: Parameter substitution                                                |
                                                                            |
 5.4.1: Using arrays                                                        |
 5.4.2: Using associative arrays                                            |
 5.4.3: Substituted substitutions, top- and tailing, etc.                   |
 5.4.4: Flags for options: splitting and joining                            |
 5.4.5: Flags for options: GLOB_SUBST and RC_EXPAND_PARAM                   |
 5.4.6: Yet more parameter flags                                            |
 5.4.7: A couple of parameter substitution tricks                           |
 5.4.8: Nested parameter substitutions                                      |
                                                                            |
 5.5: That substitution again                                               |
 5.6: Arithmetic Expansion                                                  |
                                                                            |
 5.6.1: Entering and outputting bases                                       |
 5.6.2: Parameter typing                                                    |
                                                                            |
 5.7: Brace Expansion and Arrays                                            |
 5.8: Filename Expansion                                                    |
 5.9: Filename Generation and Pattern Matching                              |
                                                                            |
 5.9.1: Comparing patterns and regular expressions                          |
 5.9.2: Standard features                                                   |
 5.9.3: Extensions usually available                                        |
 5.9.4: Extensions requiring EXTENDED_GLOB                                  |
 5.9.5: Recursive globbing                                                  |
 5.9.6: Glob qualifiers                                                     |
 5.9.7: Globbing flags: alter the behaviour of matches                      |
 5.9.8: The function zmv                                                    |
                                                                            |
 Chapter 6: Completion, old and new                                         |
                                                                            |
 6.1: Completion and expansion                                              |
 6.2: Configuring completion using shell options                            |
                                                                            |
 6.2.1: Ambiguous completions                                               |
 6.2.2: ALWAYS_LAST_PROMPT                                                  |
 6.2.3: Menu completion and menu selection                                  |
 6.2.4: Other ways of changing completion behaviour                         |
 6.2.5: Changing the way completions are displayed                          |
                                                                            |
 6.3: Getting started with new completion                                   |
 6.4: How the shell finds the right completions                             |
                                                                            |
 6.4.1: Contexts                                                            |
 6.4.2: Tags                                                                |
                                                                            |
 6.5: Configuring completion using styles                                   |
                                                                            |
 6.5.1: Specifying completers and their options                             |
 6.5.2: Changing the format of listings: groups etc.                        |
 6.5.3: Styles affecting particular completions                             |
                                                                            |
 6.6: Command widgets                                                       |
                                                                            |
 6.6.1: _complete_help                                                      |
 6.6.2: _correct_word, _correct_filename, _expand_word                      |
 6.6.3: _history_complete_word                                              |
 6.6.4: _most_recent_file                                                   |
 6.6.5: _next_tags                                                          |
 6.6.6: _bash_completions                                                   |
 6.6.7: _read_comp                                                          |
 6.6.8: _generic                                                            |
 6.6.9: predict-on, incremental-complete-word                               |
                                                                            |
 6.7: Matching control and controlling where things are inserted            |
                                                                            |
 6.7.1: Case-insensitive matching                                           |
 6.7.2: Matching option names                                               |
 6.7.3: Partial word completion                                             |
 6.7.4: Substring completion                                                |
 6.7.5: Partial words with capitals                                         |
 6.7.6: Final notes                                                         |
                                                                            |
 6.8: Tutorial                                                              |
                                                                            |
 6.8.1: The dispatcher                                                      |
 6.8.2: Subcommand completion: _arguments                                   |
 6.8.3: Completing particular argument types                                |
 6.8.4: The rest                                                            |
                                                                            |
 6.9: Writing new completion functions and widgets                          |
                                                                            |
 6.9.1: Loading completion functions: compdef                               |
 6.9.2: Adding a set of completions: compadd                                |
 6.9.3: Functions for generating filenames, etc.                            |
 6.9.4: The zsh/parameter module                                            |
 6.9.5: Special completion parameters and compset                           |
 6.9.6: Fancier completion: using the tags and styles mechanism             |
 6.9.7: Getting the work done for you: handling arguments etc.              |
 6.9.8: More completion utility functions                                   |
                                                                            |
 6.10: Finally                                                              |
                                                                            |
 Chapter 7: Modules and other bits and pieces Not written                   |
                                                                            |
 7.1: Control over modules: zmodload                                        |
                                                                            |
 7.1.1: Modules defining parameters                                         |
 7.1.2: Low-level system interaction                                        |
 7.1.3: ZFTP                                                                |
                                                                            |
 7.2: Contributed bits                                                      |
                                                                            |
 7.2.1: Prompt themes                                                       |
                                                                            |
 7.3: What's new in 4.1                                                     |

