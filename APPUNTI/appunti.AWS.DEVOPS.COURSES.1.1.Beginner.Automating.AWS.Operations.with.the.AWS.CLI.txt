       2 AWS Operations


Automating AWS Operations with the AWS CLI   (By David Clinton)

    ________________________________________________________________________
    1. Creating & using a IAM Admin User

                 ROOT vs IAM Admin user

                 as usual ROOT cannot be the user to access
                 all my AWS resources, as it has FULL control
                 and can be compromised in the public internet.

                 So a IAM user is created which has ROOT access
                 only to some of my resorces:

                                                        AWS resource 1
                                                      /
                          Public        ROOT   ------|- AWS resource 2
                          Internet                    \
                                                        AWS resource 3

                                                        AWS resource 1
                                                      /
                          Public        IAM    ------|-  ...X...
                          Internet      USER          \
                                                         ...X...

                1. Create IAM user from AWS console  (IAM / Manage User Access and Encryption Keys)
                2. Users -> Add User -->
                            User Name: [ <type here> ]

                            Access type:  [V] Programmatic access   (Enables an access key ID/Secret access key)
                                          [ ] AWS Managem. Console access (enable a PASSWORD) to access the console
                3. Set permissions
                            ([attach existing policies]:
                                        chose "Administrator Access")

                4. Create --> I can now see

                                AKIA4K624RA2NOYYA4Q                        Access Key ID
                                eKWbTpBCrgY52BpGgtZvOnKbm4rFvN8t6CZWQJw    aws_secret_access_key


    ________________________________________________________________________
    2. Install AWS CLI


                 I can have different ways according to the env
                            Mac
                            Windows
                            Linux    <--- ex used:
                                             sudo snap install aws-cli    #package manager "snap"
                                             sudo snap install aws-cli --static       (if I want the old version)

                 Once installed:

                          $ aws --version

                                     ===========================
                                     |  Note: On Linux EC2, "aws" (cli) is already installed.
                                     ===========================

    ________________________________________________________________________
    3. Configurint AWS CLI

     $ aws configure
                                        AWS Access Key ID        AKIA4K624RA2NOYYA4Q                            <-- this will go in ~/.aws/credentials
                                        AWS SAecret Access Key   eKWbTpBCrgY52BpGgtZvOnKbm4rFvN8t6CZWQJw        <-- this will go in ~/.aws/credentials
                                        Default region name      us-east-1                                      <-- this will go in ~/.aws/config
                                        Default output format    text       <--- others: (table / json)         <-- this will go in ~/.aws/config

     $ aws --profile live configure   <----- to refer to a specific profile     NOTE THAT BOTH WORK:
                                                                                     $ aws configure --profile pppppp
                                                                                     $ aws --profile pppppp configure

                         ===========================
                         |  Note: I can run $ aws configure at any time
                         |        it will have already set the previous values, so that
                         |        for instance I can just change the output format
                         |        temporary
                         ===========================
                          Note also that instead of editing ~/.aws/credentials / ~/.aws/config by hand
                          I can control in parallel directly all via
                                           $ aws configure
                                                                 ~/.aws
                                                                        ./config
                                                                        ./credentials    <--- key


    ________________________________________________________________________
    4. GETTING HELP & GUIDANCE FOR AWS CLI

    _____________________________
    . Understanding AWS CLI Syntax
    _____________________________

     $ aws [options] <command>  <subc> [parameters]
               1        2         3         4

               ex
               $ aws
                      1     --output table
                      2     ec2
                      3     describe-images
                      4     --filters "Name=decsription,Values=*CentOS*"

                         ===========================
                         |  most important [options]:  --profile / --output / --region / --dry-run
                         ===========================                                     ^^^^^^^^^
    _____________________________
    . Finding Syntax Help for AWS CLI
    _____________________________

     $ aws help
     $ aws s3 help
     $ aws s3 sync help

    _____________________________
    . Using both S3 & S3API
    _____________________________

                                S3   |  S3Api                         ex
                      more highlevel |  granular                            s3:   aws s3 ls
                   to SYNC filesyst. |                                   s3api:   aws s3api list-buckets
       Transfer big files in + parts |
                                     |                                      s3:   aws s3 md s3://mybucket/    <--- create 1 buckey
                                     |                                   s3api:   aws s3api get-bucket-lifecycle-configuration --bucket mybucket
                                                                                         \
                                                                                          \_ I can see the configuration metadata (if any)
                                                                                             config metadata (ex. after how many days files go to glacier....)
                                                                                             are set with put-bucket-lifecycle-configuration
    ________________________________________________________________________
    5. LAUNCHING COMPLEX MULTI-TIERED CLI-based OPS

    _____________________________
    . Configuring IAM Users, Groups
    _____________________________

     Devs of 1 scrums are groupped into   1 IAM group   (

        $ aws iam create-user        --user-name mike      <---- it will give the AKIA4K624RA2NOYYA4Q key in output
        $ aws iam get-user           --user-name mike      to see the key again
        $ aws iam list-access-keys   --user-name mike          "       "   "
        $ aws iam create-access-key  --user-name mike      output: AKIA4K624RA2NOYYA4Q / eKWbTpBCrgY52BpGgtZvOnKbm4rFvN8t6CZWQJw
                                                                   (note: no way to see that again, so write it down)
        $ aws iam create-group       --group-name  admins

        $ aws iam list-policies      <---------- to see the hundreds available (ex. I can
                                                      $ grep 'AmazonEC2'|grep 'Access'  to filter out)
                                    .....
                                    {
                                        "PolicyName": "AWSApplicationMigrationReplicationServerPolicy",
                                        "PolicyId": "ANPAZKAPJZG4PXFWAA3SE",
                                        "Arn": "arn:aws:iam::aws:policy/service-role/AWSApplicationMigrationReplicationServerPolicy",
                                        "Path": "/service-role/",
                                        "DefaultVersionId": "v1",
                                        "AttachmentCount": 0,
                                        "PermissionsBoundaryUsageCount": 0,
                                        "IsAttachable": true,
                                        "CreateDate": "2021-04-07T07:21:57Z",
                                        "UpdateDate": "2021-04-07T07:21:57Z"
                                    },
                                    {
                                        "PolicyName": "AWSElasticBeanstalkReadOnlyAccess",
                                        "PolicyId": "ANPAI47KNGXDAXFD4SDHG",
                                        "Arn": "arn:aws:iam::aws:policy/AWSElasticBeanstalkReadOnlyAccess",
                                        "Path": "/",
                                        "DefaultVersionId": "v1",
                                        "AttachmentCount": 1,
                                        "PermissionsBoundaryUsageCount": 0,
                                        "IsAttachable": false,
                                        "CreateDate": "2015-02-06T18:40:19Z",
                                        "UpdateDate": "2015-02-06T18:40:19Z"
                                    }
                                ]
                            }

        $ aws iam list-policies | grep AmazonEC2 | grep Access
                                                            "PolicyName": "AmazonEC2FullAccess",
                                                            "Arn": "arn:aws:iam::aws:policy/AmazonEC2FullAccess", <---------- I want this
                                                            "PolicyName": "AmazonEC2ContainerRegistryFullAccess",
                                                            "Arn": "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess",
                                                            "PolicyName": "AmazonEC2ReadOnlyAccess",
                                                            "Arn": "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess",

        $ aws iam attach-group-policy
                                      --policy-arn arn:aws:iam::aws:policy/AmazonEC2FullAccess
                                      --group-name admins

        $ aws iam add-user-to-group
                                      --group-name admins
                                      --user-name  mike


    _____________________________
    . Creating an S3-based static website (2m 15s)
    _____________________________

     A static HTML web site

        $ aws s3 mb s3://mysite548.com

     I make it public on internet

        $ aws s3api put-backet-acl --bucket mysite548.com --acl public-read
                    ^^^^^^^^^^^^^^                        ^^^^^^^^^^^^^^^^^
     I upload files giving same public permissions as the bucket
     (suppose there is a aaa.thml file which I want to use as index.html
     and an eee.thml I want to use for error pages)

        $ aws s3  sync . s3://mysite548.com --acl public-read

     I upload file giving same public permissions as the bucket

        $ aws s3  website s3://mysite548.com --index-document aaa.html  --error-document eee.html
                  ^^^^                      ^^^^^^^^^^^^^^^^^
     I can inspect

        $ aws s3api get-bucket-website --bucket mysite548.com

                ERRORDOCUMENT   eee.html
                INDEXDOCUMENT   aaa.html

     The final url is
            http://mysite548.com.s3-website-us-east-1.amazonaws.com



    _____________________________
    . Provisioning and Launching
    _____________________________


        $ aws ec2 create-security-group
                                      --group-name  EC2SecurityGroup
                                      --description "Security Group for EC2 instances to allow ports 22, 80 and 443"

                  output:  sg-0efc4511c147840b2


        $ aws ec2 authorize-security-group-ingress
                                      --group-name  EC2SecurityGroup
                                      --protocol    tcp
                                      --port        22
                                      --cidr        172.54.125.8/32    <--- I specify my local IP as the only which can access

                                      --group-name  EC2SecurityGroup
                                      --protocol    tcp
                                      --port        80
                                      --cidr        0.0.0.0/0          <--- anyone from anywhere

                                      --group-name  EC2SecurityGroup
                                      --protocol    tcp
                                      --port        80
                                      --cidr        0.0.0.0/0


        $ aws ec2 describe-security-groups
                                      --group-names  EC2SecurityGroup

            SECURITYGROUPS  EC2SecurityGroup created 2017-03-23T11:41:28.379+00:00 sg-d3f834aa launch-wizard-3 250991044064 vpc-4b699e2f
            IPPERMISSIONS   22      tcp     22
            IPRANGES        0.0.0.0/0
            IPPERMISSIONSEGRESS     -1
            IPRANGES        0.0.0.0/0


        ---------- get the IMAGE_ID of the image I want
        $ aws ec2 describe-images
                                      --filters "Name=description,Values=*Amazon Linux 2*" "Namw=owner-alias,Values=amazon"

                  output:  ami-00b94673edfccb7ca


                  Note: without a filter it's very slow, as it returns a big json
                        of all the AMIs in AWS, each of this shape:

                                 {
                                "Architecture": "x86_64",
                                "CreationDate": "2011-10-17T15:55:04.000Z",
                                "ImageId": "ari-fd9fad89",
                                "ImageLocation": "ubuntu-kernels-testing-eu/ubuntu-hardy-amd64-linux-image-
                                                  2.6.24-29-xen-v-2.6.24-29.94-ramdisk.20111017.img.manifest.xml",
                                "ImageType": "ramdisk",
                                "Public": true,
                                "OwnerId": "099720109477",
                                "PlatformDetails": "Linux/UNIX",
                                "UsageOperation": "RunInstances",
                                "State": "available",
                                "BlockDeviceMappings": [],
                                "Hypervisor": "xen",
                                "Name": "ubuntu-kernels-testing/ubuntu-hardy-amd64-linux-image-
                                         2.6.24-29-xen-v-2.6.24-29.94-ramdisk.20111017",
                                "RootDeviceType": "instance-store",
                                "VirtualizationType": "paravirtual"
                            }
                        ]
                    }



        ---------- get the list of SUBNET-IDs
        $ aws ec2 describe-subnets

                  output choosen:   subnet-52d6117c


        ---------- run 1 EC2 using the IMAGE_ID (of the AMI) and the (SUBNET-ID)
        $ aws ec2 run-instances
                               --count               1
                               --image-id            ami-00b94673edfccb7ca
                               --subnet-id           subnet-52d6117c
                               --instance-type       t2.micro
                               --key-name            the_pem_file           (*1)
                               --security-group-ids  sg-0efc4511c147840b2
                               --user-data           file://my-script.sh    (*2)
                               --tag-specifications  'ResourceType=instance,Tags=[{Key=webserver,Value=production}]'

                   (*1) it's the pem file in the current dir.
                       It's specified by its name but without the '.pem' extension which is implicit
                        The file must be in 400 mode

                   (*2) optional file in cur dir which will be uploaded and then executed
                        when the EC2 boots
