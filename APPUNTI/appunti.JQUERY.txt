


 jQuery:   JAVASCRIPT library (is 1 single .js file ex. jquery-1.12.4.min.js) to have:

                      - fast & short Javascript code ready
                      - no more cross-browser issue (support back to IE 6)

 INSTALL jQUERY       . download from jQuery.com  and then put it in the same dir 
                        of the file where it must be used and where you write this:

                           <head>
                           <script src="jquery-1.12.4.min.js"></script>
                           </head> 

                      - Otherwise link directly to an external CDN (Content Delivery Network)
                        like Google or Microsoft:

                           <head>
                           <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
                           </head> 

                           <head>
                           <script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.12.4.min.js"></script>
                           </head> 

                        The advantage of this solution is that, it's not required to download in any dir
                        and the customer of my page could have it already cached in his browser
                        (as that CDN are very common) so fastest solution.



 ORGANISE CODE        . Even my own jQuery code can be put in 1 single file
                        for all my html pages, and each of them call it:

                             <head>
                             <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js">
                             </script>
                             <script src="my_jquery_functions.js"></script>
                             </head> 




 GENERAL IDEA         . It's similar to CSS:
                            1/2 SELECT some NODES of the DOM   - (SELECTORS)
                            2/2 perform some ACTION on them    - (ACTIONS)



 GENERAL SYNTAX       . $(seclector).action()        $ is a short for "jQuery"
                                                       I can write jQuery(selector).action()
                                                       (see below the noConflict() method
                                                        to avoid clash with other frameworks using 
                                                        the shortcut '$')
                        ex:
                           $(this).hide()        hides the current element.
                           $("p").hide()         hides all <p> 
                           $(".test").hide()     hides all elements with class="test".
                           $("#test").hide()     hides the element with id="test".



 RULE ON START        . whatever is the jQuery code, put it inside the .ready event
                        of "document", so that ALL the JAVASCRIPT-files related
                        to the doc have been downloaded/loaded (the risk is to call
                        too early some code that is not available yet):

                        $(document).ready(function(){      |    $(function(){
                                                           |                                    
                           // jQuery methods go here...    |       // jQuery methods go here...
                                                           |                                    
                           });                             |       }); 
                       ________________________________________________________________________
                           MORE READABLE VERSION                SHORT FORM

                        




 SELECTORS            . have the syntax $(...)
                      . all the standard CSS are supported
                      . there are some more custom 

                      ex:

                          $("*")                    Selects all elements    
                          $(this)                   Selects current HTML element    
                          $("p.intro")              Selects all <p> with class="intro"     
                          $("p:first")              Selects first <p>
                          $("ul li:first")          Selects first <li> of the first <ul>    
                          $("ul li:first-child")    Selects first <li> of every <ul>    
                          $("[href]")               Selects all el with an href ATTRIBUTE     
                          $("a[target='_blank']")   Selects all <a>  with a target attribute value equal to "_blank"    
                          $("a[target!='_blank']")  Selects all <a>  with a target attribute value NOT equal to "_blank"    
                          $(":button")              Selects all <button>  and <input> of type="button"     
                          $("tr:even")              Selects all even <tr> 
                          $("tr:odd")               Selects all odd  <tr> 



 EVENTS               . usually jQuery code is attached to EVENTS.
                      . almost all DOM events <--->  1 jQuery method
                                                     ex:
                                                      click         keypress     submit      load
                                                      dblclick      keydown      change      resize
                                                      mouseenter    keyup        focus       scroll
                                                      mouseleave    blur         unload

                      . the jQuery code is then associated inside a function ()

                        ex:           _____ jQuery method "click()" mapping DOM event click
                                     /       ____ function associated
                                    /       /
                           $("p").click(function(){
                             // action goes here!!
                             }); 
                        
                      . "on"   I can attach 1 or + EVENT HANDLERS to an elem, 
                        with the keyword "on":


                        $("p").on("click", function(){       $("p").on({
                            $(this).hide();                      mouseenter: function(){
                        })                                           $(this).css("background-color", "lightgray");
                                                                 },
                                                                 mouseleave: function(){
                                                                     $(this).css("background-color", "lightblue");
                                                                 },
                                                                 click: function(){
                                                                     $(this).css("background-color", "yellow");
                                                                 }
                                                             });
                     
                     
                     

 SHOW() HIDE()        . 3 general actions assocated to each element
                         $("p").hide();
                         $("p").show();
                         $("p").toggle();   # switch between the 2 states

                         each can be in the form xxxx(speed, callback)
                                                       ^       ^
                                                       |       |__  a function to be executed after the method completes
                                                       |
                                                       |__  "slow" "fast"  1000 <-- a number in ms
                         ex: 
                             $("#id").click(function(){
                                 $("p").show(800);
                             });
                     
                     
                     


 FADE()               . 4 general actions assocated to each element
                        to graduallly disappear / (reappear)

                         
                             fadeIn()          fadeIn     (speed,callback);
                             fadeOut()         fadeOut    (speed,callback);
                             fadeToggle()      fadeToggle (speed,callback);
                             fadeTo()          fadeTo     (speed,opacity, callback);
                                                                  ^                    
                                                                  |__ value in 0--1: ex. 0.18

                         $("button").click(function(){
                             $("#div1").fadeIn();
                             $("#div2").fadeIn("slow");
                             $("#div3").fadeIn(3000);
                         });




 SLIDE()              . 4 general actions assocated to each element
                        to graduallly disappear / (reappear)

                         
                             slideDown()       slideDown   (speed,callback);
                             slideUp()         slideUp     (speed,callback);
                             slideToggle()     slideToggle (speed,callback);




 ANIMATE()            . Plugin to add to the code library.
                      . It allows to practically ALL attributeds of an element to
                        acquire a new value. The transition from the all to the new
                        is visible like a movie sequence

                            animate({.....},speed,callback);


                        $("button").click(function(){
                            var div = $("div");
                            div.animate({left: '100px'}, "slow");
                            div.animate({fontSize: '3em'}, "slow");
                        });



 STOP()               . to stop FADE() SLIDE() ANIMATE() effects before their normal end
                        ex:
                            $("#stop").click(function(){
                                $("#panel").stop();
                            });



 CALLBACK             . The callbacks functions above, are usefull, as
                        normally javascript executes the next line regardless
                        if the effect of the previous line is completed
                        so instead of this:

                                $("button").click(function(){
                                    $("p").hide(1000);
                                    alert("The paragraph is now hidden");
                                });

                        is better this:

                                $("button").click(function(){
                                    $("p").hide("slow", function(){
                                            alert("The paragraph is now hidden");
                                    });
                                });



 CHAINING             . A short syntax allows to CHIAN (with a '.') more actions on the same elem
                        avoding to select it again (it also allows to go onto a new line)
                        ex:
                             $("#p1").css("color", "red").slideUp(2000).slideDown(2000);
                        or:
                             $("#p1").css("color", "red")
                               .slideUp(2000)
                                 .slideDown(2000);



 GET DOM val          . 3 functions:
                        
                            text() - GET text of selected elements
                            html() - GET content of selected elements (including HTML markup)
                            val()  - GET value of input fields

                          alert("Text:  " + $("#idx").text());
                          alert("HTML:  " + $("#idx").html());
                          alert("Value: " + $("#idx").val());
   

 SET DOM val          . 4 functions:

                            text() 
                            html()
                            val() 
                            attr()

                          $("#test1").text("Hello world!");
                          $("#test2").html("<b>Hello world!</b>");
                          $("#test3").val("Dolly Duck");

                          $("#w3s").attr("href", "http://www.w3schools.com/jquery");     1 val
                          $("#w3s").attr({
                                          "href" : "http://www.w3schools.com/jquery",    + vals
                                          "title" : "W3Schools jQuery Tutorial"
                                        });

                          They come also in the form of a callback function as parameter.
                                  xxxx( function (i, "oooo") {})     where i is the index
                                                                     to identify the element to which the
                                                                     fun is attached

                                                                     "ooo" is the old value

                          So, inside the callback function I can have already passed for me
                          a number to identify the elem, and its old val.




 ADD                  . 4 functions:
                            
                            append()  - Inserts content at the end of the selected elements
                            prepend() - Inserts content at the beginning 
                            after()   - Inserts content after 
                            before()  - Inserts content before 


                          $("ol").append ("<li>Appended  item</li>");
                          $("ol").prepend("<li>Prepended item</li>");
                          $("img").after ("Some text after");
                          $("img").before("Some text before"); 

                        for all 4, I can pass many args:
                                                          $("body").append(txt1, txt2, txt3);    




 REMOVE               . 2 functions:
                            
                            remove() - Removes element + childs
                            empty()  - Removes ONLY childs 

                          $("#div1").remove();
                          $("#div1").empty();

                        I can filter WHAT to REMOVE:
                          $("p").remove(".test");
                          $("p").remove(".test, .demo");




 CSS Classes          . 3 functions:
                            
                            addClass()    - Adds one or more classes to the selected elements
                            removeClass() - Removes one or more classes 
                            toggleClass() - Toggles between adding/removing classes 

                          $("div").addClass("important");
                          $("h1, h2, p").addClass("blue");
                          $("h1, h2, p").removeClass("blue");
                          $("h1, h2, p").toggleClass("blue");

                        You can also specify multiple classes 
                          $("#div1").addClass("important blue");


 css()                . The css() method get/set 1 or + style prop
                            
                            css("propertyname");               GET
                            css("propertyname","value");       SET
                            css({"propertyname":"value","propertyname":"value",...});   MANY

                          $("p").css("background-color");
                          $("p").css("background-color", "yellow");
                          $("p").css({"background-color": "yellow", "font-size": "200%"});

                                


 CSS Dimensions       . 6 functions:
                            
                            width()            height()
                            innerWidth()       innerHeight()
                            outerWidth()       outerHeight()
                            
                            

                          __________________________________________
                          |                 MARGIN                 |
                          |     ______________________________     |
                          |    |..BORDER .....................|    |
                          |    |..__________________________..|    |
                          |    |..|        PADDING         |..|    |
                          |    |..|      __________        |..|    |
                          |    |..|      |  ELEM  |        |..|    |
                          |              |________|                |
                                         __________                 
                                            width()                 
                                  |________________________|        
                                            innerWidth()            
                               |______________________________|     
                                            outerWidth()            
                          |_______________________________________|
                                            outerWidth(true)        



                          $(document).width();                      GET
                          $("#div1").width(500).height(500);        SET


 TRAVERSING           . many methods to traverse the tree
 
                                    __________                   
                                    |  ELEM  |                   
                                    |________|  ancestor __.
                                        |                  |
                                    ____|_____             |
                          father    |  ELEM  |             |
                            |       |________|             |
                            |           |                  |
                            |       ____|_____             |
                          child     |  ELEM  |  descendant_|
                                    |________|             |
                                        |                  |
                                    ____|_____             |
                                    |  ELEM  |  descendant_|
                                    |________|             |
                                                           .
 ANCESTORS            . 3 functions:                       
                                                                 
                            parent()         - returns the direct parent 
                            parents()        - returns parent + all ancestors (with an optional param I can filter)
                            parentsUntil()   - returns parent + all ancestors up (and excluding) the one specified

                          $("span").parent();
                          $("span").parents();
                          $("span").parents("ul");    <--- filter only "ul" ancestors
                          $("span").parentsUntil("div"); 


 DESCENDANTS          . 2 functions:
                            
                            children()  -  returns all direct children 
                            find()      -  returns descendants

                          $("div").children();
                          $("div").find("*");             ALL

                          $("div").children("p.my_class");   filter all "p" children of class my_class
                          $("div").find("span");             filter all "span" descendants


 SIBLINGS             . 7 functions:
                            
                            siblings()    -  returns all siblings
                            next()        -  returns the next 
                            nextAll()     -  returns ALL next 
                            nextUntil()   -  returns ALL next sibling till the one specified

                            prev()        -  work just like the methods above 
                            prevAll()        but with reverse functionality: 
                            prevUntil()     (traverse backwards instead of forward). 

                          $("h2").siblings();
                          $("h2").siblings("p");    <--- filtered
                          $("h2").next();
                          $("h2").nextAll();
                          $("h2").nextUntil("h6");


                              

 FILTERING            . 5 functions:
                            
                            first()   - returns the first element of the selected elements.
                            last()    - returns the last element of the selected elements.
                            eq()      - returns an element with a specific index (starts at 0)
                            filter()  - return the Elements that match the criteria 
                            not()     - the opposite of filter(). returns all elements that do not match 


                          $("div p").first();
                          $("div p").last();
                          $("p").eq(1);
                          $("p").filter(".intro");
                          $("p").not(".intro");


 AJAX                 . AJAX = Asynchronous JavaScript and XML.

                        is the art of exchanging data with a server, 
                        updating parts of a page without reloading all
                            
                        you can request 
                            . text, 
                            . HTML, 
                            . XML,
                            . JSON 

                        from a remote server using both 

                             HTTP Get 
                             HTTP Post 

                        And you can load the external data 
                        directly into the selected HTML elements

         COMPATIBILITY  Different browsers have different syntax for AJAX implementation.
                        jQuery allows a standard AJAX for all.


 AJAX load()          . $(selector).load(URL,[data,callback]); 
                            
                            data: optional key/value pairs to send along with the request.

                          $("#div1").load("demo_test.txt");


 AJAX GET/POST        . GET   - get data from the server. Note: may return cached data.
                        POST  - get data from the server. 
                                However, NEVER caches data, and 
                                is often used to send data along with the request.
                            
                            $.get(URL,callback); 
                            $.post(URL,data,callback); 

                                      callback is the function to be executed if the request succeeds.
                                      has 2 args (data, status)

                                          data:    holds the content of the page requested, 
                                          status:  holds the status of the request.




                          $.get("demo_test.asp", function(data, status){
                                 alert("Data: " + data + "\nStatus: " + status);
                          });


                          $.post("demo_test_post.asp",
                                  {
                                     name: "Donald Duck",
                                     city: "Duckburg"
                                  },
                                  function(data, status){
                                     alert("Data: " + data + "\nStatus: " + status);
                          });



 NOCONFLICT           . the '$' is used even by other JavaScript frameworks like: 
                        Angular, Backbone, Ember, Knockout, and more.
                            
                        So to avoid clash, jQuery can release the hold on the $ shortcut
                        doing the following things:

                        1/2 $.noConflict();    the noConflict will release '$'.

                                               nb. noConflict returns also a reference to jQuery
                                               so it can be used as
                                                  var jq = $.noConflict();
                                                  jq(document).ready(function(){  <--- my new shortcut is 'jq'
                                                      jq("button").click(function(){
                                                              jq("p").text("jQuery is still working!");
                                                      });
                                                  }); 

                        2/2 you can put the code inside the 'ready' function
                            which is defined with 1 arg named $:   ready($) {...
                            In this way I can save all my old legacy code without
                            canging even 1 line:jQuery(document).ready(function($){

                                $("button").click(function(){
                                        $("p").text("jQuery is still working!");
                                        });
                                }); 
