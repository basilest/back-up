
  plain text = ASCII = characters are 8 bits

     NOW IS WRONG

  .-------------------------------------------------------------------
  |
  | If you have a string, in memory, in a file, or in an email message,
  | you have to know what ENCODING it is in or
  | you cannot interpret / display correctly.
  | There are over a hundred encodings and above code point 127 (ASCII), all bets are off.
  |
  '-------------------------------------------------------------------


Note: there is/was the command 'ascii' but now even if not available
      anymore in Mac OS and some Ubuntu versions, still everywhere there is its 'man' page
       > man ascii
      which prints the ascii table, and can also refer to its file
      i.e. in Mac OS the file
                          /usr/share/misc/ascii




   1. Unix / K&R / The C Programming Language : everything was very simple.

      - The only characters that mattered were good old unaccented English letters:
          .coded in ASCII:
                  - able to represent every character using
                    a number between 32 and 127 (7 bits)
                  - Space was 32, the letter "A" was 65 (decimal, or 0x41 hex)
                  - Codes below 32 were called unprintable and were used for control characters:
                    ex  7 computer beep
                       12 page of paper to go flying out of the printer and a new one to be fed in.

   2. 1byte = 7bits + 1
      many ideas how to use the remaining bit
      space (128 to 255)

         - IBM-PC had something that came to be known as the OEM character set
           which provided
                . a bunch of line drawing characters
                . accented characters for European languages (but different
                  for PC sold in different Countries. Ex accented-e in France (code 130)
                  was a different symbol in Israel or Russia)


   3. ANSI. Standardised the OEM
            0-127  OK
            128-255: groupped in CODE-PAGES
                     (Israel DOS used a code page called 862,
                      while Greek users used 737)

                      MS-DOS had dozens of these code pages.
                      (But getting, say, Hebrew and Greek on the same computer was impossibile)

   4. Internet: it became quite commonplace to move strings from one computer to another.

   5. UNICODE
               - every symbol (ex. 'A') is defined by a CODE POINT
                 (ex. U+0041   (hex))
                 There is no real limit on the number of letters that Unicode can define
                 and in fact they have gone beyond 65,536 (so UNICODE IS NOT 2 BYTES, 16 bit)
                 The bits/bytes representation refers to the ENCODING concept. UNICODE
                 remains a theoretical concept.

   6. ENCODING
               - specify how the CODE POINTS are represented in the computer bytes.
                 ex.
                        Hello
                        U+0048 U+0065 U+006C U+006C U+006F

                        1 way:  00 48 00 65 00 6C 00 6C 00 6F  (high-endian)
                        2 way:  48 00 65 00 6C 00 6C 00 6F 00  (low-endian)

                 So the people were forced to come up with the bizarre convention of storing a FE FF
                 at the beginning of every Unicode string; this is called a
                           Unicode Byte Order Mark
                 and if you are swapping your high and low bytes it will look like a FF FE and
                 the person reading your string will know that they have to swap every other byte.

       6.1. UTF-16 / UCS-2
                 The above 2 traditional store-it-in-two-byte methods
                 are called UCS-2 (because it has two bytes)
                 or UTF-16 (because it has 16 bits), and you still have to figure out if
                 it’s high-endian UCS-2 or low-endian UCS-2.


       6.2. UTF-8
               - every code point from 0-127 is stored in a single byte.
               - only code points 128 and above are stored using 2, 3, in fact, up to 6 bytes.

               This has the neat side effect that English text looks exactly the same
               in UTF-8 as it did in ASCII.
               Hello, will be stored as 48 65 6C 6C 6F.

       6.3. UTF-7, UTF-4,....
               There are actually a bunch of other ways of encoding (correctly) Unicode
               UTF-7, which is a lot like UTF-8 but guarantees that the high bit will always be zero.
               UCS-4 (UTF-32), which stores each code point in 4 bytes,
               which has the nice property that every single code point can be stored
               in the same number of bytes, but it's a waste of memory.

       6.4. '?'
            Other encodings (ex.
                - Windows-1252 (the Windows 9x standard for Western European languages)
                - ISO-8859-1   (Latin-1 (also useful for any Western European language))
                ....)
            fail to represent some Unicode CODE-POINTS.
            These encodings when failing produce a '?' instead of the correct Unicode symbol.

---------------- UTF-8 :
UNICODE
CODE
POINTS

[0-127]            0 x x x  x x x x                  old ASCII 0-127 still stays in 1 byte
                     ^^^^^^^^^^^^^^                  the HEADER is 1 bit: starting 0
                          7


[128-2.047]        110  x  x x x x      10   x x  x x x x     for UNICODE CODE-POINTS > 128  < 2.047     (2^11:2048 --> 0-2047)
                   ^^^  ^^^^^^^^^^      ^^   ^^^^^^^^^^^^     I need 11 bits of info. They are split
                            5                    6            in 2 bytes:
                            '--------------------'                - 1st: HEADER of 110   <--- which I can remember as 2-"1" -> 2 bytes
                                    tot=11                        - 2nd: HEADER of  10   <--- header of the "continuation byte"


 3rd range         1110    x x x x      10  x x  x x x x     10   x x  x x x x
                   ^^^^    ^^^^^^^      ^^  ^^^^^^^^^^^^     ^^   ^^^^^^^^^^^^
                            4                    6                   6
                            '--------------------'-------------------'
                                              tot=16
                                                              for UNICODE CODE-POINTS > 2.047  < 65.535   (2^16:65536 --> 0-65535)
                                                              I need 16 bits of info. They are split
                                                              in 3 bytes:
                                                                  - 1st: HEADER of 1110  <- which I can remember as 3-"1"-> 3 bytes
                                                                  - 2nd: HEADER of  10   <- header of the "continuation byte"
                                                                  - 3rd: HEADER of  10   <- header of the "continuation byte"
...


last range:

                   1111 110 x      10  x x  x x x x   10   x x  x x x x   10  x x  x x x x   10   x x  x x x x   10   x x  x x x x
                   ^^^^^^^^ ^      ^^  ^^^^^^^^^^^^   ^^   ^^^^^^^^^^^^   ^^  ^^^^^^^^^^^^   ^^   ^^^^^^^^^^^^   ^^   ^^^^^^^^^^^^
                            1                6                   6                 6                   6                   6
                            '----------------'-------------------'-----------------'--------------------'-----------------'
                                                                   tot=31
                                                              31 bits for the last block, with 6 bytes split as
                                                              in 3 bytes:
                                                                  - 1st: HEADER of 1111 110 <- which I can remember as 6-"1"-> 6 bytes
                                                                  - 2nd: HEADER of  10      <- header of the "continuation byte"
                                                                  - 3rd: HEADER of  10      <- header of the "continuation byte"
                                                                  - 4th: HEADER of  10      <- header of the "continuation byte"
                                                                  - 5th: HEADER of  10      <- header of the "continuation byte"
                                                                  - 6th: HEADER of  10      <- header of the "continuation byte"



        NOTE 1:  taking any byte from a stream, I always know if I'm in the middle of a "continuation bytes"
                 or if I've taken a leading byte
                 so I can look forward or backward in the stream of byte

        NOTE 2:  If a byte starts with 0 it's a 1 ASCII = 1 UTF-8 single byte/char.


Modified UTF-8   it's the standard (originated in Java) which avoids having EVER the ASCII NUL ( 8-"0" (8 consecutive zeros))
                 This avoids to send what the receiver could interpret as an "END-OF-STRING"
                 and then potentially stops listening for the following bytes.

                 The null character (U+0000) is then the only ASCII value which comes encoded BY DEFINITION in 2 bytes:

                         11000000 10000000 (hex C0 80), instead of 00000000 (hex00)
                         ...^^^^^ ..^^^^^^

                 In the end:
                 Modified UTF-8  never contains any actual null bytes (ALL '0')



                                                                                                                       1010 0011
                                                                                                                      /''^^^^^\^
                                                                                                                     /         \
                                                                                                                    /         __\____
  ex. £ = U+00A3 = 1010 0011 --> 8 bit --> 2 bytes case:  [110  x  x x x x]   [10   x x  x x x x]  --> [110 x  x x 10]    [10 10 0011] -->   C2  A3
                                                                  5                      6                   C2               A3


                                                                                                                0001 1111 0110 0000 0000
                                                                                                                  ^^^^^^^        ^^^^^^^
                                                                                                                  /         |           \
                                                                                                                 /          |            \
                                                                                                     _      _______       _______       _______
  ex. 😀 = (U+1F600) Smiling Face: 0001 1111 0110 0000 0000 --> 17 bit --> 4 bytes case = [11110 x x 0] [10 01 1111]  [10 01 1000]  [10 00 0000] -->   F0 9F 98 80
                                                                                                F0           9F            98             80
     printf "£" | xxd      c2a3                 <---- note like the
     printf "😀"| xxd      f09f 9880            <---- encoding inside the pipe is utf8, so xxd sees those bytes.


     ===========================>  USE VIM TO HAVE UTF-8 REPRESENTATION QUICKLY WITH THE ABOVE:    ex to have utf8 of this line:     :.!xxd


---------------------


   7. NORMALISATION               annex 15:  https://www.unicode.org/reports/tr15/)
       The SAME unicode char can have more representations (all called "canonically equivalent")

                U+00C5 ( Å ) LATIN CAPITAL LETTER A WITH RING ABOVE  <-------------- this is the NFC one
                U+212B ( Å ) ANGSTROM SIGN
                U+0041 ( A ) LATIN CAPITAL LETTER A + U+030A ( ̊ ) COMBINING RING ABOVE

       each then with a different binary value, so it's possible that in a program
       I can have odd results (ex. string compare)

   2 Unicode chars (2 SINGLETON) are EQUIVLENT depending on 2 kinds of 'equivalence':

            . CANONICAL     equivalence     (NFC)
            . COMPATIBILITY equivalence     (symbol used 'K'  Kompatibility (NFKC)  as C is already 'Composition')

    A.CANONICAL     equivalence      it's the real scrict one (the default: NFC)
                                     meaning that the 2 chars must be the same on video
                                     even if they have:

                                      - different code points
                                         ANGSTROM SIGN      U+212B ( Å ) =  U+00C5 ( Å )  LATIN CAPITAL LETTER A WITH RING ABOVE
                                         Omega greek        U+2126 ( Ω ) =  U+03A9 ( Ω )  Ohm symbol

                                      - different combining sequence
                                                 Ç 	    = 	C + ◌̧       # 1 singleton vs 1 letter (combined +) symbol

                                      - different ordering
                                                 q+◌̇+◌̣ 	= 	q+◌̣+◌̇       # 1 letter (combined +) same symbols but different order

    B.COMPATIBILITY equivalence      It's weaker, allowing different dispalys

                                         ℌ 	= 	H          font variants
                                         ℍ 	= 	H          font variants
                                         ① 	= 	1          Circled variants
                                         ｶ 	= 	カ         Width variants
                                        ︷ 	= 	{          Rotated variants
                                         ︸ = 	}
                                     	i⁹ 	= 	i9         Superscripts/subscripts
                                         i₉ = 	i9
                                         ㌀ = 	アパート   Squared characters
                                         ¼ 	= 	1/4        Fractions


---------------------  PRE-COMPOSED Characters

        Some special characters exist as single standalone char (not composed)
        ex

             ḍ       (1E0D) Latin Small Letter D with Dot Below     which is also equivalent to

             d + .   (0064 + 0323)

        so ḍ is called pre-composed

        Not always exist a pre-composed
        ex the 'q' doesn't exist already with a Dot Below, but
        I can only create it as

            q + .  (0071 + 0323)


---------------------  DECOMPOSITION

        It's the process that decomposes a char (i.e. a string)
        in its elements.
        Also pre-composed char are 'opened'
        ex
                 ḍ      (1E0D)             is opened as
                 d + .  (0064 + 0323)

        There are 2 ways to open (decompose)

        NFD     (opens in canonical/preserve mode)
           2⁵   (0032 + 2075)  =    2 (0032)  + ⁵ (2075)

        NFKD     (opens in compatibility/lose mode)
           2⁵   (0032 + 2075)  =    2 (0032)  + 5 (0035)



---------------------  COMPOSITION
        It's the process to 'close' an open string
        so if exist pre-composed chars they are used to compact
        ex

             d + .  (0064 + 0323)             is closed as
             ḍ      (1E0D)


             d + . +  ̇̇ (0064 + 0323 + 0307)   is closed as
             ḍ     +  ̇̇ (1E0D +        0307)


             the q doesn't have any precomposed so there is no way to close/compact
             these 3 any further:

             q + . +  ̇̇ (0071 + 0323 + 0307)

        ORDERING
             The composition respects ANYHOW ALSO AN ORDER
             so for example

             q +  ̇̇ + . (0071 + 0307 + 0323)  remains len 3  but the composition changes the ordering as
             q + . +  ̇̇ (0071 + 0323 + 0307)


---------------------  NORMALISATION

        it's the process to Decompose (open) and Re-compose (close)

        There is no difference in the COMPOSITION phase,
        so the NORMALISATION
             NFC  is the close of a string opened with canonical/preserve mode NFD
             NFKC is the same close of a string which was instead opened in compaitbility mode

             So here the journey of a 2⁵

                2⁵  --NFD -->   2 (0032)  + ⁵ (2075) --> NFC  2 (0032)  + ⁵ (2075)
                2⁵  --NFKD-->   2 (0032)  + 5 (0035) --> NFKC 2 (0032)  + 5 (0035)


        The normalizations will then compact the 3 below all into the 1st

                00C5 ( Å ) LATIN CAPITAL LETTER A WITH RING ABOVE  <-------------- this is the NFC one
                212B ( Å ) ANGSTROM SIGN
                0041 ( A ) LATIN CAPITAL LETTER A + U+030A ( ̊ ) COMBINING RING ABOVE


---------------------  STRING CONCATENATION

        Normalisation is not a closed operation on concatenation
        which means that if s1 & s2 are both normalized strings
        it's not guaranteed that s1.s2 (concatenation)
        is still normalized.
                ex
                     s1       d   (0064)      s2 . (0323)
                     s1.s2    d. (0064 0323)  is different from what obtaining normalizing it: ḍ  (1E0D)


  AGAIN:

  .-------------------------------------------------------------------
  |
  | If you have a string, in memory, in a file, or in an email message,
  | you have to know what ENCODING it is in or
  | you cannot interpret / display correctly.
  | There are over a hundred encodings and above code point 127 (ASCII), all bets are off.
  |
  '-------------------------------------------------------------------

   How do we preserve this information about what encoding a string uses?

   Luckily, almost every encoding in common use does the same thing with characters between 32 and 127.
   This means I can specify with basic ASCII some info that instructs how to decode the
   remaining part


   1.  For an email message, you are expected to have a string in the header of the form

            Content-Type: text/plain; charset="UTF-8"


   2.  For a HTML page
           <html>
                <head>
                <meta http-equiv="Content-Type" content="text/html; charset=utf-8">








---------------- Command line utils:

     echo -e "\x54\xCE\x95\x53\xD0\xA2\x45\x52\x2E\x74\x78\x74"
        TΕSТER.txt


     ______________________________________
     TO CONVERT FROM 1 ENCODING TO ANOTHER
     ______________________________________

     iconv                   iconv  [-f from-encoding] [-t to-encoding] [inputfile]
                             ex.
                                 echo 'abc ß ? € à?ç' | iconv -f UTF-8 -t ASCII//TRANSLIT


          -f   --from-encoding
          -t   --to-encoding
          -l   --list                     list all supported encodings
          -c                              Silently discard characters that cannot be converted instead of terminating
          -o xxxx   --output xxxx
          -verbose

                              iconv -f UTF-8 -t ASCII//TRANSLIT
                              iconv -l
                              iconv -f UTF-8 -t ASCII//TRANSLIT -o out.txt in.txt
                                                                           ^^^.^^^
                                                                              '- input file

     ______________________________________
     TEXT  <---------->  HEX/BIN
     ______________________________________


     xxd                    dumps in hex or binary
                            and even the reverse

                            note: any char different from the printable ASCII [0-9a-zA-Z.,;:'"[{=+-_........] are shown as (dot) .
                                  so the ASCII no printable part (included the new line \n) and any other unicode are shown '.'


                            NB. The numbers for the args (ex. -s or -l)
                                can be specified in
                                      decimal     -s 20
                                      hex         -s 0x14
                                      octal       -s 024
                                                                    Usage:
                                                                           xxd [options] [infile [outfile]]
                                                                        or
                                                                           xxd -r [-s [-]offset] [-c cols] [-ps] [infile [outfile]]
                                                                    Options:
                                                                        -a          toggle autoskip: A single '*' replaces nul-lines. Default off.
                                                                        -b          binary digit dump (incompatible with -ps,-i,-r). Default hex.
                                                                        -C          capitalize variable names in C include file style (-i).
                                                                        -c cols     format <cols> octets per line. Default 16 (-i: 12, -ps: 30).
                                                             ------>    -E          show characters in EBCDIC. Default ASCII.
                                                             ------>    -e          little-endian dump (incompatible with -ps,-i,-r).
                                                                        -g          number of octets per group in normal output. Default 2 (-e: 4).
                                                                        -h          print this summary.
                                                                        -i          output in C include file style.
                                                                        -l len      stop after <len> octets.
                                                             ------>    -o off      add <off> to the displayed file position.
                                                                        -ps         output in postscript plain hexdump style.
                                                                        -r          reverse operation: convert (or patch) hexdump into binary.
                                                                        -r -s off   revert with <off> added to file positions found in hexdump.
                                                             ------>    -d          show offset in decimal instead of hex.
                                                                        -s [+][-]seek  start at <seek> bytes abs. (or +: rel.) infile offset.
                                                                        -u          use upper case hex letters.
                                                                        -v          show version: "xxd V1.10 27oct98 by Juergen Weigert".



          ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd                                   # default hex
          00000000: 6161 610a 6262 620a 6363 630a 3131 310a  aaa.bbb.ccc.111.
          00000010: 3232 320a 3333 330a f09f 9880            222.333.....

          ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -s 4                              # start from byte 4
          00000004: 6262 620a 6363 630a 3131 310a 3232 320a  bbb.ccc.111.222.                   Note a negative number (-s -10) reads from the END
          00000014: 3333 330a f09f 9880                      333.....                           xxd -s -10 < a.txt
                                                                                                to dump LAST 10 bytes of a.txt


          ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -s 4 -l 6                         # from byte 4 for len 6 chars    (ex xxd -l 10 < a.txt
          00000004: 6262 620a 6363                           bbb.cc                                                             to dump FIRST 10 bytes of a.txt)

          ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd  -b                               # dump in binary
          00000000: 01100001 01100001 01100001 00001010 01100010 01100010  aaa.bb
          00000006: 01100010 00001010 01100011 01100011 01100011 00001010  b.ccc.
          0000000c: 00110001 00110001 00110001 00001010 00110010 00110010  111.22
          00000012: 00110010 00001010 00110011 00110011 00110011 00001010  2.333.
          00000018: 11110000 10011111 10011000 10000000                    ....

          ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -c 3                              # dump in 3 cols len    (INSTEAD OF THE DEFAULT 16 bytes / 8 cols of words)
          00000000: 6161 61  aaa
          00000003: 0a62 62  .bb
          00000006: 620a 63  b.c
          00000009: 6363 0a  cc.
          0000000c: 3131 31  111
          0000000f: 0a32 32  .22
          00000012: 320a 33  2.3
          00000015: 3333 0a  33.
          00000018: f09f 98  ...
          0000001b: 80       .

          ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -u                                # uppercase
          00000000: 6161 610A 6262 620A 6363 630A 3131 310A  aaa.bbb.ccc.111.
          00000010: 3232 320A 3333 330A F09F 9880            222.333.....

          ❯ xxd -i ttt                                                                        # read from file ttt and create C array & len
         unsigned char ttt[] = {
           0x61, 0x61, 0x61, 0x61, 0x61, 0x0a, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62,
           0x0a, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x0a
         };
         unsigned int ttt_len = 22;

         ❯ xxd -i < ttt                                                                       # sligthly different: no C code, only data in 0x style
           0x61, 0x61, 0x61, 0x61, 0x61, 0x0a, 0x62, 0x62, 0x62, 0x62, 0x62, 0x62,
           0x0a, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x63, 0x0a


         ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -i                                 # of course same of -i <
          0x61, 0x61, 0x61, 0x0a, 0x62, 0x62, 0x62, 0x0a, 0x63, 0x63, 0x63, 0x0a,
          0x31, 0x31, 0x31, 0x0a, 0x32, 0x32, 0x32, 0x0a, 0x33, 0x33, 0x33, 0x0a,
          0xf0, 0x9f, 0x98, 0x80

         ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -ps                                # postcript style   (also -p / -postcript / -plain)
          6161610a6262620a6363630a3131310a3232320a3333330af09f9880


         ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -g 0                              |  group 0 (no group)
          00000000: 6161610a6262620a6363630a3131310a  aaa.bbb.ccc.111.                       |
          00000010: 3232320a3333330af09f9880          222.333.....                           |
                                                                                             |
         ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -g 1                              |  group 1 (space every 1 byte)
          00000000: 61 61 61 0a 62 62 62 0a 63 63 63 0a 31 31 31 0a  aaa.bbb.ccc.111.        |
          00000010: 32 32 32 0a 33 33 33 0a f0 9f 98 80              222.333.....            |
                                                                                             |
         ❯ printf "aaa\nbbb\nccc\n111\n222\n333\n😀" | xxd -g 2                              |  group 2 (space every 2 bytes)
          00000000: 6161 610a 6262 620a 6363 630a 3131 310a  aaa.bbb.ccc.111.                |
          00000010: 3232 320a 3333 330a f09f 9880            222.333.....                    |

       ----------------- R E V E R S E

       the cool part is the option
                 -r
       which converts from the numbers to text
               printf "aaa\nbbb\nccc\n111\n222\n333><;:'\n😀\n" |  xxd | xxd -r
                aaa
                bbb
                ccc
                111
                222
                333><;:'
                😀

          If the 1st col with the offset is missing (so there is just the payload:

          THIS :
              6161 610a 6262 620a 6363 630a 3131 310a  aaa.bbb.ccc.111.
              3232 320a 3333 330a f09f 9880            222.333.....

          INSTEAD OF THIS :
              00000000: 6161 610a 6262 620a 6363 630a 3131 310a  aaa.bbb.ccc.111.
              00000010: 3232 320a 3333 330a f09f 9880            222.333.....

          )
          THEN I RUN:    > xxd -r -p      (-p stays for plain hex, so when I have just the payload hex values)

       ex. of use might be inside vi
           when opening a file of numbers
           where I just type:
                    :%!xxd -r

       ----------------- E D I T
       I can edit a file of numbers, ex:

          00000000: 61 61 61 0a 62 62 62 0a 63 63 63 0a 31 31 31 0a  aaa.bbb.ccc.111.
          00000010: 32 32 32 0a 33 33 33 0a f0 9f 98 80              222.333.....

       with a normal editor, preserving the cols (ex 16 byte cols or 8 word cols)
       and then reassemble with -r

       Ex, if there are "hidden" Unicode I can remove them
       ex.
           I have a file a.txt with the following line, where there is a bell sound (ASCII 07) between the o & r of Lorem
                  "Lorem ipsum dolor sit amet,"  ......

           > xxd a.txt
                    00000000: 4c6f 0772 656d 2069 7073 756d 2064 6f6c  Lo.rem ipsum dol
                                   ^^                                    ^
                                  07 ASCII bell sound                    |
                                                                       this is the non-printable byte (bell sound 07)


hexdump
hexedit
