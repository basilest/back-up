

     PIPELINES:  to build & publish libraries and services in Concourse





---------------------------------------------------


         Concourse:    C O N T I N U O U S  pipeline    (continuous thing-doer
                                                         continuous delivery
                                                         ....
                                                         )

         YAML ________ (start)------- pipeline                                 note the declarative feature
         file                             \                                    to stay in 1 YAML file
                                           \
                                             (task1) executed
                                             (task2) in ephemeral containers
                                             (task3) which are destroyed once done.

                                                     (so no STATE is kept
                                                      betweeen subsequent RUNS)


   RESOURCES      store data    (since concourse doesn't keep any STATE itself)
        \
         \_______ they have a TYPE  (ex. standard: GIT / AWS S3 / .... + I can create my own TYPES)



   TASKS
        \
         \_______ the smallest unit of execution (the scripts that run in a container)

   JOBS
        \
         \_______ is a collection of more TASKS  (a sequence of separate scripts)
                                  - t1  pull from git
                                  - t2  compile
                                  - t3  upload to S3
                                  - t4  send email/slack

   PIPELINE
        \
         \_______ a series of JOBS

   BUILDS
        \
         \_______ are the different executions of the same pipeline
                  which are logged and kept on the server for inspection / historical logs


--------------------------------------------------- CONCOURSE ARCHITECTURE
                3 parts:

              (1)  web nodes: are the BRAIN of Concourse and can be scaled on different servers
                              don't store any state
                              use the DB to retrieve any info

              (2)  worker nodes: are the executors.
                                 I can scale adding more workers to many pipelines

              (3)  postsgr SQL DB


                 (3)                        (1)      - Web UI
            [PostgreSQL] ------------  [ Web Nodes]  - API                    <----- Web Nodes
                                            |        - Pipeline scheduler
                                            |        - Worker registration
                                            |
                                            |
                                       [Worker Nodes] - Container Management API ----> Containers
                                           (2)        - Volume    Management API ----> Volumes

---------------------------------------------------
Concourse is distributed as a single concourse binary   (note: written in Go)

Images are pulled from docker hub by default


---------------------------------------------------   EDITOR - VISUAL STUDIO CODE
   A pipelines = YAML files ---> just 1 editor is OK

   VISUAL STUDIO CODE has a nice plugin callwd "Pivotal"

---------------------------------------------------   FLY  (Concourse CLI)

       install:
                  1 way:   copy 1 binary directly in /usr/local/bin

                  2 way:   package manager (brew install fly)

-------------- MORE VERSIONS:

            ╰─ fly -t platform-common teams
            fly version (7.1.0) is out of sync with the target (6.7.1). to sync up, run the following:

                fly -t platform-common sync

            cowardly refusing to run due to significant version discrepancy

      ╰─ which fly
      /usr/local/bin/fly


      /usr/local/bin/fly --version
      7.1.0

            ╰─ fly -t platform-common sync                  # <------- THIS IS GOING TO OVERWRITE MY SYSTEM MORE UPDATED 7.1.0 /usr/local/bin/fly <---- THIS WILL BECOME 6.7.1 !!!!!!!!!!
            downloading fly from https://ci.platform.aws.chdev.org...

            fly v6.7.1 [================================================] 52.0MiB/52.0MiB
            done

      /usr/local/bin/fly --version
      6.7.1 <------------------------------------------ NOTE

     It's then better to rename and link to have more and swap on the fly:

     ❯ ls -l /usr/local/bin/fly*

            lrwxr-xr-x  1 sbasile  admin        33 15 Jun 20:04 /usr/local/bin/fly -> /usr/local/Caskroom/fly/7.7.1/fly
            -rwxr-xr-x  1 sbasile  admin  54525092 15 Jun 20:13 /usr/local/bin/fly.6.7.1
            -rwxr-xr-x@ 1 sbasile  admin  66525872 15 Jun 20:07 /usr/local/bin/fly.7.7.1
            -rwxr-xr-x  1 sbasile  admin  69263392 15 Jun 23:26 /usr/local/bin/fly.7.8.1


-------------- ~/.flyrc

            ❯ bat ~/.flyrc
            ───────┬───────────────────────────────────────────────────────────
                   │ File: /Users/sbasile/.flyrc
                   │ Size: 491 B
            ───────┼───────────────────────────────────────────────────────────
               1   │ targets:
               2   │   platform-common:
               3   │     api: https://ci.platform.aws.chdev.org
               4   │     team: common
               5   │     token:
               6   │       type: bearer
               7   │       value: 5k9ZX3s2ADxpJJjGqkcm2kn63GAuf6tiAAAAAA
               8   │   platform-team-thundercats:
               9   │     api: https://ci.platform.aws.chdev.org
              10   │     team: team-thundercats
              11   │     token:
              12   │       type: bearer
              13   │       value: 5k9ZX3s2ADxpJJjGqkcm2kn63GAuf6tiAAAAAA
              14   │   tutorial:
              15   │     api: http://localhost:8080
              16   │     team: main
              17   │     token:
              18   │       type: bearer
              19   │       value: 3rA6sDj8RUzUgIIAP9s5qnSJ1coxrqtiAAAAAA
            ───────┴───────────────────────────────────────────────────────────

         This file shouldn't be edited by hand


-----------------------FLY cmds
         fly     targets
         fly -t platform-team-thundercats login -c https://ci.platform.aws.chdev.org/ -n team-thundercats
         fly -t platform-common status
         fly -t platform-common teams
         fly -t platform-team-thundercats get-pipeline -p efs-submission-api | vi -         # see yaml
         fly -t platform-common bs                                                          # builds      List builds data (aliases: bs)
         fly -t platform-common abort-build -b 59427                                        # abort a build (alias: ab)
         fly -t platform-common ps -a                                                       # list the configured pipelines (alias: ps) <---- better with option -a /  --all
         fly -t platform-common jobs  -p payment-reconciler                                 # get lists of jobs
-----------------------
         fly     targets

                                    $ fly targets
                                      name                       url                                team              expiry
                                      platform-common            https://ci.platform.aws.chdev.org  common            Wed, 23 Jun 2021 06:05:43 UTC    <----------- note the login token expiration time
                                      platform-team-thundercats  https://ci.platform.aws.chdev.org  team-thundercats  Wed, 23 Jun 2021 06:05:43 UTC
                                      tutorial                   http://127.0.0.1:8080              main              Sun, 30 Aug 2020 21:31:44 UTC

                 targets are just aliases to specify the pair info:
                                     - long URL (of concourse server)
                                     - team with which I'm authenticated.

                                      Any command must always specify a target:

                                             --target ... (or -t ...)
                                      It might seem annoying to always need to specify a target,
                                      but it helps ensure to not trigger a job on the wrong Concourse instance. It will save from hurting yourself


                 as targets are aliases I can specify what I want. ex:
                        fly -t platform-team-element  login -c https://ci.platform.aws.chdev.org -n team-element
                        fly -t tcc                    login -c https://ci.platform.aws.chdev.org -n team-element
                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
                                                            this is relevant part. The free chosen "tcc" shorter name
                                                            works like the longer 'platform-team-element' as they are both
                                                            just aliases
-----------------------
         fly -t <target>  login -c <concourse url> -n <team>  -b                   -n / --team-name

                                     fly -t tutorial               login --concourse-url http://127.0.0.1:8080 -u admin -p admin
                                     fly -t platform-common        login -c https://ci.platform.aws.chdev.org/ -n common        -b
                                     fly -t platform-team-aardvark login -c https://ci.platform.aws.chdev.org/ -n team-aardvark -b
                                     fly -t sandbox-development    login -c https://ci.sandbox.aws.chdev.org/  -n development   -b

                                     $ fly -t platform-team-thundercats login -c https://ci.platform.aws.chdev.org/ -n team-thundercats
                                     logging in to team 'team-thundercats'

                                     navigate to the following URL in your browser:

                                       https://ci.platform.aws.chdev.org/login?fly_port=53302

                                     or enter token manually (input hidden):
                                     target saved

                 if behind a proxy requiring client cert:
                                                            fly -t example login -c https://ci-example.com \
                                                                --client-cert ./client.pem \
                                                                --client-key ./client.key

                 If SSL url, but without a cert signed by a trusted CA, I can use the --ca-cert flag
                 so that fly can trust the connection, like so:

                                                            fly -t example login -c https://ci.example.com --ca-cert ./ca.crt

                 This will read ./ca.crt and save it into ~/.flyrc so I don't have to pass it on every login.


                            ───────┬──────────────────────────────────────────────────────              ❯ fly targets
                                   │ File: /Users/sbasile/.flyrc                                        name                       url                                team              expiry
                            ───────┼──────────────────────────────────────────────────────              common                     https://ci.platform.aws.chdev.org  common            Thu, 25 May 2023 22:18:11 UTC
                               1   │ targets:                                                           platform-common            https://ci.platform.aws.chdev.org  common            Sat, 06 May 2023 06:18:02 UTC
                               2   │   common:                                                          platform-development       https://ci.platform.aws.chdev.org  team-celestial    Thu, 16 Feb 2023 18:03:06 UTC
                               3   │     api: https://ci.platform.aws.chdev.org                         platform-team-aardvark     https://ci.platform.aws.chdev.org  team-aardvark     Thu, 25 May 2023 22:18:11 UTC
                               4   │     team: common                                                   platform-team-celestial    https://ci.platform.aws.chdev.org  team-celestial    Thu, 16 Feb 2023 18:03:06 UTC
                               5   │     token:                                                         platform-team-element      https://ci.platform.aws.chdev.org  team-element      Tue, 07 Mar 2023 21:50:31 UTC
                               6   │       type: bearer                                                 platform-team-thundercats  https://ci.platform.aws.chdev.org  team-thundercats  Fri, 18 Nov 2022 09:58:34 UTC
                               7   │       value: rM6FHwM79PjhhNgFf1+LS1Pwvimj3m9kAAAAAA                platform-team-tiny-rebels  https://ci.platform.aws.chdev.org  team-tiny-rebels  Wed, 05 Apr 2023 14:51:06 UTC
                               8   │   platform-common:                                                 ps1                        http://localhost:8080              main              Thu, 09 Mar 2023 23:13:40 UTC
                               9   │     api: https://ci.platform.aws.chdev.org                         sandbox-development        https://ci.sandbox.aws.chdev.org   development       Thu, 18 Aug 2022 21:38:19 UTC
                              10   │     team: common                                                   tcc                        https://ci.platform.aws.chdev.org  team-element      Tue, 07 Mar 2023 21:50:31 UTC
                              11   │     token:                                                         team-tiny-rebels           https://ci.platform.aws.chdev.org  team-tiny-rebels  Wed, 17 May 2023 09:53:54 UTC
                              12   │       type: bearer                                                 team-toro-loco             https://ci.platform.aws.chdev.org  team-toro-loco    Wed, 17 May 2023 09:53:54 UTC
                              13   │       value: v+hMrIcfCwrudLsst+wCEyG8rKga8VVkAAAAAA                tutorial                   http://localhost:8080              main              Tue, 23 Aug 2022 19:57:06 UTC
                              14   │   platform-development:                                                   ________________________________________________________________________________________________________________
                              15   │     api: https://ci.platform.aws.chdev.org                                IF I LOGIN FOR 1 TARGET AND I COPY OVER ITS NEW TOKEN TO THE OTHER TARGETS OF ci.platform.aws.chdev.org
                              16   │     team: team-celestial                                                  I CAN SEE THAT A NEXT   > fly targets  REPORTS THEM AS NOT EXPIRED.
                              17   │     token:                                                                ________________________________________________________________________________________________________________
                              18   │       type: bearer
                              19   │       value: cC+yMX9OJ/SVTBYqRmAtWId0v3/ab+5jAAAAAA
                              20   │   platform-team-aardvark:                                         ❯ fly targets
                              21   │     api: https://ci.platform.aws.chdev.org                        name                       url                                team              expiry
                              22   │     team: team-aardvark                                           common                     https://ci.platform.aws.chdev.org  common            Thu, 25 May 2023 22:18:11 UTC
                              23   │     token:                                                        platform-common            https://ci.platform.aws.chdev.org  common            Thu, 25 May 2023 22:18:11 UTC
                              24   │       type: bearer                                                platform-development       https://ci.platform.aws.chdev.org  team-celestial    Thu, 25 May 2023 22:18:11 UTC
                              25   │       value: rM6FHwM79PjhhNgFf1+LS1Pwvimj3m9kAAAAAA               platform-team-aardvark     https://ci.platform.aws.chdev.org  team-aardvark     Thu, 25 May 2023 22:18:11 UTC
                              26   │   platform-team-celestial:                                        platform-team-celestial    https://ci.platform.aws.chdev.org  team-celestial    Thu, 25 May 2023 22:18:11 UTC
                              27   │     api: https://ci.platform.aws.chdev.org                        platform-team-element      https://ci.platform.aws.chdev.org  team-element      Thu, 25 May 2023 22:18:11 UTC
                              28   │     team: team-celestial                                          platform-team-thundercats  https://ci.platform.aws.chdev.org  team-thundercats  Thu, 25 May 2023 22:18:11 UTC
                              29   │     token:                                                        platform-team-tiny-rebels  https://ci.platform.aws.chdev.org  team-tiny-rebels  Thu, 25 May 2023 22:18:11 UTC
                              30   │       type: bearer                                                ps1                        http://localhost:8080              main              Thu, 09 Mar 2023 23:13:40 UTC
                              31   │       value: cC+yMX9OJ/SVTBYqRmAtWId0v3/ab+5jAAAAAA               sandbox-development        https://ci.sandbox.aws.chdev.org   development       Thu, 25 May 2023 22:18:11 UTC
                              32   │   platform-team-element:                                          tcc                        https://ci.platform.aws.chdev.org  team-element      Thu, 25 May 2023 22:18:11 UTC
                              33   │     api: https://ci.platform.aws.chdev.org                        team-tiny-rebels           https://ci.platform.aws.chdev.org  team-tiny-rebels  Thu, 25 May 2023 22:18:11 UTC
                              34   │     team: team-element                                            team-toro-loco             https://ci.platform.aws.chdev.org  team-toro-loco    Thu, 25 May 2023 22:18:11 UTC
                              35   │     token:                                                        tutorial                   http://localhost:8080              main              Tue, 23 Aug 2022 19:57:06 UTC
                              36   │       type: bearer
                              37   │       value: TCKhMJQlfE9qrumAZNIMakoA82ansQdkAAAAAA
                              38   │   platform-team-thundercats:
                              39   │     api: https://ci.platform.aws.chdev.org
                              40   │     team: team-thundercats
                              41   │     token:
                              42   │       type: bearer
                              43   │       value: 8EqLfX8eSo/4TC4ZWNlfgz6qLORKV3djAAAAAA
                              44   │   platform-team-tiny-rebels:
                              45   │     api: https://ci.platform.aws.chdev.org
                              46   │     team: team-tiny-rebels
                              47   │     token:
                              48   │       type: bearer
                              49   │       value: qPd8G2oDEWENI/JO2ch02y6qbj3aii1kAAAAAA
                              50   │   ps1:
                              51   │     api: http://localhost:8080
                              52   │     team: main
                              53   │     token:
                              54   │       type: bearer
                              55   │       value: BWZ9j67pvwsMJkDBtBUcByBCeWgkaApkAAAAAA
                              56   │   sandbox-development:
                              57   │     api: https://ci.sandbox.aws.chdev.org
                              58   │     team: development
                              59   │     token:
                              60   │       type: bearer
                              61   │       value: 8yetVPrufBPjPBoLViZ5+JJRMHVLsf5iAAAAAA
                              62   │   tcc:
                              63   │     api: https://ci.platform.aws.chdev.org
                              64   │     team: team-element
                              65   │     token:
                              66   │       type: bearer
                              67   │       value: TCKhMJQlfE9qrumAZNIMakoA82ansQdkAAAAAA
                              68   │   team-tiny-rebels:
                              69   │     api: https://ci.platform.aws.chdev.org
                              70   │     team: team-tiny-rebels
                              71   │     token:
                              72   │       type: bearer
                              73   │       value: 1Gj/VLJN8IDSEbRznSkDoTavxgUypGRkAAAAAA
                              74   │   team-toro-loco:
                              75   │     api: https://ci.platform.aws.chdev.org
                              76   │     team: team-toro-loco
                              77   │     token:
                              78   │       type: bearer
                              79   │       value: 1Gj/VLJN8IDSEbRznSkDoTavxgUypGRkAAAAAA
                              80   │   tutorial:
                              81   │     api: http://localhost:8080
                              82   │     team: main
                              83   │     token:
                              84   │       type: bearer
                              85   │       value: lkn0OAu/ze2GREWVtoiif7j5IQUSMQVjAAAAAA



-----------------------
         fly -t <target>  logout                  # I explicitly logout from a target, without waiting for the token to expiry in 1 day.
         fly              logout -a               # logout from all accounts
-----------------------
         fly -t example delete-target                   to remove a target from ~/.flyrc b
         fly delete-target -a                           To delete all targets


-----------------------
         fly completion --shell bash    to dump the autocompletion for the desired shell.

                                     $ source <(fly completion --shell bash)
                                     $ source <(fly completion --shell zsh)


-----------------------
         fly -t platform-common status      #  Login status

                                     $ fly -t platform-common status
                                       logged in successfully

-----------------------
         fly -t platform-common userinfo

                                     $ fly -t platform-common userinfo|tr ',' '\n'
                                     $ fly -t platform-common userinfo|sed -e 's/,/\
                                       pipe quote>                /g'

                                            sbasile  common/member
                                                           live/member
                                                           service-chips/pipeline-operator
                                                           service-chips/viewer
                                                           service-chl/pipeline-operator
                                                           service-chl/viewer
                                                           team-aardvark/pipeline-operator
                                                           team-aardvark/viewer
                                                           team-amido/pipeline-operator
                                                           team-amido/viewer
                                                           team-apollo/pipeline-operator
                                                           team-apollo/viewer
                                                           team-architects/pipeline-operator
                                                           team-architects/viewer
                                                           team-celestial/pipeline-operator
                                                           team-celestial/viewer
                                                           team-csi/pipeline-operator
                                                           team-csi/viewer
                                                           team-datascience/pipeline-operator
                                                           team-datascience/viewer
                                                           team-dsai/pipeline-operator
                                                           team-dsai/viewer
                                                           team-harmonia/pipeline-operator
                                                           team-harmonia/viewer
                                                           team-infrastructure/pipeline-operator
                                                           team-infrastructure/viewer
                                                           team-pa/pipeline-operator
                                                           team-pa/viewer
                                                           team-performance-analysis/viewer
                                                           team-phoenix/pipeline-operator
                                                           team-phoenix/viewer
                                                           team-platform/pipeline-operator
                                                           team-platform/viewer
                                                           team-spartacus/pipeline-operator
                                                           team-spartacus/viewer
                                                           team-synergy/pipeline-operator
                                                           team-synergy/viewer
                                                           team-thunderbirds/member
                                                           team-thunderbirds/pipeline-operator
                                                           team-thunderbirds/viewer
                                                           team-thundercats/pipeline-operator
                                                           team-thundercats/viewer
                                                           team-tiny-rebels/pipeline-operator
                                                           team-tiny-rebels/viewer
                                                           team-titans/pipeline-operator
                                                           team-titans/viewer
                                                           team-toro-loco/pipeline-operator
                                                           team-toro-loco/viewer
                                                           team-ucd/pipeline-operator
                                                           team-ucd/viewer


-----------------------
         fly -t platform-common teams                 # teams List the configured teams (alias: t)

                                     $ fly -t platform-common teams                 # teams List the configured teams (alias: t)
                                       name
                                       common
                                       live
                                       team-aardvark
                                       team-amido
                                       team-apollo
                                       team-architects
                                       team-celestial
                                       team-csi
                                       team-dsai
                                       team-harmonia
                                       team-infrastructure
                                       team-pa
                                       team-phoenix
                                       team-platform
                                       team-spartacus
                                       team-synergy
                                       team-thunderbirds
                                       team-thundercats
                                       team-tiny-rebels
                                       team-titans
                                       team-toro-loco
-----------------------
         fly -t platform-team-thundercats get-pipeline -p efs-submission-api | vi -         # see yaml

                                     $ fly -t platform-team-thundercats get-pipeline -p efs-submission-api

                                          ...<---- ALL THE YAML WILL BE SHOWN HERE
-----------------------
         fly -t platform-common bs      # builds      List builds data (aliases: bs)

                                     $ fly -t platform-common bs

                                     id     pipeline/job                                              build  status     start                     end                       duration   team
                                     59449  chs-delta-api/cidev-api-tests                             1      started    2021-06-17@11:43:17+0100  n/a                       1m53s+     team-aardvark
                                     59448  ois-tuxedo-configs/build-staging-configs                  1      started    2021-06-17@11:43:14+0100  n/a                       1m56s+     team-platform
                                     59447  chs-delta-api/aard1-api-tests                             1      started    2021-06-17@11:43:51+0100  n/a                       1m19s+     team-aardvark
                                     59446  company-search-consumer/apollo1                           2      started    2021-06-17@11:42:22+0100  n/a                       2m48s+     team-apollo
                                     59445  company-search-consumer/cidev                             2      started    2021-06-17@11:42:22+0100  n/a                       2m48s+     team-apollo
                                     59444  search.api.ch.gov.uk/apollo1-api-tests                    46     succeeded  2021-06-17@11:42:21+0100  2021-06-17@11:44:43+0100  2m22s      team-apollo
                                     59443  search.api.ch.gov.uk/apollo1                              64     succeeded  2021-06-17@11:41:19+0100  2021-06-17@11:41:58+0100  39s        team-apollo
                                     59442  search.api.ch.gov.uk/docker-build                         59     started    2021-06-17@11:41:19+0100  n/a                       3m51s+     team-apollo
                                     59441  search.api.ch.gov.uk/release                              59     succeeded  2021-06-17@11:37:23+0100  2021-06-17@11:41:16+0100  3m53s      team-apollo
                                     59440  company-search-consumer/release                           2      succeeded  2021-06-17@11:37:23+0100  2021-06-17@11:42:08+0100  4m45s      team-apollo
                                     59439  data-reconciliation/analyse-pull-request                  71     succeeded  2021-06-17@11:35:09+0100  2021-06-17@11:39:16+0100  4m7s       team-thunderbirds
                                     59438  efs-submission-web/analyse-pull-request                   55     succeeded  2021-06-17@11:34:24+0100  2021-06-17@11:40:12+0100  5m48s      team-thundercats
                                     59437  search.api.ch.gov.uk/test-analyse                         62     succeeded  2021-06-17@11:34:23+0100  2021-06-17@11:37:06+0100  2m43s      team-apollo
                                     59436  company-search-consumer/build-test-analyse                2      succeeded  2021-06-17@11:33:40+0100  2021-06-17@11:37:04+0100  3m24s      team-apollo
                                     59435  efs-submission-api/analyse-pull-request                   71     succeeded  2021-06-17@11:31:00+0100  2021-06-17@11:35:33+0100  4m33s      team-thundercats
                                     59434  efs-submission-api/api-tests                              45     succeeded  2021-06-17@11:30:50+0100  2021-06-17@11:32:07+0100  1m17s      team-thundercats
                                     59433  chs-delta-api/cidev                                       7      succeeded  2021-06-17@11:29:52+0100  2021-06-17@11:30:36+0100  44s        team-aardvark
                                     59432  chs-delta-api/api-tests                                   1      succeeded  2021-06-17@11:26:58+0100  2021-06-17@11:29:44+0100  2m46s      team-aardvark
                                     59431  chs-configs/synchronise-to-s3                             497    succeeded  2021-06-17@11:25:49+0100  2021-06-17@11:28:04+0100  2m15s      common
                                     59430  artifact-adminsites/build-ewfadmin-artifact               1      failed     2021-06-17@11:17:32+0100  2021-06-17@11:20:40+0100  3m8s       team-infrastructure
                                     59429  efs-submission-web/analyse-pull-request                   54     succeeded  2021-06-17@11:16:09+0100  2021-06-17@11:21:05+0100  4m56s      team-thundercats
                                     59428  efs-submission-web/analyse-pull-request                   53     succeeded  2021-06-17@10:43:35+0100  2021-06-17@10:49:42+0100  6m7s       team-thundercats
                                     59427  ewf-terraform/staging-plan                                130    pending    n/a                       n/a                       n/a        team-infrastructure
                                     59426  api-sdk-node/release                                      63     succeeded  2021-06-17@10:02:42+0100  2021-06-17@10:06:17+0100  3m35s      common
                                     59425  api-sdk-node/unit-testing                                 46     succeeded  2021-06-17@10:01:16+0100  2021-06-17@10:02:30+0100  1m14s      common
                                     59424  api-sdk-node/security-check                               32     succeeded  2021-06-17@10:01:16+0100  2021-06-17@10:01:40+0100  24s        common
                                     59416  data-reconciliation/analyse-pull-request                  70     succeeded  2021-06-17@09:37:54+0100  2021-06-17@09:44:10+0100  6m16s      team-thunderbirds
                                     59415  data-reconciliation/analyse-pull-request                  69     succeeded  2021-06-17@09:30:42+0100  2021-06-17@09:34:42+0100  4m0s       team-thunderbirds
                                     59412  data-reconciliation/analyse-pull-request                  68     failed     2021-06-17@09:26:08+0100  2021-06-17@09:29:52+0100  3m44s      team-thunderbirds
                                     59411  efs-submission-web/automation-tests                       24     started    2021-06-17@09:25:58+0100  n/a                       2h19m12s+  team-thundercats
                                     59410  efs-submission-web/docker-build                           31     succeeded  2021-06-17@09:25:18+0100  2021-06-17@09:27:09+0100  1m51s      team-thundercats
                                     59409  efs-submission-web/tcats1                                 43     succeeded  2021-06-17@09:25:18+0100  2021-06-17@09:25:49+0100  31s        team-thundercats
                                     59407  efs-submission-web/release                                44     succeeded  2021-06-17@09:20:20+0100  2021-06-17@09:25:09+0100  4m49s      team-thundercats
                                     59404  efs-submission-web/test-analyse                           45     succeeded  2021-06-17@09:14:51+0100  2021-06-17@09:20:10+0100  5m19s      team-thundercats
                                     59403  api-sdk-node/pull-request-analysis                        154    succeeded  2021-06-17@09:14:25+0100  2021-06-17@09:17:21+0100  2m56s      common
                                     59402  data-reconciliation/tbirds1-apply                         55     succeeded  2021-06-17@09:10:58+0100  2021-06-17@09:11:17+0100  19s        team-thunderbirds
                                     59401  data-reconciliation/tbirds1-plan                          65     succeeded  2021-06-17@09:09:21+0100  2021-06-17@09:10:57+0100  1m36s      team-thunderbirds
                                     59400  data-reconciliation/release                               29     succeeded  2021-06-17@09:03:13+0100  2021-06-17@09:09:07+0100  5m54s      team-thunderbirds
                                     59399  extensions-web/vulnerability-audit                        323    failed     2021-06-17@09:02:37+0100  2021-06-17@09:05:08+0100  2m31s      team-toro-loco
                                     59398  file-transfer-api/vulnerability-audit                     295    failed     2021-06-17@09:01:22+0100  2021-06-17@09:05:23+0100  4m1s       common
                                     59397  ch.gov.uk/cidev                                           44     succeeded  2021-06-17@09:00:19+0100  2021-06-17@09:00:53+0100  34s        common
                                     59396  ch.gov.uk/cidev                                           43     aborted    n/a                       2021-06-17@09:00:19+0100  n/a        common
                                     59395  ch-account-ui/system-test-dev                             44     failed     2021-06-17@08:55:43+0100  2021-06-17@09:01:49+0100  6m6s       team-amido
                                     59394  ch-account-ui/development-deploy                          83     succeeded  2021-06-17@08:55:03+0100  2021-06-17@08:55:33+0100  30s        team-amido
                                     59393  data-reconciliation/build-test-analyse                    30     succeeded  2021-06-17@08:54:56+0100  2021-06-17@09:02:38+0100  7m42s      team-thunderbirds
                                     59392  ch-account-ui/development-apply                           77     succeeded  2021-06-17@08:54:23+0100  2021-06-17@08:54:50+0100  27s        team-amido
                                     59391  ch-account-ui/development-build                           82     succeeded  2021-06-17@08:50:20+0100  2021-06-17@08:54:07+0100  3m47s      team-amido
                                     59390  ch-account-ui/development-plan                            79     succeeded  2021-06-17@08:48:17+0100  2021-06-17@08:50:16+0100  1m59s      team-amido
                                     59389  ch-account-ui/testing                                     92     succeeded  2021-06-17@08:44:22+0100  2021-06-17@08:48:10+0100  3m48s      team-amido
                                     59388  applications.api.identity.ch.gov.uk/analyse-pull-request  147    succeeded  2021-06-17@08:28:30+0100  2021-06-17@08:32:54+0100  4m24s      team-celestial

         fly -t platform-common bs  -p payment-reconciler

                                     $ fly -t platform-common bs  -p payment-reconciler

                                     id     pipeline/job                           build  status     start                     end                       duration  team
                                     36879  payment-reconciler/staging-plan        6      pending    n/a                       n/a                       n/a       common
                                     36875  payment-reconciler/staging-plan        5      pending    n/a                       n/a                       n/a       common
                                     35761  payment-reconciler/cidev-apply         7      succeeded  2020-11-02@15:26:49+0000  2020-11-02@15:27:46+0000  57s       common
                                     35758  payment-reconciler/cidev-plan          7      succeeded  2020-11-02@15:24:58+0000  2020-11-02@15:26:01+0000  1m3s      common
                                     35735  payment-reconciler/rebel1-apply        3      succeeded  2020-11-02@14:27:37+0000  2020-11-02@14:28:29+0000  52s       common
                                     35733  payment-reconciler/rebel1-plan         4      succeeded  2020-11-02@14:21:56+0000  2020-11-02@14:23:30+0000  1m34s     common
                                     35730  payment-reconciler/cidev-apply         6      succeeded  2020-11-02@14:06:13+0000  2020-11-02@14:07:03+0000  50s       common
                                     35729  payment-reconciler/cidev-plan          6      succeeded  2020-11-02@14:04:43+0000  2020-11-02@14:06:11+0000  1m28s     common
                                     35728  payment-reconciler/release             7      succeeded  2020-11-02@14:02:13+0000  2020-11-02@14:04:41+0000  2m28s     common
                                     35726  payment-reconciler/build-test-analyse  10     succeeded  2020-11-02@14:00:22+0000  2020-11-02@14:02:12+0000  1m50s     common
                                     35600  payment-reconciler/rebel1-apply        2      succeeded  2020-11-02@09:17:13+0000  2020-11-02@09:18:16+0000  1m3s      common
                                     35596  payment-reconciler/rebel1-plan         3      succeeded  2020-11-02@09:14:33+0000  2020-11-02@09:16:13+0000  1m40s     common
                                     35555  payment-reconciler/cidev-apply         5      succeeded  2020-10-30@14:34:14+0000  2020-10-30@14:34:45+0000  31s       common
                                     35554  payment-reconciler/cidev-plan          5      succeeded  2020-10-30@14:33:04+0000  2020-10-30@14:34:05+0000  1m1s      common
                                     35553  payment-reconciler/release             6      succeeded  2020-10-30@14:31:13+0000  2020-10-30@14:32:59+0000  1m46s     common
                                     35552  payment-reconciler/build-test-analyse  9      succeeded  2020-10-30@14:29:53+0000  2020-10-30@14:31:06+0000  1m13s     common
                                     35273  payment-reconciler/cidev-apply         4      succeeded  2020-10-29@14:48:41+0000  2020-10-29@14:49:21+0000  40s       common
                                     35272  payment-reconciler/cidev-plan          4      succeeded  2020-10-29@14:47:40+0000  2020-10-29@14:48:38+0000  58s       common
                                     35271  payment-reconciler/release             5      succeeded  2020-10-29@14:45:50+0000  2020-10-29@14:47:39+0000  1m49s     common
                                     35270  payment-reconciler/build-test-analyse  8      succeeded  2020-10-29@14:45:00+0000  2020-10-29@14:45:44+0000  44s       common
                                     35269  payment-reconciler/build-test-analyse  7      failed     2020-10-29@14:43:50+0000  2020-10-29@14:44:22+0000  32s       common
                                     35248  payment-reconciler/build-test-analyse  6      failed     2020-10-29@14:13:43+0000  2020-10-29@14:14:26+0000  43s       common
                                     34780  payment-reconciler/build-test-analyse  5      failed     2020-10-28@09:33:33+0000  2020-10-28@09:34:51+0000  1m18s     common
                                     31970  payment-reconciler/rebel1-apply        1      succeeded  2020-10-12@15:31:45+0100  2020-10-12@15:35:09+0100  3m24s     common
                                     31969  payment-reconciler/cidev-apply         3      succeeded  2020-10-12@15:29:35+0100  2020-10-12@15:30:04+0100  29s       common
                                     31967  payment-reconciler/rebel1-plan         2      succeeded  2020-10-12@15:28:15+0100  2020-10-12@15:29:22+0100  1m7s      common
                                     31966  payment-reconciler/cidev-plan          3      succeeded  2020-10-12@15:28:05+0100  2020-10-12@15:29:31+0100  1m26s     common
                                     31964  payment-reconciler/release             4      succeeded  2020-10-12@15:26:14+0100  2020-10-12@15:28:03+0100  1m49s     common
                                     31963  payment-reconciler/build-test-analyse  4      succeeded  2020-10-12@15:25:24+0100  2020-10-12@15:26:08+0100  44s       common
                                     31962  payment-reconciler/rebel1-plan         1      failed     2020-10-12@15:23:54+0100  2020-10-12@15:24:59+0100  1m5s      common
                                     26677  payment-reconciler/staging-apply       3      succeeded  2020-09-01@16:58:48+0100  2020-09-01@16:59:18+0100  30s       common
                                     26676  payment-reconciler/staging-plan        4      succeeded  2020-09-01@16:57:07+0100  2020-09-01@16:58:30+0100  1m23s     common
                                     26675  payment-reconciler/cidev-apply         2      succeeded  2020-09-01@16:55:27+0100  2020-09-01@16:55:50+0100  23s       common
                                     26672  payment-reconciler/cidev-plan          2      succeeded  2020-09-01@16:54:27+0100  2020-09-01@16:55:23+0100  56s       common
                                     26669  payment-reconciler/release             3      succeeded  2020-09-01@16:52:07+0100  2020-09-01@16:54:20+0100  2m13s     common
                                     26668  payment-reconciler/build-test-analyse  3      succeeded  2020-09-01@16:51:16+0100  2020-09-01@16:52:00+0100  44s       common
                                     26663  payment-reconciler/staging-apply       2      succeeded  2020-09-01@16:39:25+0100  2020-09-01@16:39:43+0100  18s       common
                                     26662  payment-reconciler/staging-apply       1.2    aborted    n/a                       2020-09-01@16:39:15+0100  n/a       common
                                     26658  payment-reconciler/staging-apply       1.1    failed     2020-09-01@16:37:04+0100  2020-09-01@16:37:47+0100  43s       common
                                     26652  payment-reconciler/staging-apply       1      failed     2020-09-01@16:05:50+0100  2020-09-01@16:06:12+0100  22s       common
                                     26659  payment-reconciler/staging-plan        3.1    succeeded  2020-09-01@16:38:14+0100  2020-09-01@16:39:04+0100  50s       common
                                     26651  payment-reconciler/staging-plan        3      succeeded  2020-09-01@16:04:20+0100  2020-09-01@16:05:16+0100  56s       common
                                     26645  payment-reconciler/staging-plan        2.1    failed     2020-09-01@15:22:21+0100  2020-09-01@15:22:35+0100  14s       common
                                     26617  payment-reconciler/staging-plan        2      failed     2020-09-01@13:43:46+0100  2020-09-01@13:44:14+0100  28s       common
                                     26605  payment-reconciler/staging-plan        1.2    failed     2020-09-01@13:29:44+0100  2020-09-01@13:30:14+0100  30s       common
                                     26592  payment-reconciler/staging-plan        1.1    failed     2020-09-01@13:20:33+0100  2020-09-01@13:20:59+0100  26s       common
                                     26591  payment-reconciler/staging-plan        1      failed     2020-09-01@13:14:22+0100  2020-09-01@13:15:15+0100  53s       common
                                     26590  payment-reconciler/cidev-apply         1      succeeded  2020-09-01@13:13:22+0100  2020-09-01@13:13:54+0100  32s       common
                                     26589  payment-reconciler/cidev-plan          1      succeeded  2020-09-01@13:11:52+0100  2020-09-01@13:13:13+0100  1m21s     common
                                     26588  payment-reconciler/release             2      succeeded  2020-09-01@13:09:31+0100  2020-09-01@13:11:50+0100  2m19s     common


-----------------------
         fly -t platform-common abort-build -b 59427     # abort a build (alias: ab)

                                     $ fly -t platform-common abort-build -b 59427  #  abort-build     Abort a build (alias: ab)
                                       build successfully aborted

                                     $ fly -t platform-common ab  --job payment-reconciler/staging-plan --build 5


-----------------------
         fly -t platform-common ps -a              # list the configured pipelines (alias: ps) <---- better with option -a /  --all
         fly -t platform-common pipelines -a

                                     $ fly -t platform-common ps -a

                                         name                                          team                       paused  public  last updated
                                         account.ch.gov.uk                             common                     no      yes     2022-07-28 15:54:07 +0100 BST
                                         account.ch.gov.uk-deps                        common                     no      yes     2020-11-13 08:59:00 +0000 GMT
                                         alpha-key-library                             common                     no      yes     2020-10-08 16:03:24 +0100 BST
                                         api-sdk-go                                    common                     no      yes     2020-11-13 08:59:49 +0000 GMT
                                         api-sdk-java                                  common                     no      yes     2020-11-13 09:00:08 +0000 GMT
                                         api-sdk-node                                  common                     no      yes     2022-07-06 10:53:06 +0100 BST
                                         api-security-java                             common                     no      yes     2020-11-13 09:01:24 +0000 GMT
                                         api.ch.gov.uk                                 common                     no      yes     2022-01-11 15:24:27 +0000 GMT
                                         api.ch.gov.uk-deps                            common                     no      yes     2021-07-21 09:18:19 +0100 BST
                                         barcode-generator                             common                     no      yes     2022-01-05 16:26:45 +0000 GMT
                                         cdn.ch.gov.uk                                 common                     no      yes     2021-10-08 15:39:46 +0100 BST
                                         ch-kafka                                      common                     no      yes     2020-11-13 09:02:12 +0000 GMT
                                         ...
                                         uri-web                                       common                     no      yes     2020-11-13 09:35:03 +0000 GMT
                                         web-security-java                             common                     no      yes     2020-11-13 09:35:28 +0000 GMT
                                         web-security-node                             common                     no      yes     2021-05-17 13:24:12 +0100 BST
                                         webhook-token-generator                       common                     no      yes     2020-09-03 09:25:53 +0100 BST
                                         matomo-build                                  live                       yes     yes     2021-09-08 08:29:58 +0100 BST
                                         psc-discrepancy-parser                        live                       no      yes     2021-12-22 13:46:36 +0000 GMT
                                         chips-e2e-test-pipeline                       service-chips              no      yes     2022-07-29 15:43:41 +0100 BST
                                         chips-sonar-analysis                          service-chips              no      yes     2022-05-12 15:32:31 +0100 BST
                                         abridged.accounts.api.ch.gov.uk               team-aardvark              no      yes     2021-04-13 14:25:32 +0100 BST
                                         abridged.accounts.web.ch.gov.uk               team-aardvark              no      yes     2021-04-13 14:33:37 +0100 BST
                                         ...
                                         lfp-pay-api-core                              team-aardvark              yes     yes     2021-04-14 08:01:17 +0100 BST
                                         ch-account-ui                                 team-amido                 no      yes     2022-02-17 14:45:02 +0000 GMT
                                         ...
                                         ch-bcrypt-hash-generate                       team-amido                 no      yes     2022-01-27 11:53:56 +0000 GMT
                                         certificates.orders.api.ch.gov.uk             team-apollo                no      yes     2022-03-01 11:04:42 +0000 GMT
                                         ...
                                         search.web.ch.gov.uk                          team-apollo                no      yes     2021-11-12 08:12:04 +0000 GMT
                                         applications.api.identity.ch.gov.uk           team-celestial             no      yes     2021-01-22 10:46:35 +0000 GMT
                                         ...
                                         psc-discrepancies.web.ch.gov.uk               team-celestial             yes     yes     2021-10-15 08:08:37 +0100 BST
                                         ami-docker                                    team-csi                   no      yes     2021-06-24 11:23:59 +0100 BST
                                         ...
                                         staffware-web-admin                           team-csi                   no      yes     2022-08-09 17:41:24 +0100 BST
                                         do-success                                    team-datascience           no      no      2021-11-12 14:35:39 +0000 GMT
                                         bcrypt-hash-check                             team-harmonia              no      yes     2022-01-13 12:05:33 +0000 GMT
                                         ...
                                         transaction-search-tool                       team-harmonia              no      yes     2022-01-10 09:38:50 +0000 GMT
                                         admin-sites-terraform                         team-infrastructure        no      yes     2022-02-09 08:39:02 +0000 GMT
                                         ...
                                         ais-tuxedo-stack                              team-infrastructure        no      yes     2022-07-14 11:00:05 +0100 BST
                                         ivp2-tesseract-poc                            team-pa                    yes     yes     2020-09-25 10:23:55 +0100 BST
                                         ...
                                         tesseract-base-image                          team-pa                    no      yes     2021-08-19 11:31:27 +0100 BST
                                         ami-metrics-platform                          team-performance-analysis  yes     no      2021-11-11 11:28:04 +0000 GMT
                                         ...
                                         performance-analysis-artifact                 team-performance-analysis  no      yes     2022-02-09 09:46:33 +0000 GMT
                                         dissolution-api                               team-phoenix               no      yes     2022-08-09 12:03:18 +0100 BST
                                         ...
                                         payments.web.ch.gov.uk                        team-phoenix               no      yes     2021-10-01 12:28:57 +0100 BST
                                         advanced-search-terraform                     team-platform              no      yes     2021-11-23 13:07:03 +0000 GMT
                                         ...
                                         zookeeper-ami                                 team-platform              no      yes     2022-02-17 14:45:18 +0000 GMT
                                         bris-api                                      team-spartacus             no      yes     2020-11-18 16:53:07 +0000 GMT
                                         ...
                                         user.web.identity.ch.gov.uk                   team-spartacus             no      yes     2020-11-18 16:52:09 +0000 GMT
                                         afd-chips-image-service                       team-thunderbirds          yes     no      2020-12-14 11:51:13 +0000 GMT
                                         ...
                                         admin.orders.web.ch.gov.uk                    team-thunderbirds          no      no      2022-07-28 12:30:08 +0100 BST
                                         configurable-api-caller-terraform             team-thundercats           no      yes     2021-10-15 10:08:46 +0100 BST
                                         ...
                                         tpa-register-api                              team-thundercats           no      yes     2022-07-13 15:26:05 +0100 BST
                                         cdn-rebel1                                    team-tiny-rebels           no      yes     2020-09-08 10:47:23 +0100 BST
                                         ...
                                         suppression-web                               team-tiny-rebels           no      yes     2020-12-22 10:03:53 +0000 GMT
                                         bankrupt-officer-search-api                   team-titans                no      yes     2021-06-01 09:44:26 +0100 BST
                                         ...
                                         strike-off-objections-web                     team-titans                no      yes     2021-06-02 10:11:23 +0100 BST
                                         chips-rest-interfaces-consumer                team-toro-loco             no      yes     2022-06-17 11:41:45 +0100 BST
                                         ...
                                         register-an-overseas-entity-web               team-toro-loco             yes     no      2022-03-14 10:29:49 +0000 GMT
                                         promo-artifact-build-deploy                   team-ucd                   no      yes     2022-02-09 08:48:13 +0000 GMT
                                         aws-dsr-infrastructure-terraform              secure                     no      yes     2022-01-12 15:07:11 +0000 GMT

-----------------------
         fly -t platform-common jobs  -p payment-reconciler        # get lists of jobs

                                     $ fly -t platform-common jobs  -p payment-reconciler
                                       name                paused  status     next
                                       create-webhooks     no      succeeded  n/a
                                       delete-webhooks     no      n/a        n/a
                                       build-test-analyse  no      succeeded  n/a
                                       release             no      succeeded  n/a
                                       cidev-plan          no      succeeded  n/a
                                       cidev-apply         no      succeeded  n/a
                                       cidev-destroy       no      n/a        n/a
                                       aard1-plan          no      n/a        n/a
                                       aard1-apply         no      n/a        n/a
                                       aard1-destroy       no      n/a        n/a
                                       apollo1-plan        no      n/a        n/a
                                       apollo1-apply       no      n/a        n/a
                                       apollo1-destroy     no      n/a        n/a
                                       tcats1-plan         no      n/a        n/a
                                       tcats1-apply        no      n/a        n/a
                                       tcats1-destroy      no      n/a        n/a
                                       staging-plan        no      succeeded  pending
                                       staging-apply       no      succeeded  n/a
                                       staging-destroy     no      n/a        n/a
                                       rebel1-plan         no      succeeded  n/a
                                       rebel1-apply        no      succeeded  n/a
                                       rebel1-destroy      no      n/a        n/a
-----------------------
        fly -t platform-team-aardvark workers
                                        name             containers  platform  tags  team  state    version  age
                                        ip-10-50-17-115  127         linux     none  none  running  2.2      201d
                                        ip-10-50-17-116  165         linux     none  none  running  2.2      201d
                                        ip-10-50-17-119  158         linux     none  none  running  2.2      201d
                                        ip-10-50-17-155  137         linux     none  none  running  2.2      201d
                                        ip-10-50-17-172  157         linux     none  none  running  2.2      201d
                                        ip-10-50-17-19   149         linux     none  none  running  2.2      201d
                                        ip-10-50-17-230  185         linux     none  none  running  2.2      201d
                                        ip-10-50-17-250  173         linux     none  none  running  2.2      201d

-----------------------



    fly -t tutorial workers
        name          containers  platform  tags  team  state    version  age
        1da9055b4a3b  0           linux     none  none  running  2.4      13m33s


    fly -t tutorial set-pipeline -p hello-world -c hello-world.yml

                           jobs:
                             job hello-world-job has been added:
                           + name: hello-world-job
                           + plan:
                           + - config:
                           +     image_resource:
                           +       name: ""
                           +       source:
                           +         repository: busybox
                           +       type: registry-image
                           +     platform: linux
                           +     run:
                           +       args:
                           +       - Hello world!
                           +       path: echo
                           +   task: hello-world-task

                           pipeline name: hello-world

                           apply configuration? [yN]: y
            ---------->    pipeline created!
                           you can view your pipeline here: http://localhost:8080/teams/main/pipelines/hello-world

                           the pipeline is currently paused. to unpause, either:
                             - run the unpause-pipeline command:
                               fly -t tutorial unpause-pipeline -p hello-world
                             - click play next to the pipeline in the web ui


    fly -t tutorial unpause-pipeline -p hello-world

    fly -t tutorial trigger-job --job hello-world/hello-world-job --watch





         fly  --target  tutorial  execute          --config  task1.yml
         fly  --target  tutorial  set-pipeline     --config  pipeline.yml  --pipeline   mypipe
         fly  --target  tutorial  jobs                                     --pipeline   mypipe



            fly -t  tutorial      execute -c task_ubuntu_uname.yml
            fly -t  tutorial      e       -c task_ubuntu_uname.yml

            fly -t  tutorial      e -c inputs_required.yml -i some-important-input=.




            cd /Users/sbasile/SUP/CONCOURSE/ci-pipelines/scripts
            ╰─ ./set-pipeline -t platform-common  -p efs-submission-api

              this will SET a pipeline which is something to do only if the pipeline code itself was modified in github
              since the last time it was kicked off




-----------------------

   # to see the log (it happened that the web Dashboard was hanging & showing nothing)

    fly -t team-platform watch  --job  test-data-stack/cidev-api-test --build 46




------------------------------- CONCOURSE CH

A DEV-OPS PIPELINE TO ADD A TEAM TO CONCOURSE: https://github.com/companieshouse/ci-pipelines/pull/2243/files
                        - pipelines/platform/team-randd/Placeholder:         This file is a placeholder until the first pipeline is added to this team.
                                                                             On addition of the first pipeline, delete this file.

                        - scripts/team-config/platform/team-randd/config:
                                                                                roles:
                                                                                - name: member
                                                                                  ldap:
                                                                                    groups: ["build-server-leaddevs"]
                                                                                - name: pipeline-operator
                                                                                  ldap:
                                                                                    groups: ["build-server-leaddevs"]
                                                                                - name: viewer
                                                                                  ldap:
                                                                                    groups: ["build-server-users"]


sandbox
    web       ssh -i ~/.ssh/development-sandbox.pem ubuntu@master.ci.sandbox.aws.chdev.org
    worker 1  ssh -i ~/.ssh/development-sandbox.pem ubuntu@worker-1.ci.sandbox.aws.chdev.org

Development

    web      ssh -i ~/.ssh/development-infrastructure.pem ubuntu@master.ci.platform.aws.chdev.org
    worker 1 ssh -i ~/.ssh/development-infrastructure.pem ubuntu@worker-1.ci.platform.aws.chdev.org


                fly -t platform-common               login -n common             -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-aardvark        login -n team-aardvark      -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-apollo          login -n team-apollo        -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-celestial       login -n team-celestial     -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-creed           login -n team-creed         -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-harmonia        login -n team-harmonia      -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-pa              login -n team-pa            -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-phoenix         login -n team-phoenix       -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-platform        login -n team-platform      -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-spartacus       login -n team-spartacus     -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-synergy         login -n team-synergy       -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-thunderbirds    login -n team-thunderbirds  -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-thundercats     login -n team-thundercats   -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-tiny-rebels     login -n team-tiny-rebels   -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-toro-loco       login -n team-toro-loco     -c https://ci.platform.aws.chdev.org/ -b
                fly -t platform-team-titans          login -n team-titans        -c https://ci.platform.aws.chdev.org/ -b

                fly -t sandbox-development           login -n development        -c https://ci.sandbox.aws.chdev.org/ -b     for sandbox, there are no scrum teams so auth. is with "development" team:
                                                                                                                             I log then with my LDAP credentials:  user: sbasile  (not full email address)



            o   view pipeline                fly -t platform-common  get-pipeline       --pipeline my-pipeline
            o   pause a pipeline             fly -t platform-common  pause-pipeline     --pipeline my-pipeline
            o   unpause a pipeline           fly -t platform-common  unpause-pipeline   --pipeline my-pipeline
            o   destroy a pipeline           fly -t platform-common  destroy-pipeline   --pipeline my-pipeline
            o   set a pipeline               fly -t platform-common  set-pipeline       --config ./my-pipeline.yml  --pipeline my-pipeline
            o   validate pipeline locally    fly                     validate-pipeline  --config ./my-pipeline.yml  --strict
            o   trigger a build              fly -t platform-common  trigger-job        -j my-pipeline/build-test-master              # pipeline / job
            o   view build log               fly -t platform-common  watch              -j my-pipeline/build-test-master 4


repo  https://github.com/companieshouse/ci-pipelines/tree/master/templates/environment
dir   /scripts

Deploy pipeline to Concourse: ./set-pipeline -t <concourse target>     -p <name of your pipeline>

                              ./set-pipeline -t platform-common        -p new_pipeline
                              ./set-pipeline -t platform-team-aardvark -p new_pipeline

Log into Concourse (Platform / Sandbox) and you should see your pipeline but it will be paused.
To un-pause it:              ./unpause-pipeline -t <concourse target>    -p <name of your pipeline>

                             ./unpause-pipeline -t platform-common -p new_pipeline
                             ./unpause-pipeline -t platform-team-aardvark -p new_pipeline
    ________________________________________________________

    Resources:                          https://github.com/companieshouse/ci-concourse-resources
    Concourse parameters available      https://github.com/companieshouse/aws-common-infrastructure-terraform

    ________________________________________________________   AUTO TRIGGER ON MERGE TO master

          Trunk Based Development.
                                  - no develop branch
                                  - Concourse starts building when a branch is merged into master
                                  - the gitHub repo must have
                                                        Settings>Collaborators & teams>Add a team
                                                        For Platform builds, add Admin for Automation Users
                                                        For Sandbox builds,  add Read  for Read Only Automation Users
                                  - the gitHub repo must have ~/.version
                                  - LDAP permissions: Each Team in Concourse has its own corresponding LDAP group that you will need to be added to.
                                                      Ask a member of the Platform team to log a ServiceNow call for you as this needs to be done by the BITS team.





    ________________________________________________________ WEBHOOK

    /api/v1/teams/ TEAM_NAME /pipelines/ PIPELINE_NAME      /resources/  RES_NAME /check/webhook?webhook_token=WEBHOOK_TOKEN

    /api/v1/teams/development/pipelines/ci-marathon-deployer/resources/source-code/check/webhook?webhook_token=YTlkOTg2YjVhOThmNzQ2YmI4NTkyZGI4


    CH token generator at:
    https://github.com/companieshouse/ci-pipelines/blob/master/pipelines/platform/common/webhook-token-generator#L24

    which just does:
                  > date +%s | sha256sum | base64 | head -c 32




    ________________________________________________________ WELL KNOWN PORTS

    https://github.com/companieshouse/ch-service-ansible/blob/master/group_vars/all/vars





    ________________________________________________________  STATE REPOS

      dev:             https://github.com/companieshouse/ci-development-state
      staging/live:    https://github.com/companieshouse/ci-production-state
    ________________________________________________________
    ________________________________________________________
    ________________________________________________________
    ________________________________________________________
    ________________________________________________________

───────┬──────────────────────────────────────────────────────────────────────────────────
       │ File: hello-world.yml
       │ Size: 608 B
───────┼──────────────────────────────────────────────────────────────────────────────────
   1   │ jobs:                                    <---------- top-level key: "jobs": to list the jobs (order doesn't matter)
   2   │ - name: hello-world-job     <---- 1st (and only) job
   3   │   plan:                     <---- "name" and "plan" are the only MANDATORY attributes of a 'job'
   4   │   - task: hello-world-task   <--- the plan is an ORDERED list of steps. Here we have only 1 step: "task"
   5   │     config:                                                                            . each step runs in 1 container (job with 5 steps --> 5 containers)
   6   │       # Tells Concourse which type of worker this task should run on
   7   │       platform: linux
   8   │       # This is one way of telling Concourse which container image to use for a
   9   │       # task. We'll explain this more when talking about resources
  10   │       image_resource:
  11   │         type: registry-image
  12   │         source:
  13   │           repository: busybox # images are pulled from docker hub by default
  14   │       # The command Concourse will run inside the container
  15   │       # echo "Hello world!"
  16   │       run:
  17   │         path: echo
  18   │         args: ["Hello world!"]
───────┴──────────────────────────────────────────────────────────────────────────────────

           each step runs in 1 container (job with 5 steps --> 5 containers)

           Concourse containers are Linux (busybox images)

           fly -t my_target workers    to see the workers for my pipeline
    ________________________________________________________
           fly -t tutorial set-pipeline -p hello-world -c hello-world.yml
                                                \_________________________________ this is just the name I'll see in the dashboard
                    jobs:
                      job hello-world-job has been added:
                    + name: hello-world-job
                    + plan:
                    + - config:
                    +     image_resource:
                    +       name: ""
                    +       source:
                    +         repository: busybox
                    +       type: registry-image
                    +     platform: linux
                    +     run:
                    +       args:
                    +       - Hello world!
                    +       path: echo
                    +   task: hello-world-task

                    pipeline name: hello-world

        --------->  apply configuration? [yN]: y
                    pipeline created!
                    you can view your pipeline here: http://localhost:8080/teams/main/pipelines/hello-world

                    the pipeline is currently paused. to unpause, either:
                      - run the unpause-pipeline command:
                        fly -t tutorial unpause-pipeline -p hello-world
                      - click play next to the pipeline in the web ui

    ________________________________________________________
    fly -t tutorial unpause-pipeline -p hello-world

                    unpaused 'hello-world'
    ________________________________________________________
     fly -t tutorial trigger-job --job hello-world/hello-world-job --watch

                    started hello-world/hello-world-job #1

                    initializing
                    initializing check: image
                    selected worker: eede94fa529f
                    selected worker: eede94fa529f
                    fetching busybox@sha256:09439c073bd3eb029a91c72eff2c0d9f12ab9c84f66bdef360fcf3f91a81bf7c
                    aa49f28a0db9 [======================================] 755.4KiB/755.4KiB
                    selected worker: eede94fa529f
                    running echo Hello world!
                    Hello world!
                    succeeded

    ________________________________________________________  INPUTS / OUTPUTS

         In/out are directories (called artifacts)  that get passed between steps (with their content)


                    --- a/hello-world.yml
                    +++ b/hello-world.yml
                    @@ -11,8 +11,8 @@ jobs:
                             type: registry-image
                             source:
                               repository: busybox # images are pulled from docker hub by default
                    -      # The command Concourse will run inside the container
                    -      # echo "Hello world!"
                    +      outputs:
                    +      - name: the-artifact
                           run:
                    -        path: echo
                    -        args: ["Hello world!"]
                    +        path: ls
                    +        args: ["-lF"]


    fly -t tutorial set-pipeline -p hello-world -c hello-world.yml
                    jobs:
                      job hello-world-job has changed:
                      name: hello-world-job
                      plan:
                      - config:
                          image_resource:
                            name: ""
                            source:
                              repository: busybox
                            type: registry-image
                    +     outputs:
                    +     - name: the-artifact                <-------------- I define 1 out (it will be a dir [named "the-artifact"]
                          platform: linux                                      mounted inside the container)
                          run:                                                 The named dir/artifact is kept, in case other tasks need it (as an input).
                            args:
                    -       - Hello world!
                    -       path: echo
                    +       - -lF
                    +       path: ls
                        task: hello-world-task

                    pipeline name: hello-world

                    apply configuration? [yN]: y
                    configuration updated

    fly -t tutorial trigger-job --job hello-world/hello-world-job --watch
                    started hello-world/hello-world-job #2

                    initializing
                    initializing check: image
                    selected worker: eede94fa529f
                    selected worker: eede94fa529f
                    fetching busybox@sha256:ef320ff10026a50cf5f0213d35537ce0041ac1d96e9b7800bafd8bc9eff6c693
                    50783e0dfb64 [======================================] 755.1KiB/755.1KiB
                    selected worker: eede94fa529f
                    running ls -lF
                    total 0
                    succeeded


    fly -t tutorial trigger-job --job hello-world/hello-world-job --watch
                    started hello-world/hello-world-job #3

                    initializing
                    initializing check: image
                    selected worker: eede94fa529f
                    selected worker: eede94fa529f
                    fetching busybox@sha256:09439c073bd3eb029a91c72eff2c0d9f12ab9c84f66bdef360fcf3f91a81bf7c
                    aa49f28a0db9 [======================================] 755.4KiB/755.4KiB
                    selected worker: eede94fa529f
                    running ls -lF
                    total 4
                    drwxr-xr-x    2 root     root          4096 Aug 19 13:55 the-artifact/    <---- dir here
                    succeeded

    fly -t tutorial set-pipeline -p hello-world -c hello-world.yml
                    jobs:
                      job hello-world-job has changed:
                      name: hello-world-job
                      plan:
                      - config:
                          image_resource:
                            name: ""
                            source:
                              repository: busybox
                            type: registry-image
                          outputs:
                          - name: the-artifact                 <------- a dir(artifact) with this name ("the-artifact") will be created
                          platform: linux                               and concourse will keep this dir/artifact available for any task using this name
                          run:                                          (Concourse will look among the various artifacts and will mount the desired one
                            args:                                        into the task/container requiring it)
                    -       - -lF
                    -       path: ls
                    +       - -cx
                    +       - |
                    +         ls -l .
                    +         echo "hello from another step!" > the-artifact/message    <---- output produced
                    +       path: sh
                        task: hello-world-task
                    + - config:
                    +     image_resource:
                    +       name: ""
                    +       source:
                    +         repository: busybox
                    +       type: registry-image
                    +     inputs:                                     <---- input
                    +     - name: the-artifact            <---- Concouse will mount this dir
                    +     platform: linux
                    +     run:
                    +       args:
                    +       - -cx
                    +       - |
                    +         ls -l .
                    +         cat the-artifact/message                <---- consuming
                    +       path: sh
                    +   task: read-the-artifact

                    pipeline name: hello-world


    ________________________________________________________ RESOURCES

     Resources represent all external inputs to and outputs of jobs.
     Each resource is a versioned artifact with an external source of truth (usually a github repo)

     To see what resources are available out of the box (in my Concourse / target):

         fly -t tutorial workers --details             --details | -d

                    eede94fa529f  0  linux  none  none  running  2.4  2h13m  127.0.0.1:40385  http://127.0.0.1:44775  0  bosh-io-release, bosh-io-stemcell,
                                                                                                                         cf, docker-image, git, github-release,
                                                                                                                         hg, mock, pool, registry-image, s3, semver,
                                                                                                                         time, tracker
                                                                                                                                     ^
                                                                                                                                     |
                                                                                                                                     |
                                                                                                                            resources available

                                                                                                                            (note: git and s3 are already there)
    ________________________________________________________ RESOURCE VERSIONS

     When a new version is emitted by a resource, that is how Concourse knows to start triggering jobs.

     A version is any way that a resource can be uniquely identified. Ex the SHA in Git

              { "ref": "04194bfc880c457a5b00f07db78d0532620414cc" }



    ________________________________________________________ RESOURCES ARE DOCKER IMAGES (with 3 exe)

     The 3 exe inside the image (representing the Resource) are:

      |    /opt/resource/check - returns an [ ] array of versions                                  7 jobs:
      |                                                                                            8 - name: hello-world-job
  get |                                                                                            9   plan:
      |                                                                                           10   # Add a get step referencing the resource
      |    /opt/resource/in -    fetch 1 version into a destination folder passed as $1           11   - get: repo   <------------------------------- a 'get'
                                                                                                  12   - task: hello-world-task


  put |    /opt/resource/out -   runs in a put step.
      |                          Generates a new version, (usually based on some input generated by another job step).
                                 This may mean sending something (ex.  commits to a git repo).

     Creating my own resource means to implement the above 3 scripts (ex. given here: https://concourse-ci.org/implementing-resource-types.html)
     They receive args via stdin and produce output on stdout. They can emit & log anything on stderr.


      C H E C K
        _________________
                stdin:   receives 2 info: 'source' and 'version'

                         ex:
                            {
                 ------->     "source": {                             'source'  is an arbitrary JSON which specifies the location of the resource, including any credentials.
                                "uri": "git://some-uri",                        This is passed verbatim from the resource configuration.
                                "branch": "develop",
                                "private_key": "..."
                              },
                 ------->     "version": { "ref": "61cbef" }          'version' a JSON with string fields, used to uniquely identify an instance of the resource.
                            }
                                                                  example of what a CHECK script for a 'git' resource could be:
                                                                                    _______________________________________________________
                                                                                        [ -d /tmp/repo ] || git clone git://some-uri /tmp/repo
                                                                                        cd /tmp/repo
                                                                                        git pull && git log 61cbef..HEAD
                                                                                    _______________________________________________________
        _________________
                stdout:  []:   array of new versions,          ex:     [
                                                                         { "ref": "61cbef" },
                                                                         { "ref": "d74e01" },
                                                                         { "ref": "7154fe" }
                                                                       ]
        _________________
                stderr:  can be used for printing out any logging
        _________________


      I N
        _________________
                $1:   this arg to the script contains the destination 'dir'

        _________________
                stdin:   receives the same 2 info: 'source' and 'version' (of the C H E C K script)
                         and 'params': an arbitrary JSON passed verbatim from the what the resource config might specify

                                                                  example of what a IN script for a 'git' resource could be:
                                                                                    _______________________________________________________
                                                                                        git clone --branch develop git://some-uri $1
                                                                                        cd $1
                                                                                        git checkout 61cebf
                                                                                    _______________________________________________________

        _________________
                stdout:  a JSON with the version + any metadata (a list of key-value pairs).

                                                                        {
                                                                          "version": { "ref": "61cebf" },
                                                                          "metadata": [
                                                                            { "name": "commit", "value": "61cebf" },
                                                                            { "name": "author", "value": "Hulk Hogan" }
                                                                          ]
                                                                        }
        _________________
                stderr:  can be used for printing out any logging
        _________________


      O U T
        _________________
                $1:   the dir where the resource to push upstream are located

        _________________
                stdin:   receives the same 'source' (of the C H E C K script) and the same 'params' of the I N

                                                                  example of what a OUT script for a 'git' resource could be:
                                                                                    _______________________________________________________
                                                                                        cd $1/some-repo
                                                                                        git push origin develop
                                                                                    _______________________________________________________

        _________________
                stdout:  a JSON with the version + any metadata (a list of key-value pairs).

                                                                        {
                                                                          "version": { "ref": "61cebf" },
                                                                          "metadata": [
                                                                            { "name": "commit", "value": "61cebf" },
                                                                            { "name": "author", "value": "Mick Foley" }
                                                                          ]
                                                                        }
        _________________
                stderr:  can be used for printing out any logging
        _________________


     NOTE: if I want that Concourse captures anything (i.e. the new 'versions' of things) I must follow
           the resource interface (check, get, put). Anything 'committed' to the outside world of the resource
           without following this, will be missed.


            +++ b/hello-world.yml
            @@ -1,18 +1,21 @@
            +resources:                       <--------  keyword
            +- name: repo                                Right after 'resources:' I add all the resources I need
            +  type: git                                 (here just 1: 'git'). The param to configure for each resource
            +  source:                                                         are specified in the README of that resource
            +    uri: https://github.com/concourse/examples.git                For git the 'source' with the repo's url.
            +
             jobs:
             - name: hello-world-job
               plan:
            +  - get: repo                    <-------- Here I can connect a resource with the keyword ('get')  and
            +    trigger: true                          I tell to trigger this job when new versions are emitted
               - task: hello-world-task
                 config:

    ________________________________________________________ get

    The 'get' executes
                check + in
    where 'in' always produces an output/artifact (a dir) which is named by the get:

             - get: repo     <------ will produce a dir 'repo'

    the content of this dir, depends by the resource, so it must be seen the doc of that resource.
    For a 'git' resource the dir is the clone of the repo

    It's then common to see some other places down the line having that dir as an input:
    ex.
       inputs:
          - name: repo
    ________________________________________________________ check_every

     Concourse by default checks resources every 1 min.

     As in a pipeline there could be many resources, this could cause problems to the external services (ex. DDOS)
     In this situations a best way is to use weebhooks, which instruct the external system to call Concourse
     each time en event say it's time to do so (ex. a new commit to a Git repo).

    ________________________________________________________ fly inspect   (or alias 'hijack')

    Given every resource (which is an image running in a container) I can inspect
    that container from its url:

    ex:
            fly -t tutorial intercept -u http://localhost:8080/teams/main/pipelines/hello-world/resources/repo
            fly -t tutorial hijack     "                            "
            bash-5.1#        <------ I'm inside the container (I can see the files ...)

    ________________________________________________________ custom resources

    Remember, a resource is a container image. So to pull in a new resource type you need to tell Concourse where
    to pull the image from.
    This is done by using the built-in
                registry-image     <-----  https://github.com/concourse/registry-image-resource   replaces
                                           https://github.com/concourse/docker-image-resource
                                           registry-image is written in pure Go and does not use the Docker daemon or CLI.
                                                          This makes it safer (no need for privileged: true), more efficient,
                                                          and less error-prone (now that we're using Go APIs and not parsing docker CLI output).
    resource.
    ex:
           resource_types:
            # declare the new resource type
            - name: rss
              type: registry-image  <--------
              source:
                repository: suhlig/concourse-rss-resource
                tag: latest




    A catalog of resource types:  https://resource-types.concourse-ci.org/

    ________________________________________________________ RESOURCE SCHEMA

    resources:
      M    - name: new-name                                   id   (string)
      M      type: git                                        name (string)
      M      source: uri: "https://github.com/vito/booklit"   any config as it's res dependent and a black box for Concourse which will just pass it. For git is a uri: ....
        O    old_name: current-name                           a string
        O    icon: git                                        a string
        O    version: ..                                      it's like an hard pin. If set, pinning on the UI will have no effect
        O    check_every:  x | never                          x: default = 1m
        O    check_timeout: x                                 x: dfwult: 1h
        O    expose_build_created_by: bool                    bool: default: false
        O    tags: [string]                                   default: []
        O    public: bool                                     default false
        O    webhook_token: string                            a string

    ________________________________________________________ RESOURCE-TYPE SCHEMA

    resource_types:
      M      - name: ci-resource-type-release-tag                            name (string)  I can override the core ones (if I use the same name)
      M        type: docker-image                                            a string. Anyhow being the resources images/containers, their type is usually 'docker-image' or 'registry-image'
      M        source:                                                       can be anything, it's resource dependent amd for Concourse just a black-box config passed to the resource at runtime
                 aws_access_key_id: ((aws-access-key-id))                    ex:
                 aws_secret_access_key: ((aws-secret-access-key))               <----
                 repository: ((docker-registry))/ci-resource-type-release-tag   <----
                 tag: latest                                                    <----
        O    params:  ..                                      Arbitrary config to pass when running the get
        O    check_every:  x                                  x: default = 1m
        O    tags: [string]                                   default: []
        O    defaults:  config                                usual YAML block which is merged with the
                                                                        'source: config'

    ________________________________________________________ TASK SCHEMA

      - config:
      M        platform: linux                                             linux | darwin | windows       This determines the pool of workers that the task can run against.
      M        image_resource:
             M   type: docker-image              every time the TASK runs, a "check" is executed on this specified RESOURCE-TYPE to discover the latest version available.
             M   source:
                   aws_access_key_id: ((aws-access-key-id))
                   aws_secret_access_key: ((aws-secret-access-key))
                   repository: ((docker-registry))/ci-cdn-build
                   tag: latest
             O   params: config                  A map of arbitrary configuration to forward to the RESOURCE (nb. RESOURCE not TASK) (Refer to the resource type's documentation to see what it supports)
             O   version:  id                    A specific version of the resource to fetch.  default:  latest
        O      inputs:                           optional list of artifacts
                 - name: source-code  M                 every artifact has a MANDATORY 'name' field and
                   path:  dir         O                 an OPTIONAL 'path'. If 'path' is not specified a dir with the same 'name' value is looked for. (NB: Paths are relative to the working dir of the task)
                   optional: boolean  O                 this 'optional' field specifies if this input can be missing for this TASK  (default 'false' = CANNOT MISS)
                 - name: version
        O      outputs:                          Same logic like 'inputs'.
                 - name: artifacts    M                anyhow 'outputs' don't have the 3rd 'optional' field
                   path:  dir         O
      M        run:
                 path: bash           M          the path of the executable to run (relative to the current dir or even absolute: /bin/bash) or even just the name (if found in $PATH) ex. "bash"
                 args:                O
                   - -ec
                   - |
                     make -C source-code dist version="$(< version/version)"
                     cp source-code/*.zip artifacts
                 dir:                O          dir (relative to current dir) used as temp dir when running the script
                 user: string        O          Explicitly set the user to run as

        O      params:                          A map of arbitrary configuration to forward to the TASK
                  xxxxxx1: val1
                  xxxxxx2: val2
                  xxxxxx3: val3
        O      caches: [cache]
        O      rootfs_uri: string
        O      container_limits:
                  cpu:    number     O          The max CPU available to the task container, measured in shares.   0 means unlimited.
                  memory: number     O          The max memory available to the task container, measured in bytes. 0 means unlimited.




    ________________________________________________________ USING AN EXTERNAL FILE FOR A TASK: task.yml

        . The syntax to use an external file when writing a task in a pipeline is this:

           - task: hello-world-task
             file: some_resource/test_task1.yml

                    NB.1  the file test_task1.yml should be somewhere, so in some resource
                          so a more complete example is
                                resources:
                                    - name: repo
                                      type: git
                                      source:
                                         uri: https://github.com/sbasile-ch/TEST_CONCOURSE.git
                                         branch: main

                                ....
                                jobs:
                                    ..
                                     - task: hello-world-task
                                       file: repo/test_task1.yml     <------ I'm using the resource 'repo' so the file test_task1.yml
                                                                             is at the 1st level in the repo  https://github.com/sbasile-ch/TEST_CONCOURSE.git
                    NB.2  'file' is indented like 'task'
    ________________________________________________________ VARS INSIDE THE EXTERNAL FILE task.yml

                                                                                params:
                                                                                  varA: "val-a"   <--- I define some vars
                                                                                  varB: "val-b"

                                                                                run:
                                                                                  path: bash
                                                                                  args:
                                                                                    - ec
                                                                                    - |
                                                                                      echo "aa is bb ${varA} ${varB}"  <--- I can use them


    ________________________________________________________ PASSING PARAMS TO THE EXTERNAL FILE task.yml
                                ....
                                jobs:
                                    ..
                                     - task: hello-world-task
                                       file: repo/test_task1.yml
                                       params:
                                           var1: "some-value-1"     <----- these 2 vars
                                           var2: "some-value-2"            can be used in the file test_task1.yml
                                                                           ex:
                                                                                run:
                                                                                  path: bash
                                                                                  args:
                                                                                    - ec
                                                                                    - |
                                                                                      echo "aa is bb ${var1} ${var2}"

    ________________________________________________________ CONFIG VARS IN THE PIPELINE OVERRIDE SAME-NAME VAR IN test_task1.yml

                                ....
                                jobs:
                                    ..
                                     - task: hello-world-task
                                       file: repo/test_task1.yml
                                       params:
                                           var1: "some-value-1"     <----- these 2 vars
                                           var2: "some-value-2"            can be used in the file test_task1.yml
                                            |                              ex:
                                            |                                   params:
                                           S T R O N G E R                        var1: "val-a"   <--- 'var1' same-name of the param in the pipeline
                                                                                  varB: "val-b"        so the value will be  "some-value-1"
                                                                                run:
                                                                                  path: bash
                                                                                  args:
                                                                                    - ec
                                                                                    - |
                                                                                      echo "aa is bb ${var1} ${var2}"
                    NB: this behaviour could be used as setting a var
                        in the task.yml file which works as a DEFAULT value
                        Anyhow each time the pipeline will specify a different value
                        that will overrride the default.


    ________________________________________________________ EXECUTE JUST A TASK (NOT ALL THE PIPELINE)

                   I can upload to run in Concourse a file task ex:

                                            ───────┬─────────────────────────────────────────────────
                                                   │ File: TEST_CONCOURSE/test_task.bash.yml
                                            ───────┼─────────────────────────────────────────────────
                                               1   │ platform: linux
                                               2   │
                                               3   │ image_resource:
                                               4   │   type: registry-image
                                               5   │   source: {repository: golang}
                                               6   │ params:
                                               7   │   myvar: "basile2"
                                               8   │   myvar2: "basile3"
                                               9   │ outputs:
                                              10   │   - name: test_param
                                              11   │ run:
                                              12   │   path: bash
                                              13   │   args:
                                              14   │     - -ec
                                              15   │     - |
                                              16   │       ls -lrta
                                              17   │       pwd
                                              18   │       echo "done"
                                              19   │       echo "aa is bb ${myvar} ${myvar2}"
                                              20   │       echo "aa is bb ${myvar}" > test_param/A.txt
                                            ───────┴─────────────────────────────────────────────────

              > fly -t tutorial execute -c TEST_CONCOURSE/test_task.bash.yml

                                        executing build 18555 at http://localhost:8080/builds/18555
                                        initializing
                                        initializing check: image
                                        selected worker: 4fc9b264751b
                                        selected worker: 4fc9b264751b
                                        INFO: found existing resource cache

                                        selected worker: 4fc9b264751b
                                        running bash -ec ls -lrta
                                        pwd
                                        echo "done"
                                        echo "aa is bb ${myvar} ${myvar2}"
                                        echo "aa is bb ${myvar}" > test_param/A.txt      <---------- NB. this is not accessible on my local. It could with option -o

                                        total 12
                                        drwxr-xr-x 2 root root 4096 Jun 29 22:04 test_param
                                        drwxr-xr-x 3 root root 4096 Jun 29 22:04 ..
                                        drwxr-xr-x 3 root root 4096 Jun 29 22:04 .
                                        /tmp/build/e55deab7
                                        done
                                        aa is bb basile2 basile3
                                        succeeded


              > fly -t tutorial execute -c TEST_CONCOURSE/test_task.bash.yml -o test_param=test_param

                                        executing build 18560 at http://localhost:8080/builds/18560
                                        initializing
                                        initializing check: image
                                        selected worker: 4fc9b264751b
                                        selected worker: 4fc9b264751b
                                        INFO: found existing resource cache

                                        selected worker: 4fc9b264751b
                                        running bash -ec ls -lrta
                                        pwd
                                        echo "done"
                                        echo "aa is bb ${myvar} ${myvar2}"
                                        echo "aa is bb ${myvar}" > test_param/A.txt

                                        total 12
                                        drwxr-xr-x 2 root root 4096 Jun 29 22:06 test_param
                                        drwxr-xr-x 3 root root 4096 Jun 29 22:06 ..
                                        drwxr-xr-x 3 root root 4096 Jun 29 22:06 .
                                        /tmp/build/e55deab7
                                        done
                                        aa is bb basile2 basile3
                                        succeeded
                                        downloading test_param   done   <------------------------ It's Downloading !!!!!!

              >  bat test_param/A.txt  <--------   the file is Downloaded into my local dir 'test_param'
                                    ───────┬───────────────────────────
                                           │ File: test_param/A.txt
                                    ───────┼───────────────────────────
                                       1   │ aa is bb basile2
                                    ───────┴───────────────────────────




    ________________________________________________________ GRAB ENV VARS WHOSE VALUE I DON'T KNOW
              - task: grab-info
                config:
                  platform: linux
                  image_resource:
                    type: registry-image
                    source:  {repository: golang}
                  run:
                    path: sh
                    args:
                      - -exc
                      - |
                        echo "[${v1}] [${v2}] [${v3}]"         <------ I pass to this task which will dump them
                  params:
                      v1: ((aws-access-key-id))                <----------- 1. I want to know the value of these values
                      v2: ((aws-secret-access-key))
                      v3: ((docker-registry))
    ________________________________________________________ RESOURCE PIN/UNPIN  ENABLE/ DISBALE  CLEAR CACHE

             C H E C K
            _______________________________
            ❯ fly -t platform-team-aardvark check-resource --resource  abridged.accounts.web.ch.gov.uk/concourse-resources               --resource | -r
                                            ^^^^^^^^^^^^^
                id         name                 status     check_error
                816307882  concourse-resources  succeeded

            _______________________________
            ❯ fly -t platform-team-aardvark check-resource -a --resource  abridged.accounts.web.ch.gov.uk/concourse-resources     -a --async    only start the proc
                                            ^^^^^^^^^^^^^^^^^
                id         name                 status   check_error
                816310623  concourse-resources  started
                                                ^^^^^^^

            _______________________________
            ❯ fly -t platform-team-aardvark check-resource --shallow --resource  abridged.accounts.web.ch.gov.uk/concourse-resources
                                            ^^^^^^^^^^^^^^^^^^^^^^^^
                id         name                 status     check_error
                816310638  concourse-resources  succeeded




             P I N  /  U N P I N
            _______________________________
            ❯ fly -t platform-team-aardvark pin-resource --resource  abridged.accounts.web.ch.gov.uk/concourse-resources --version ref:1f028fc286f3b484a0aa72e579e7d1cbca9381af
                                            ^^^^^^^^^^^^
                pinned 'abridged.accounts.web.ch.gov.uk/concourse-resources' with version {"ref":"1f028fc286f3b484a0aa72e579e7d1cbca9381af"}

            _______________________________
            ❯ fly -t platform-team-aardvark pin-resource --resource  abridged.accounts.web.ch.gov.uk/concourse-resources --version ref:1f028fc286f3b484a0aa72e579e7d1cbca9381af --comment 'test this num'  <------    I add a comment visible on the UI
                                            ^^^^^^^^^^^^                                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^
                pinned 'abridged.accounts.web.ch.gov.uk/concourse-resources' with version {"ref":"1f028fc286f3b484a0aa72e579e7d1cbca9381af"}
                pin comment 'test this num' is saved

            _______________________________
            ❯ fly -t platform-team-aardvark unpin-resource --resource  abridged.accounts.web.ch.gov.uk/concourse-resources
                                            ^^^^^^^^^^^^^^
                unpinned 'abridged.accounts.web.ch.gov.uk/concourse-resources'




             E N A B L E  /  D I S A B L E      (disable:  deselect the 'V' icon near the pin icon in the UI)
            _______________________________
            ❯ fly -t platform-team-aardvark disable-resource-version --resource  abridged.accounts.web.ch.gov.uk/concourse-resources --version ref:1f028fc286f3b484a0aa72e579e7d1cbca9381af
                disabled 'abridged.accounts.web.ch.gov.uk/concourse-resources' with version {"ref":"1f028fc286f3b484a0aa72e579e7d1cbca9381af"}

            _______________________________
            ❯ fly -t platform-team-aardvark enable-resource-version --resource  abridged.accounts.web.ch.gov.uk/concourse-resources --version ref:1f028fc286f3b484a0aa72e579e7d1cbca9381af
                enabled 'abridged.accounts.web.ch.gov.uk/concourse-resources' with version {"ref":"1f028fc286f3b484a0aa72e579e7d1cbca9381af"}



             C L E A R  C A C H E
            _______________________________
            ❯ fly -t example clear-resource-cache -r my-pipeline/my-resource                    to clear  resource cache for whatever reason

                                                                                                This will immediately invalidate all the caches related to that resource -
                                                                                                they'll be garbage collected asynchronously and subsequent builds will run with empty caches.


            ❯ fly -t example clear-resource-cache  -r my-pipeline/my-resource  -v ref:abcdef    I can also clear a particular version
                                                                                                If -v is not specified, all caches for the given resource will be cleared.




    ________________________________________________________   VARS

    A var xxx can be used with this notation:

            (( xxx ))

    Or the full syntax

            (( source-name:secret-path.xxx ))
                  |           |
                  |           |
                  |           |
                  |         the secret-path is the path used
          currently these   by the specific source-name
          'source-name'     i.e. with vault
          are defined            something like /aaaa/bbbb/cccc

              - vault
              - dummy
              - ssm
              - secretmanager (since v7.7.0)
              - .      <---------- this is a special source name used only by the construct 'load_var:'
                                   which requires a mandatory 'file:' arg to source a var from

                                      - load_var: version                            <----  'version' is the var name whose content
                                        file: examples/pipelines/vars-file.yml       <----   is defined sourcing this yml file
                                      - put: img
                                        params:
                                          version: "((.:version.hello))-((.:version.number))"  <--------------- here use

                                   'load_var:' has also 2 optional args
                                           'format:'   with values   (json , yaml, yml, trim, raw)
                                                                     to give the type of the file, which will then be parsed
                                                                     'trim' is the default and just loads the files, removing LEADing/TRAILing spaces
                                                                     'raw' preserves all

                                   'reveal:'  bool (i.e. true) to decide if when the var is printed in out it's redacted (default) or not


    NOTE: values of vars are "interpolated" only when they are in a string context ex aaaaa-((xxx))-bbbb
          otherwise they are real vars (like in programming)
          ex
                       foo: ((bar))
          whatever ((bar)) is, it will become the value of foo.
          This can be a value of any type and structure:
          a boolean,
          a simple string,
          a multiline credential like a certificate,
          or a complicated data structure like an array of objects.

          The above example of   "((.:version.hello))-((.:version.number))"  gives an idea

    ________________________________________________________   CH pipelines structure

    https://github.com/companieshouse/ci-resource-type-release-tag         (copyed from https://github.com/EugenMayer/concourse-git-semver-tag-resource)
                                                                           it contains the script to calculate the version

                                                                           It's used listing this in the "Resource Types":


                # Resource Types ---------------------------------------------------------------
                resource_types:
                - name: ci-resource-type-release-tag
                  type: docker-image
                  source:
                    aws_access_key_id: ((aws-access-key-id))
                    aws_secret_access_key: ((aws-secret-access-key))
                    repository: ((docker-registry))/ci-resource-type-release-tag
                    tag: latest


               which will be called as:

                        306 - name: release-tag
                        307   type: ci-resource-type-release-tag <------------------
                        308   icon: tag
                        309   source:
                        310     uri: git@github.com:companieshouse/api.ch.gov.uk.git
                        311     branch: master
                        312     private_key: ((github-ssh-key))
                        313     tag_filter: '^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$'

               and invoked as a normal 'get':

                       107  - get: release-tag

    ICONS:

            Git:            github
            Slack:          slack
            Docker:         docker
            Pull Request:   source-merge
            S3:             bitbucket
            Github Release: package-variant-closed
            Release Tag:    tag
            maven-resource: folder-zip

    ________________________________________________________
    ________________________________________________________
        Usage:
          fly [OPTIONS] <command>

        Application Options:
          -t, --target=              Concourse target name
          -v, --version              Print the version of Fly and exit
              --verbose              Print API requests and responses
              --print-table-headers  Print table headers even for redirected output

        Help Options:
          -h, --help                 Show this help message

        Available commands:

      1      abort-build                Abort a build (aliases: ab)
      2      active-users               List the active users since a date or for the past 2 months (aliases: au)
      3      archive-pipeline           Archive a pipeline (aliases: ap)
      4      builds                     List builds data (aliases: bs)
      5      check-resource             Check a resource (aliases: cr)
      6      check-resource-type        Check a resource-type (aliases: crt)
      7      checklist                  Print a Checkfile of the given pipeline (aliases: cl)
      8      clear-resource-cache       Clear cache of a resource (aliases: crc)
      9      clear-task-cache           Clears cache from a task container (aliases: ctc)
      10     clear-versions             Clear versions of a resource or resource type (aliases: cv)
      11     completion                 generate shell completion code
      12     containers                 Print the active containers (aliases: cs)
      13     curl                       curl the api (aliases: c)
      14     delete-target              Delete target (aliases: dtg)
      15     destroy-pipeline           Destroy a pipeline (aliases: dp)
      16     destroy-team               Destroy a team and delete all of its data (aliases: dt)
      17     disable-resource-version   Disable a version of a resource (aliases: drv)
      18     edit-target                Edit a target (aliases: etg)
      19     enable-resource-version    Enable a version of a resource (aliases: erv)
      20     execute                    Execute a one-off build using local bits (aliases: e)
      21     expose-pipeline            Make a pipeline publicly viewable (aliases: ep)
      22     format-pipeline            Format a pipeline config (aliases: fp)
      23     get-pipeline               Get a pipeline's current configuration (aliases: gp)
      24     get-team                   Show team configuration (aliases: gt)
      25     help                       Print this help message
      26     hide-pipeline              Hide a pipeline from the public (aliases: hp)
      27     hijack                     Execute a command in a container (aliases: intercept, i)
      28     jobs                       List the jobs in the pipelines (aliases: js)
      29     land-worker                Land a worker (aliases: lw)
      30     login                      Authenticate with the target (aliases: l)
      31     logout                     Release authentication with the target (aliases: o)
      32     order-instanced-pipelines  Orders instanced pipelines within an instance group (aliases: oip)
      33     order-pipelines            Orders pipelines (aliases: op)
      34     pause-job                  Pause a job (aliases: pj)
      35     pause-pipeline             Pause a pipeline (aliases: pp)
      36     paused-jobs                List the paused jobs in the pipelines (aliases: pjs)
      37     paused-pipelines           List the configured paused pipelines (aliases: pps)
      38     pin-resource               Pin a version to a resource (aliases: pr)
      39     pipelines                  List the configured pipelines (aliases: ps)
      40     prune-worker               Prune a stalled, landing, landed, or retiring worker (aliases: pw)
      41     rename-pipeline            Rename a pipeline (aliases: rp)
      42     rename-team                Rename a team (aliases: rt)
      43     rerun-build                Rerun a build (aliases: rb)
      44     resource-versions          List the versions of a resource (aliases: rvs)
      45     resources                  List the resources in the pipeline (aliases: rs)
      46     schedule-job               Request the scheduler to run for a job. Introduced as a recovery command for the v6.0 scheduler. (aliases: sj)
      47     set-pipeline               Create or update a pipeline's configuration (aliases: sp)
      48     set-team                   Create or modify a team to have the given credentials (aliases: st)
      49     status                     Login status
      50     sync                       Download and replace the current fly from the target (aliases: s)
      51     targets                    List saved targets (aliases: ts)
      52     teams                      List the configured teams (aliases: t)
      53     trigger-job                Start a job in a pipeline (aliases: tj)
      54     unpause-job                Unpause a job (aliases: uj)
      55     unpause-pipeline           Un-pause a pipeline (aliases: up)
      56     unpin-resource             Unpin a resource (aliases: ur)
      57     userinfo                   User information
      58     validate-pipeline          Validate a pipeline config (aliases: vp)
      59     volumes                    List the active volumes (aliases: vs)
      60     watch                      Stream a build's output (aliases: w)
      61     workers                    List the registered workers (aliases: ws)
    ________________________________________________________
      1      abort-build                Abort a build (aliases: ab)

           [abort-build command options]
            -j, --job=PIPELINE/JOB    Name of a job to cancel
                  -b, --build=              If job is specified: build number to cancel. If
                                            job not specified: build id
                      --team=               Name of the team to which the pipeline belongs,
                                            if different from the target default

      -------------------------------------
      2      active-users               List the active users since a date or for the past 2 months (aliases: au)

            [active-users command options]
                      --since=           Start date range of returned users' last login,
                                         defaults to 2 months from today'
                      --json             Print command result as JSON

      -------------------------------------
      3      archive-pipeline           Archive a pipeline (aliases: ap)

            [archive-pipeline command options]
                  -p, --pipeline=        Pipeline to archive
                  -a, --all              Archive all pipelines
                  -n, --non-interactive  Skips interactions, uses default values
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      4      builds                     List builds data (aliases: bs)

            [builds command options]
                  -a, --all-teams           Show builds for the all teams that user has
                                            access to
                  -c, --count=              Number of builds you want to limit the return
                                            to (default: 50)
                      --current-team        Show builds for the currently targeted team
                  -j, --job=PIPELINE/JOB    Name of a job to get builds for
                      --json                Print command result as JSON
                  -p, --pipeline=           Name of a pipeline to get builds for
                  -n, --team=               Show builds for these teams
                      --since=              Start of the range to filter builds
          --until=              End of the range to filter builds

      -------------------------------------
      5      check-resource             Check a resource (aliases: cr)

            [check-resource command options]
                  -r, --resource=PIPELINE/RESOURCE    Name of a resource to check version
                                                      for
                  -f, --from=VERSION                  Version of the resource to check
                                                      from, e.g. ref:abcd or
                                                      path:thing-1.2.3.tgz
                  -a, --async                         Return the check without waiting for
                                                      its result
                      --shallow                       Check the resource itself only
                      --team=                         Name of the team to which the
                                                      pipeline belongs, if different from
                                                      the target default

      -------------------------------------
      6      check-resource-type        Check a resource-type (aliases: crt)

            [check-resource-type command options]
                  -r, --resource-type=PIPELINE/RESOURCE-TYPE    Name of a resource-type to
                                                                check
                  -f, --from=VERSION                            Version of the resource
                                                                type to check from, e.g.
                                                                digest:sha256@...
                  -a, --async                                   Return the check without
                                                                waiting for its result
                      --shallow                                 Check the resource type
                                                                itself only
                      --team=                                   Name of the team to which
                                                                the pipeline belongs, if
                                                                different from the target
                                                                default

      -------------------------------------
      7      checklist                  Print a Checkfile of the given pipeline (aliases: cl)

            [checklist command options]
                  -p, --pipeline=        The pipeline from which to generate the Checkfile
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      8      clear-resource-cache       Clear cache of a resource (aliases: crc)

            [clear-resource-cache command options]
                  -r, --resource=PIPELINE/RESOURCE    Name of a resource to clear cache
                  -v, --version=VERSION               Version of the resource to check
                                                      from, e.g. digest:sha256@..., in case
                                                      a version is not specified the
                                                      command will delete all the resource
                                                      caches for that resource

      -------------------------------------
      9      clear-task-cache           Clears cache from a task container (aliases: ctc)

            [clear-task-cache command options]
                  -j, --job=             Job to clear cache from
                  -s, --step=            Step name to clear cache from
                  -c, --cache-path=      Cache directory to clear out
                  -n, --non-interactive  Destroy the task cache(s) without confirmation

      -------------------------------------
      10     clear-versions             Clear versions of a resource or resource type (aliases: cv)

            [clear-versions command options]
                      --resource=PIPELINE/RESOURCE              Name of a resource to clear
                                                                versions
                      --resource-type=PIPELINE/RESOURCE-TYPE    Name of a resource type to
                                                                clear versions

      -------------------------------------
      11     completion                 generate shell completion code

            [completion command options]
                      --shell=[bash|zsh|fish]

      -------------------------------------
      12     containers                 Print the active containers (aliases: cs)

            [containers command options]
                      --json             Print command result as JSON

      -------------------------------------
      13     curl                       curl the api (aliases: c)

            [curl command options]
                      --print-and-exit   Print curl command and exit

            [curl command arguments]
              PATH:                      Pass query params as normal curl path like
                                         path?key=value
              curl flags:                To pass flags to curl, pass a -- argument, so
                                         that fly can distinguish them from its own flags

      -------------------------------------
      14     delete-target              Delete target (aliases: dtg)

            [delete-target command options]
                  -a, --all              Delete all targets

      -------------------------------------
      15     destroy-pipeline           Destroy a pipeline (aliases: dp)

            [destroy-pipeline command options]
                  -p, --pipeline=        Pipeline to destroy
                  -n, --non-interactive  Destroy the pipeline without confirmation
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      16     destroy-team               Destroy a team and delete all of its data (aliases: dt)

            [destroy-team command options]
                  -n, --team-name=       The team to delete
                      --non-interactive  Force apply configuration

      -------------------------------------
      17     disable-resource-version   Disable a version of a resource (aliases: drv)

            [disable-resource-version command options]
                  -r, --resource=PIPELINE/RESOURCE    Name of the resource
                  -v, --version=KEY:VALUE             Version of the resource to disable.
                                                      The given key value pair(s) has to be
                                                      an exact match but not all fields are
                                                      needed. In the case of multiple
                                                      resource versions matched, it will
                                                      disable the latest one.

      -------------------------------------
      18     edit-target                Edit a target (aliases: etg)

            [edit-target command options]
                      --target-name=     Update target name
                  -u, --concourse-url=   Update concourse URL
                  -n, --team-name=       Update team name

      -------------------------------------
      19     enable-resource-version    Enable a version of a resource (aliases: erv)

            [enable-resource-version command options]
                  -r, --resource=PIPELINE/RESOURCE    Name of the resource
                  -v, --version=KEY:VALUE             Version of the resource to enable.
                                                      The given key value pair(s) has to be
                                                      an exact match but not all fields are
                                                      needed. In the case of multiple
                                                      resource versions matched, it will
                                                      enable the latest one.

      -------------------------------------
      20     execute                    Execute a one-off build using local bits (aliases: e)

            [execute command options]
                  -c, --config=                        The task config to execute
                  -p, --privileged                     Run the task with full privileges
                      --include-ignored                Including .gitignored paths.
                                                       Disregards .gitignore entries and
                                                       uploads everything
                  -i, --input=NAME=PATH                An input to provide to the task (can
                                                       be specified multiple times)
                  -m, --input-mapping=[NAME=STRING]    Map a resource to a different name
                                                       as task input
                  -j, --inputs-from=PIPELINE/JOB       A job to base the inputs on
                  -o, --output=NAME=PATH               An output to fetch from the task
                                                       (can be specified multiple times)
                      --image=                         Image resource for the one-off build
                      --tag=TAG                        A tag for a specific environment
                                                       (can be specified multiple times)
                  -v, --var=[NAME=STRING]              Specify a string value to set for a
                                                       variable in the pipeline
                  -y, --yaml-var=[NAME=YAML]           Specify a YAML value to set for a
                                                       variable in the pipeline
                  -l, --load-vars-from=                Variable flag that can be used for
                                                       filling in template values in
                                                       configuration from a YAML file

      -------------------------------------
      21     expose-pipeline            Make a pipeline publicly viewable (aliases: ep)

            [expose-pipeline command options]
                  -p, --pipeline=        Pipeline to expose
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      22     format-pipeline            Format a pipeline config (aliases: fp)

            [format-pipeline command options]
                  -c, --config=          Pipeline configuration file
                  -w, --write            Do not print to stdout; overwrite the file in place

      -------------------------------------
      23     get-pipeline               Get a pipeline's current configuration (aliases: gp)

            [get-pipeline command options]
                  -p, --pipeline=        Get configuration of this pipeline
                  -j, --json             Print config as json instead of yaml
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      24     get-team                   Show team configuration (aliases: gt)

            [get-team command options]
                  -n, --team-name=       Get configuration of this team
                  -j, --json             Print command result as JSON

      -------------------------------------
      25     help                       Print this help message

      -------------------------------------
      26     hide-pipeline              Hide a pipeline from the public (aliases: hp)

            [hide-pipeline command options]
                  -p, --pipeline=        Pipeline to hide
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      27     hijack                     Execute a command in a container (aliases: intercept, i)

            [hijack command options]
                  -j, --job=PIPELINE/JOB        Name of a job to hijack
                      --handle=                 Handle id of a job to hijack
                  -c, --check=PIPELINE/CHECK    Name of a resource's checking container to
                                                hijack
                  -u, --url=                    URL for the build, job, or check container
                                                to hijack
                  -b, --build=                  Build number within the job, or global
                                                build ID
                  -s, --step=                   Name of step to hijack (e.g. build, unit,
                                                resource name)
                      --step-type=              Type of step to hijack (e.g. get, put, task)
                  -a, --attempt=N[,N,...]       Attempt number of step to hijack.
                      --team=                   Name of the team to which the container
                                                belongs, if different from the target
                                                default

            [hijack command arguments]
              command:                          The command to run in the container
                                                (default: bash)

      -------------------------------------
      28     jobs                       List the jobs in the pipelines (aliases: js)

            [jobs command options]
                  -p, --pipeline=        Get jobs in this pipeline
                      --json             Print command result as JSON
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      29     land-worker                Land a worker (aliases: lw)

            [land-worker command options]
                  -w, --worker=          Worker to land

      -------------------------------------
      30     login                      Authenticate with the target (aliases: l)

            [login command options]
                  -c, --concourse-url=   Concourse URL to authenticate with
                  -k, --insecure         Skip verification of the endpoint's SSL certificate
                  -u, --username=        Username for basic auth
                  -p, --password=        Password for basic auth
                  -n, --team-name=       Team to authenticate with
                      --ca-cert=         Path to Concourse PEM-encoded CA certificate file.
                      --client-cert=     Path to a PEM-encoded client certificate file.
                      --client-key=      Path to a PEM-encoded client key file.
                  -b, --open-browser     Open browser to the auth endpoint

      -------------------------------------
      31     logout                     Release authentication with the target (aliases: o)

            [logout command options]
                  -a, --all              Logout of all targets

      -------------------------------------
      32     order-instanced-pipelines  Orders instanced pipelines within an instance group (aliases: oip)

            [order-instanced-pipelines command options]
                  -g, --group=           Name of the instance group
                  -p, --pipeline=        Instance vars identifying pipeline (can be
                                         specified multiple times to provide relative
                                         ordering)
                      --team=            Name of the team to which the pipelines belong, if
                                         different from the target default

      -------------------------------------
      33     order-pipelines            Orders pipelines (aliases: op)

            [order-pipelines command options]
                  -a, --alphabetical     Order all pipelines alphabetically
                  -p, --pipeline=        Name of pipeline (can be specified multiple times
                                         to provide relative ordering)
                      --team=            Name of the team to which the pipelines belong, if
                                         different from the target default

      -------------------------------------
      34     pause-job                  Pause a job (aliases: pj)

            [pause-job command options]
                  -j, --job=PIPELINE/JOB    Name of a job to pause
                      --team=               Name of the team to which the job belongs, if
                                            different from the target default

      -------------------------------------
      35     pause-pipeline             Pause a pipeline (aliases: pp)

            [pause-pipeline command options]
                  -p, --pipeline=        Pipeline to pause
                  -a, --all              Pause all pipelines
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      36     paused-jobs                List the paused jobs in the pipelines (aliases: pjs)

            [paused-jobs command options]
                  -p, --pipeline=        Get jobs in this pipeline
                      --json             Print command result as JSON
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      37     paused-pipelines           List the configured paused pipelines (aliases: pps)

            [paused-pipelines command options]
                  -a, --all              Show pipelines across all teams
                      --json             Print command result as JSON

      -------------------------------------
      38     pin-resource               Pin a version to a resource (aliases: pr)

            [pin-resource command options]
                  -r, --resource=PIPELINE/RESOURCE    Name of the resource
                  -v, --version=                      Version of the resource to pin. The
                                                      given key value pair(s) has to be an
                                                      exact match but not all fields are
                                                      needed. In the case of multiple
                                                      resource versions matched, it will
                                                      pin the latest one.
                  -c, --comment=                      Message to be saved to the pinned
                                                      resource. Resource has to be pinned
                                                      otherwise --version should be
                                                      specified to pin the resource first.

      -------------------------------------
      39     pipelines                  List the configured pipelines (aliases: ps)

            [pipelines command options]
                  -a, --all               Show pipelines across all teams
                      --include-archived  Show archived pipelines
                      --json              Print command result as JSON

      -------------------------------------
      40     prune-worker               Prune a stalled, landing, landed, or retiring worker (aliases: pw)

            [prune-worker command options]
                  -w, --worker=          Worker to prune
                  -a, --all-stalled      Prune all stalled workers

      -------------------------------------
      41     rename-pipeline            Rename a pipeline (aliases: rp)

            [rename-pipeline command options]
                  -o, --old-name=        Existing pipeline or instance group to rename
                  -n, --new-name=        New name for the pipeline or instance group

      -------------------------------------
      42     rename-team                Rename a team (aliases: rt)

            [rename-team command options]
                  -o, --old-name=        Current team name
                  -n, --new-name=        New team name

      -------------------------------------
      43     rerun-build                Rerun a build (aliases: rb)

            [rerun-build command options]
                  -j, --job=PIPELINE/JOB    Name of the job that you want to rerun a build
                                            for
                  -b, --build=              The number of the build to rerun
                  -w, --watch               Start watching the rerun build output

      -------------------------------------
      44     resource-versions          List the versions of a resource (aliases: rvs)

            [resource-versions command options]
                  -c, --count=                        Number of versions you want to limit
                                                      the return to (default: 50)
                  -r, --resource=PIPELINE/RESOURCE    Name of a resource to get versions for
                      --json                          Print command result as JSON
                      --team=                         Name of the team to which the
                                                      pipeline belongs, if different from
                                                      the target default

      -------------------------------------
      45     resources                  List the resources in the pipeline (aliases: rs)

            [resources command options]
                  -p, --pipeline=        Get resources in this pipeline
                      --json             Print command result as JSON
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      46     schedule-job               Request the scheduler to run for a job. Introduced as a recovery command for the v6.0 scheduler. (aliases: sj)

            [schedule-job command options]
                  -j, --job=PIPELINE/JOB    Name of a job to schedule

      -------------------------------------
      47     set-pipeline               Create or update a pipeline's configuration (aliases: sp)

            [set-pipeline command options]
                  -n, --non-interactive         Skips interactions, uses default values
                      --no-color                Disable color output
                  -d, --dry-run                 Run a set pipeline step but in dry-run mode
                      --check-creds             Validate credential variables against
                                                credential manager
                  -p, --pipeline=               Pipeline to configure
                  -c, --config=                 Pipeline configuration file, "-" stands for
                                                stdin
                  -v, --var=[NAME=STRING]       Specify a string value to set for a
                                                variable in the pipeline
                  -y, --yaml-var=[NAME=YAML]    Specify a YAML value to set for a variable
                                                in the pipeline
                  -l, --load-vars-from=         Variable flag that can be used for filling
                                                in template values in configuration from a
                                                YAML file
                      --team=                   Name of the team to which the pipeline
                                                belongs, if different from the target
                                                default

      -------------------------------------
      48     set-team                   Create or modify a team to have the given credentials (aliases: st)

            [set-team command options]
                  -n, --team-name=                                          The team to
                                                                            create or modify
                      --non-interactive                                     Force apply
                                                                            configuration

                Authentication:
                      --local-user=USERNAME                                 A whitelisted
                                                                            local concourse
                                                                            user. These are
                                                                            the users
                                                                            you've added at
                                                                            web startup
                                                                            with the
                                                                            --add-local-use-

                                                                            r flag.
                  -c, --config=                                             Configuration
                                                                            file for
                                                                            specifying team
                                                                            params

                Authentication (Bitbucket Cloud):
                      --bitbucket-cloud-user=USERNAME                       A whitelisted
                                                                            Bitbucket Cloud
                                                                            user
                      --bitbucket-cloud-team=TEAM_NAME                      A whitelisted
                                                                            Bitbucket Cloud
                                                                            team

                Authentication (CloudFoundry):
                      --cf-user=USERNAME                                    A whitelisted
                                                                            CloudFoundry
                                                                            user
                      --cf-org=ORG_NAME                                     A whitelisted
                                                                            CloudFoundry org
                      --cf-space=ORG_NAME:SPACE_NAME                        (Deprecated) A
                                                                            whitelisted
                                                                            CloudFoundry
                                                                            space for users
                                                                            with the
                                                                            'developer' role
                      --cf-space-with-any-role=ORG_NAME:SPACE_NAME          A whitelisted
                                                                            CloudFoundry
                                                                            space for users
                                                                            with any role
                      --cf-space-with-developer-role=ORG_NAME:SPACE_NAME    A whitelisted
                                                                            CloudFoundry
                                                                            space for users
                                                                            with the
                                                                            'developer' role
                      --cf-space-with-auditor-role=ORG_NAME:SPACE_NAME      A whitelisted
                                                                            CloudFoundry
                                                                            space for users
                                                                            with the
                                                                            'auditor' role
                      --cf-space-with-manager-role=ORG_NAME:SPACE_NAME      A whitelisted
                                                                            CloudFoundry
                                                                            space for users
                                                                            with the
                                                                            'manager' role
                      --cf-space-guid=SPACE_GUID                            A whitelisted
                                                                            CloudFoundry
                                                                            space guid

                Authentication (GitHub):
                      --github-user=USERNAME                                A whitelisted
                                                                            GitHub user
                      --github-org=ORG_NAME                                 A whitelisted
                                                                            GitHub org
                      --github-team=ORG_NAME:TEAM_NAME                      A whitelisted
                                                                            GitHub team

                Authentication (GitLab):
                      --gitlab-user=USERNAME                                A whitelisted
                                                                            GitLab user
                      --gitlab-group=GROUP_NAME                             A whitelisted
                                                                            GitLab group

                Authentication (LDAP):
                      --ldap-user=USERNAME                                  A whitelisted
                                                                            LDAP user
                      --ldap-group=GROUP_NAME                               A whitelisted
                                                                            LDAP group

                Authentication (Microsoft):
                      --microsoft-user=USERNAME                             A whitelisted
                                                                            Microsoft user
                      --microsoft-group=GROUP_NAME                          A whitelisted
                                                                            Microsoft group

                Authentication (OAuth2):
                      --oauth-user=USERNAME                                 A whitelisted
                                                                            OAuth2 user
                      --oauth-group=GROUP_NAME                              A whitelisted
                                                                            OAuth2 group

                Authentication (OIDC):
                      --oidc-user=USERNAME                                  A whitelisted
                                                                            OIDC user
                      --oidc-group=GROUP_NAME                               A whitelisted
                                                                            OIDC group

                Authentication (SAML):
                      --saml-user=USERNAME                                  A whitelisted
                                                                            SAML user
                      --saml-group=GROUP_NAME                               A whitelisted
                                                                            SAML group


      -------------------------------------
      49     status                     Login status

      -------------------------------------
      50     sync                       Download and replace the current fly from the target (aliases: s)

            [sync command options]
                  -f, --force            Sync even if versions already match.
                  -c, --concourse-url=   Concourse URL to sync with
                  -k, --insecure         Skip verification of the endpoint's SSL certificate
                      --ca-cert=         Path to Concourse PEM-encoded CA certificate file.
                      --client-cert=     Path to a PEM-encoded client certificate file.
                      --client-key=      Path to a PEM-encoded client key file.

      -------------------------------------
      51     targets                    List saved targets (aliases: ts)

      -------------------------------------
      52     teams                      List the configured teams (aliases: t)

            [teams command options]
                      --json             Print command result as JSON
                  -d, --details          Print authentication configuration

      -------------------------------------
      53     trigger-job                Start a job in a pipeline (aliases: tj)

            [trigger-job command options]
                  -j, --job=PIPELINE/JOB    Name of a job to trigger
                  -w, --watch               Start watching the build output
                      --team=               Name of the team to which the job belongs, if
                                            different from the target default

      -------------------------------------
      54     unpause-job                Unpause a job (aliases: uj)

            [unpause-job command options]
                  -j, --job=PIPELINE/JOB    Name of a job to unpause
                      --team=               Name of the team to which the job belongs, if
                                            different from the target default

      -------------------------------------
      55     unpause-pipeline           Un-pause a pipeline (aliases: up)

            [unpause-pipeline command options]
                  -p, --pipeline=        Pipeline to unpause
                  -a, --all              Unpause all pipelines
                      --team=            Name of the team to which the pipeline belongs, if
                                         different from the target default

      -------------------------------------
      56     unpin-resource             Unpin a resource (aliases: ur)

            [unpin-resource command options]
                  -r, --resource=PIPELINE/RESOURCE    Name of the resource

      -------------------------------------
      57     userinfo                   User information

            [userinfo command options]
                      --json             Print command result as JSON

      -------------------------------------
      58     validate-pipeline          Validate a pipeline config (aliases: vp)

            [validate-pipeline command options]
                  -c, --config=                 Pipeline configuration file
                  -s, --strict                  Fail on warnings
                  -o, --output                  Output templated pipeline to stdout
                      --enable-across-step      Enable the experimental across step to be
                                                used in jobs. The API is subject to change.
                  -v, --var=[NAME=STRING]       Specify a string value to set for a
                                                variable in the pipeline
                  -y, --yaml-var=[NAME=YAML]    Specify a YAML value to set for a variable
                                                in the pipeline
                  -l, --load-vars-from=         Variable flag that can be used for filling
                                                in template values in configuration from a
                                                YAML file

      -------------------------------------
      59     volumes                    List the active volumes (aliases: vs)

            [volumes command options]
                  -d, --details          Print additional information for each volume
                      --json             Print command result as JSON

      -------------------------------------
      60     watch                      Stream a build's output (aliases: w)

            [watch command options]
                  -j, --job=PIPELINE/JOB                Watches builds of the given job
                  -b, --build=                          Watches a specific build
                  -u, --url=                            URL for the build or job to watch
                  -t, --timestamps                      Print with local timestamp
                      --ignore-event-parsing-errors     Ignore event parsing errors
                      --team=                           Name of the team to which the
                                                        pipeline belongs, if different from
                                                        the target default

      -------------------------------------
      61     workers                    List the registered workers (aliases: ws)

                [workers command options]
                      -d, --details          Print additional information for each worker
                          --json             Print command result as JSON

    -------------------------------------
    ________________________________________________________
    ________________________________________________________
