===========================================================================
TL;DR
PROBLEM WITH DISABLE GIT ACCOUNT:

╰─ git push --set-upstream origin feature/fix-missing-double-quote
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/companieshouse/xml-ami.git/'


               1. ssh-keygen -t rsa -b 4096 -f id_ghub_ch_rsa       # I get [id_ghub_ch_rsa] + [id_ghub_ch_rsa.pub]
               2. pbcopy < ~/.ssh/id_ghub_ch_rsa.pub                # I copy to the clipboard
               3. GitHub account -> Settings -> SSH and GPG keys -> SSH keys [New SSH key] --> paste
               4. GitHub account -> Settings -> Developer settings -> Personal access tokens [Generate new token]

                                    Tokens you have generated that can be used to access the GitHub API.

                                    Make sure to copy your personal access token now. You won’t be able to see it again!
                                    ghp_...................................C


               5. Stick it into ~/.gitconfig

                38 [remote "origin"]
                39     prune = true
                40 [url "https://sbasile-ch:ghp_...................................C@github.com/"]
                41     insteadOf = https://github.com/
                42 [url "https://sbasile-ch:ghp_...................................C@github.com/"]
                43     insteadOf = git@github.com:
                46
===========================================================================




--------------------------------------------------- / Encription

       SERVER             13           CLIENT
 i)    ----------------- [P]-----------------   a common prime number [P] is agreed
                                                between CLIENT & SERVER
                          7
 ii)   -----------------[AES]----------------   a common algorithm ("encryption generator" (ex AES))
                                                is agreed. Ex. choose another PRIME P2  (7)
 iii)   8                                5
       [pS]                             [pC]    2 normal integers are individually chosen by CLIENT and SEVER
                                                They are kept secret and not sent.
 iv)    1                                6
       [pubS]                           [pubC]  2 public keys are generated individually (& sent)
                                                using some formula F and the info so far:

                                                          ( P , AES , pS ) ---> pubS
                                                          ( P , AES , pC ) ---> pubC

                                                ex F: (P ^ pS   mod  P2)
                                                                      13 ^ 8   % 7 = 815730721 % 7 = 1
                                                                      13 ^ 5   % 7 = 371293    % 7 = 6


 v)    [K]                              [K]     Diffie-Hellman alg. proves that working individually with the info so far,
                                                both CLIENT & SERVER calculate the same number [K]

                                                          Diffie-Hellman ( P - pS - pubC ) ---> K
                                                          Diffie-Hellman ( P - pC - pubS ) ---> K

                                                                      6  ^ 8   % 7 = 1679616  % 7 = 1
                                                                      1  ^ 5   % 7 = 1        % 7 = 1

                                                called "Session key"
                                                that is used to encrypt all the communication that follows.

                                               The magic is due to a property of modulo exponents:

                                                           ( P ^ x mod P2 ) ^ y  mod P2  = P ^ xy  mod P2   = K
                                                           ( P ^ y mod P2 ) ^ x  mod P2  = P ^ yx  mod P2   = K


       To have K that can be any value between 1 - (P-1)
       the P2 at step ii) is chosen as a "primitive root modulo P" that is a quite complex stuff
       and it's not easy to locate it with a simple formula, even if they are still calculated with
       more complex calculations.

       session key
       Asymmetrical Encryption
       Symmetrical Encryption
       aes128-ctr
       1st authentication : establish encryption to protect future communication.
       2nd encrypting the connection
       public/private asymmetrical key pairs that can be created are only used for authentication,
       public  key:  can only encrypt messages (not able to decrypt back)
       private key:  the only component capable to decrypt
       session key:  Diffie-Hellman
                     client & server combine individually their own private data with public data
                     from the other system to arrive at an identical secret session key.
--------------------------------------------------- / ssh
        SERVER              CLIENT
         |                  | ~/.ssh/known_hosts
         |                  |       /id_rsa
         |              1)  |       /id_rsa.pub <--- ex. "ssh-rsa AAAAB3N.....sbasile@pd12682.internal.ch"
         |                  |            |                     ^
         |                  |            |to copy here    (use ssh-copy-id -i ~/.ssh/id_rsa.pub user@host)
         |                  |            |
     2)  |~/.ssh/authorized_keys  <------' 1 line for each pub-key (so copy pasted here the client id_rsa.pub)
         |                  |              (nb. each *.pub key has the 1st chars saying its type: rsa/dsa/...)
       __|_____            _|_______       The server will authenticate only these clients
      |        |          |         |
      |  sshd  |  <=====> |   ssh   |
      |________|          |_________|

      if ssh-copy-id is not present, then to copy the key on the remote server I can do any of the following:

      --------------1
      scp ~/.ssh/id_rsa.pub user@remote.example.com:/tmp/id_rsa.pub
      ssh user@remote.example.com
      cat /tmp/id_rsa.pub >> ~/.ssh/authorized_keys

      -------------2
      cat ~/.ssh/id_rsa.pub | ssh user@remote.example.com 'cat >> ~/.ssh/authorized_keys'




      There could be different ways to configure the handshaking, anyhow
      roughly it is:
             1) a client connects

    - 'sshd':   is the real OpenSSH daemon (on the server)
                that interacting with the other ssh client
                they together  allow a secure encrypted communication
                over an insecure network.

                -D   sshd will not detach and does not become a daemon.
                     This allows easy monitoring of sshd.
                -f   to specify a config file other than /etc/ssh/sshd_config
                -p   a port other than 22


    ~/.ssh    <--- is a dir (on the client) (N.B. chmod must be 700 for this dir)
                   containing usually something like:

                          -rw-r--r--  1 sbasile  staff   182 10 Jul  2015 config
                          -rw-------  1 sbasile  staff   668  2 Jul  2015 id_dsa <---- keys for SSH version 2 <--- DEFAULT
                          -rw-r--r--  1 sbasile  staff   626  2 Jul  2015 id_dsa.pub
                          -rw-------  1 sbasile  staff  3243 29 Jun  2015 id_rsa <---- keys for SSH version 1 / 2
                          -rw-r--r--  1 sbasile  staff   753 29 Jun  2015 id_rsa.pub
                          -rw-------  1 sbasile  staff  1468  6 Jan 13:00 known_hosts
                          -rw-r--r--  1 sbasile  staff    45  3 Jun  2015 ssh_config

                          the convention is
                            |    ~/.ssh/identity     rsa  SSH ver. 1     <---- this historical file explains the option -i (identity) where I
                       (D)  |    ~/.ssh/id_rsa       rsa  SSH ver.   2         specify with which key I want to connect
                            |    ~/.ssh/id_dsa       dsa  SSH ver.   2
                            |    ~/.ssh/id_ecdsa   ecdsa  SSH ver.   2

                                                   ec : elliptic curve

    - Once having a public key (eg id_rsa.pub) it's possible to log into a remote server R
      doing this on R:
                     - create or enter into dir ~/.ssh   (must have chmod 700)
                     - append in ~/.ssh/authorized_keys (or create if not present, with chmod 640)
                       the exact text of ~/.ssh/id_rsa.pub (with no new line)
                       (make it easy with  "ssh-copy-id -i ~/.ssh/id_rsa.pub user@host")
                     - (some servers calls that file with an ending 2: authorized_keys2)

                   ______________________________________
                   | Most probably the above commands are executed directly onto server R
                   | but anyhow ssh allows to execute each as ex:
                   |    - ssh basilest@R mkdir -p .ssh   (and add the password at prompt)
                   |    - cat .ssh/id_rsa.pub | ssh basilest@R 'cat >> .ssh/authorized_keys'
                   |_____________________________________

    - If a key (ie. id_rsa.pub) has been copied in the remote '~/.ssh/authorized_keys'
      then without any password I can connect directly as
              ssh -i ~/.ssh/id_rsa user@host


    - 'ssh-keygen': the above files are created by 'ssh-keygen':
                    ex. ssh-keygen -t rsa -b 4096 -C "your_email@example.com"  -f pippo_rsa

                              -t : rsa1            for SSH v.1
                                   rsa,dsa,ecdsa   for SSH v. 2
                              -b : min is    768
                                   default  2048
                                   ecdsa: ec sizes are 256 384  521

                              -f   to add a meaningfull name (otherwise you don't know for which
                                   server it was created)
                                   So  dir ~/.ssh can contain many different ssh-keys for different servers.

                              -O
                                   clear      clear all enabled permissions.  This is useful to clear
                                              the default set of permissions that can be
                                              added individually.

                                   force-command=command
                                              Forces the execution of command instead of any shell or
                                              command specified by the user when the certificate is
                                              used for authentication.

                                   no-agent-forwarding     Disable ssh-agent(1) forwarding
                                   no-port-forwarding      Disable port forwarding
                                   no-pty                  Disable PTY allocation
                                   no-user-rc              Disable execution of ~/.ssh/rc by sshd(8)
                                   no-x11-forwarding       Disable X11 forwarding


                   |_____  config
                   |            1	KeepAlive yes
                   |            2	ServerAliveInterval 20
                   |
                   |            3	Host github.com
                   |            4	  User git
                   |            5	  ProxyCommand /usr/local/bin/corkscrew wsproxy.internal.ch 8080 %h %p
                   |
                   |            6	Host wswebdev1
                   |            7	  HostName %h.orctel.internal
                   |_____  id_dsa
                   |            1	-----BEGIN DSA PRIVATE KEY-----    <--- this was without a passphrase
                   |            2	MIIBugIBdAKBgQCpHnP/mm59BzhOKjelK+BqozuwK3Li804qXkOfW0PC1em2CXAn
                   |            3	Al2AVYG/5ydl5uNuW1NEb+phcuLkhNhXYbf0fs7+q6Xbm/9Nt3I74Z4OFkSEUYfV
                   |                                ....
                   |           10	3CKM0PWJEa4aFMC9qNRZoFhRVdTzpQlussZdunYlLOjGmwZlHnPTGgIULR79nL2p
                   |           11	v5Iq6mWKZqVm0sEniWY=
                   |           12	-----END DSA PRIVATE KEY-----
                   |                          id_dsa
                   |                               1	-----BEGIN DSA PRIVATE KEY-----    <--- this how it looks with a passphrase
                   |                               2	Proc-Type: 4,ENCRYPTED
                   |                               3	DEK-Info: AES-128-CBC,2DADDEF9CB50685509A1197A4D244772
                   |                                                   ....
                   |                              10	3CKM0PWJEa4aFMC9qNRZoFhRVdTzpQlussZdunYlLOjGmwZlHnPTGgIULR79nL2p
                   |                              11	v5Iq6mWKZqVm0sEniWY=
                   |                              12	-----END DSA PRIVATE KEY-----
                   |_____  id_dsa.pub
                   |            1	ssh-dss AAAAB3NzaC1kc3MAAACBAKkdc/+abn0HO....== sbasile@pd12682.companieshouse.local
                   |_____  id_rsa
                   |            1	-----BEGIN RSA PRIVATE KEY-----
                   |            2	MIIJKQIBAAKCAgEA8zHExVpDqZNOBO38byaIrFZn1vaNRj+lAvkNEL6HZIZYaVyc
                   |           50	            ....
                   |           51	-----END RSA PRIVATE KEY-----
                   |_____  id_rsa.pub
                   |            1	ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQ....== sbasile@pd12682.internal.ch
                   |_____  known_hosts   <--- stores the servers where I connected to
                   |            1	wswebdev2.orctel.internal,192.168.60.202 ssh-rsa AAAAB3NzaC1yc2....
                   |            2	wswebdev1.orctel.internal,192.168.60.201 ssh-rsa AAAAB3NzaC1yc2....
                   |            3	github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDb....
                   |            4	chl-dev,10.100.100.102 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwZak....
                   |_____  ssh_config
                               1	ServerAliveInterval 15
                               2	ServerAliveCountMax 3

                      passphrase : when generating a key, if no passphrase is specified the key (ex. id_rsa file)
                                   is in clear text. With a passphrase it is encripted, so even if an hacker can access my id_rsa
                                   it's not usable.

                                   the passphrase is asked twice when creating the key:

                                    ╭─   6804   172.19.68.81  sbasile@pd12968   ~/.ss 
                                    ╰─ ssh-keygen -t dsa -f stef.dsa.test
                                    Generating public/private dsa key pair.
                      -----1---->   Enter passphrase (empty for no passphrase):
                      -----2---->   Enter same passphrase again:
                                    Your identification has been saved in stef.dsa.test.
                                    Your public key has been saved in stef.dsa.test.pub.
                                    The key fingerprint is:
                                    SHA256:zMPUhIRLJLjXCTJfNm0667GxOtBk4SZ3IVwst0wZucQ sbasile@pd12968.internal.ch
                                    The key's randomart image is:
                                    +---[DSA 1024]----+
                                    |   o.=+B...      |
                                    |  + *.E +o       |
                                    |   * # X. .      |
                                    |  o O @=         |
                                    |   O . oS        |
                                    |  . . +  .       |
                                    |   . . =         |
                                    |    . +          |
                                    |    .o           |
                                    +----[SHA256]-----+

                                    ╭─   6805   172.19.68.81  sbasile@pd12968   ~/.ss 
                                    ╰─




    - 'ssh-agent':     it can be started to run in background,

                 eval "$(ssh-agent -s)"  --> Agent pid 3319
                 echo $SSH_AGENT_PID     --> 3319
                 lsof | grep -i 3319     --> ssh-agent 3319 sbasile    3u    unix 0x6b706d27656c46d7  0t0  /var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-9sXXPCGOd5l2/agent.3318
                 echo ${SSH_AUTH_SOCK}   --> /var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-9sXXPCGOd5l2/agent.3318
                                             the default values is $TMPDIR/ssh-XXXXXXXXXX/agent.<ppid>
                 echo $TMPDIR            --> /var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T/

                       it can be started to run in background, eval "$(ssh-agent -s)"
                       having a pid (which is then stored in var  $SSH_AGENT_PID).
                       This agent opens a UNIX socket in $TMPDIR (full name in ${SSH_AUTH_SOCK}
                       but it can be changed with option -a: ssh-agent -a ...).
                       On this read-only-by-the-user SOCKET channel,
                       the agent interacts with the other utilities of the ssh- family:

                           ssh-add
                           ssh-agent
                           ssh-keygen
                           ssh-copy-id
                           ssh
                           sshd

                 ssh-agent -k        <-- it exits (kill) the running instance of ssh-agent
                                        (the pid is still in $SSH_AGENT_PID))
                                        the output is unset SSH_AUTH_SOCK;  <---- so use ssh-agent -k to remember these names
                                                      unset SSH_AGENT_PID;
                                                      echo Agent pid 3319 killed;

    - 'ssh-add':   adds any desired keys to the agent  (ex. ssh-add ~/.ssh/id_rsa)

                       ssh-add         with no arguments adds the 4 files (D) above, (or what present of them)
                                       (the passphrase (if any) must be filled)
                       ssh-add -l      list of the keys inside the agent
                       ssh-add -d      To remove the loaded keys (it can be usefull to test the passpharse
                                       because after the ssh-add -d another ssh-add  will ask for the passphrase)

    - The sequence is usually:
                               1. eval "$(ssh-agent -s)"       create a running instance of ssh-agent
                               2. ssh-add                      add any desired keys  (if keys have a passphrase I must enter it)
      ______________________________
      if an agent is not running, then a 'ssh-add'
      will give :
                "Could not open a connection to your authentication agent."

      ______________________________
      while if I never added a key to the agent (never executed a 'ssh-add'), then a 'ssh-add -l'
      will give :
                ""The agent has no identities.
      ______________________________
--------------------------------------------------------------- ssh-agent

       1. a ssh-agent is a box where I add keys (with ssh-add)
        .--------------.
        |              |
        |              |    <----- box (empty: no keys added yet)
        |              |
        '--------------'
          ssh-agent


        .--------------.
        |  key1.rsa    |
        |  key2.dsa    |    <----- 2 keys added with ssh-add
        |              |                   (these keys can be removed as
        '--------------'                       . ssh-add -d
          ssh-agent                            . ssh-agent -t 3600  <--- launching the agent with an elapsing time in sec)

       2. a ssh-agent allows to ssh without password to the servers where in the relative 'authorized_keys'
          there is a public version (ex. "key3.rsa.pub") of a private key loaded in the agent

            .--------------.                          .--------------.
            |  key1.rsa    |                          |              | REMOTE
            |  key2.dsa    |        .________________ | key3.rsa.pub | SERVER
            |  key3.rsa    |_______/                  |              |
            '--------------'                          '--------------'
              ssh-agent                                authorized_keys


          . the client's ssh-agent sends to the server the public keys of every private key it holds
          . if it stores 6 keys it can send up to 6 keys before the SERVER accepts the one it knows.
            In the above picture the SERVER will accept the 3rd attempt on key3.
          . Some servers (GitHub) will not accept many attempts, and will kill the connection.
            So having an ssh-agent with many keys can not work



       3. a ssh-agent is created with an --> eval "$(ssh-agent)"
          It sets the 2 vars [$SSH_AGENT_PID] [$SSH_AUTH_SOCK]

          Note that:
                     3.1  I can start many instances of 'ssh-agent'
                     3.2  In the same shell, the 2 vars remain with the values of the first
                          even if I kill it

                          ____________ check no agent is running

                          ps -u $(whoami) | grep ssh-agent
                            \__ 504 79617 ttys008    0:00.00 grep ssh-agent

                          echo "[$SSH_AGENT_PID] [$SSH_AUTH_SOCK]"
                            \__ [] []

                          ____________ start 1st

                          eval "$(ssh-agent)"
                            \___ Agent pid 78770

                          ps -u $(whoami) | grep ssh-agent
                            \___ 504 78770 ??         0:00.00 ssh-agent
                                 504 79617 ttys008    0:00.00 grep ssh-agent

                          echo "[$SSH_AGENT_PID] [$SSH_AUTH_SOCK]"
                            \___ [78770] [/var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-dNfeXFpDuNG2/agent.78769]


                          ____________ start 2nd
                          eval "$(ssh-agent)"
                            \___ Agent pid 79701

                          ps -u $(whoami) | grep ssh-agent
                            \___ 504 78770 ??         0:00.00 ssh-agent
                                 504 79701 ??         0:00.00 ssh-agent
                                 504 79617 ttys008    0:00.00 grep ssh-agent

                          echo "[$SSH_AGENT_PID] [$SSH_AUTH_SOCK]"  <-----------
                            \___ [78770] [/var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-dNfeXFpDuNG2/agent.78769]
                                  ^^^^                                                                             ^^^^^
                                      \______________still the 1st is shown ________________________________________/

                          ____________ default kill
                          ssh-agent -k
                            \___ unset SSH_AUTH_SOCK;
                                 unset SSH_AGENT_PID;
                                 echo Agent pid 78770 killed;                  <---- is terminated the 1st

                          ps -u $(whoami) | grep ssh-agent
                            \___ 504 79701 ??         0:00.00 ssh-agent        <---- yes, the 1st gone
                                 504 79617 ttys008    0:00.00 grep ssh-agent

                          echo "[$SSH_AGENT_PID] [$SSH_AUTH_SOCK]"  <-----------
                            \___ [78770] [/var/folders/6k/qfwxd7ln1tdg_6pw7s6c10k00000gr/T//ssh-dNfeXFpDuNG2/agent.78769]
                                  ^^^^                                                                             ^^^^^
                                      \______________    STILL OLD VALUES   ________________________________________/

                          ____________ default kill doesn't work
                          ssh-agent -k
                            \___ kill: No such process     <------ as the pid is not found (SSH_AGENT_PID=78770
                                                                   still points to the old one) the 2nd is not killed.
                                                                   I must close it with a manual kill:
                                                                             kill -15 79701


                     3.3  If different 'ssh-agent's are launched in different shells / terminals / sessions
                          the shell variables are each relevant to every single shell so there is no way
                          without hacks to share their values keeping it as single one.

                     3.4  the result is that with a 'ps' I can see many ssh-agent instances in my system.
                          Maybe the shells which launched them are already terminated, but their ssh-agent
                          processes are still running.
                          This can partially be kept under control, as I can execute the ssh-agent with
                          the 'exec' modality, where the agent is killed when the command passed as argument
                          is terminated. Ex:

                                        exec ssh-agent /bin/bash <---- I end up in a shell where the agent is running.
                                                                       when this shell is closed, that ssh-agent process
                                                                       is also killed.

                     3.5  Every ssh-agent contains its added keys:

                            .--------------.              .--------------.             .--------------.
                            |  key1.rsa    |              |  key2.dsa    |             |  key1.rsa    |
                            |  key2.dsa    |              |              |             |              |
                            |              |              |              |             |              |
                            '--------------'              '--------------'             '--------------'
                              ssh-agent                      ssh-agent                    ssh-agent

                     3.6  It's possible with a shell script to extract the private keys
                          from a ssh-agent, if a person has root access.
                          Thus it could be good to
                                . keep different keys in different agents
                                  (ex work Github/.. vs private Github/...)
                                . keep the list of keys in each ssh-agent < 4/5


       4. ssh-agent forwarding.
          It solves the problem of the following picture:

                            .--------------.              .--------------.             .--------------.
                            |              |   ssh(1)     |              |   ssh(2)    |              |
                            |              | -----------> |              | --------->  |              |
                            |              |              |              |             |              |
                            '--------------'              '--------------'             '--------------'
                              local client                     server(1)                  server(2)

          4.1) I ssh into a server(1)
          4.2) then from there I ssh into another server(2)
               The server(1) has not my key there in any agent
               so it asks me to type my password.
               2 problems on this:
                     a) I must type my password loosing the benefit of having a ssh-agent
                     b) my typed password is
                                   . typed in the local client
                                   . sent encrypted over ssh(1) to the server(1)
                                   . decrypted in server(1)
                                   . sent to the console-driver which will feed the second ssh(2)
                       a key-logger (listening the console driver) in server(1) can then intercept it

          4.3) the SOLUTION is to open the ssh(1) with the ssh-agent forwarding option.
               This is done in 2 ways
                          1)  ssh -A ....                                # this will work only on this ssh
                          2)  vim ~/.ssh/config   ---> ForwardAgent yes  # this will affect ALL the ssh

               The second ssh(2), will not ask for a password.
               It will detect the presence of a remote agent, and ask for no password.


      ______________________________

    - Configure SSH server:  add a 'git' user shared among all the project developers:
                             sudo adduser git
                             su git
                             cd
                             mkdir .ssh && chmod 700 .ssh
                             touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
                             cat /tmp/id_rsa.john.pub    >> ~/.ssh/authorized_keys
                             cat /tmp/id_rsa.josie.pub   >> ~/.ssh/authorized_keys
                             cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
                             cd /opt/git
                             mkdir project.git
                             cd project.git
                             git init --bare
                             cat /etc/shells    <--- store all possible shells (add the path of git limited shell)
                             which git-shell    /usr/bin/git-shell
                             sudo vim /etc/shells
                             sudo chsh git      <--- add git to user able to login with a shell (chsh: change login shell)
                                                     user xxx can log from remote: ssh git@gitserver
    - 'ssh':
                ssh -v git@github.com     -v verbose   -vv   -vvv (max)


                -1    try SSH ver 1
                -2         "     2
                -4    IPv4 addr only
                -6    IPv6      only

                -p                 to connect to a port different from 22
                -i keyfile         do specify something diff from the defaults ~/.ssh/id_dsa ...
                -g                 Allows remote hosts to connect to local forwarded ports.
                -e escape_char     can change the escpae default char ~ (see below, session manag.) to another

                -t                 INTERACTIVE shell:  ssh -t user@hostname sudo command
                                   (note that an INTERACT. and a NOT-INTERACT. shell load different config files
                                    so for ex. the $PATH vars could be different)


    - session commands:
                        ENTER ~ .          ENTER: to be sure to have a newline
                                           ~      starts the submission of ssh control char
                                           .      ssh control char to mean END session

                                           The above close a stuck ssh session.

                             ~?            help (list of avail escapes)

                             ~^Z           suspend the remote ssh connection and
                                           allow to be at 'local' prompt.
                        Once I'm over, a fg bring me back into remote.

    - remote commands via SSH:

              |  ssh user1@serv date                     1 command
              |  ssh user1@serv 'df -H'                  1 command  (quote if spaces sometimes can help)
              |  ssh user1@serv 'ls; pwd; cat a.txt'     + commands
              |  ssh user1@serv 'ls && pwd && cat a.txt' + commands
              |
              |
              |                                          + commands  (the "heredoc" ususl way to write on multilines) :
              |
              |  VAR1="boo"
              |  ssh -T $HOST << EOSSH           ssh -T $HOST <<'EOSSH'    <---- use '' is want to assign and use remote var
              |  ls                              VAR1=`pwd`
              |  pwd                             echo $VAR1
              |  if true; then
              |    echo $VAR1                    VAR2=$(uname -a)
              |  else                            echo $VAR2
              |    echo "False"
              |    fi                            EOSSH
              |  EOSSH
              |
              |  use of LOCAL vars              use of REMOTE vars
              |
              |
              |
              |  ssh user1@serv '/scripts/r.sh'          run remote script
              |  ssh user1@serv < loc.sh                 run a local script (just an input redirect, so also a pipe work:    cat loc.sh | ssh user1@server1 )



