   ftp://ftp.ora.com/pub/examples/linux/drivers/




   1. goto:   https://www.kernel.org/pub/linux/kernel/v3.0/

   2. downloaded :
                 linux-3.18.9.tar.gz     07-Mar-2015 13:23  117M

   3. make a clean dir: ~/kernel    + ~/kernel/build

   4. unzip linux-3.18.9.tar.gz inside ~/kernel

   5. write this funct in .bashrc
             function kb {
                 mkdir -p ~/kernel/build/$(basename $(pwd))     if  pwd = /home/stiv/kernel  basename = kernel
                 echo     ~/kernel/build/$(basename $(pwd))
             }
   6. cd linux-3.18.9
      make distclean
      make defconfig O=`kb`
      make O=`kb`

   7. here the kernel image:   ~/kernel/linux-3.18.9/arch/x86/boot/bzImage
      the size is 5,6M


















   Kernel:  2.6.10

   1/18  Introduction to Device Drivers
   ===========================================

  modularity:   each devide driver can be "plugged in” at runtime
  policy-free:  split into two parts:
                   “what capabilities are to be provided” (the mechanism) : the driver
                   “how those capabilities can be used”   (the policy): un upper layer


       Process management:    - create / detrsy processes
                              - make them communicate: signals, pipes, or interprocess communication
                              - abstarct on 1 CPU, more processes

       Memory management:     - set of function calls, ranging from the simple malloc/free
                                to more complex

       Filesystems:           - everything is 1 file
                                multiple filesystem TYPES, different ways of organizing data
                                on the physical medium (formatted ext3, FAT, ...)

       Device control:        - The kernel must have embedded specific CODE for any device

       Networking:            - all the routing and address resolution issues are implemented within the kernel


  Loadable Modules:  can attach and unmount at RUNTIME (through a syscall 'init_module' which only supeuser can call
                                                        or techincally one who has 'CAP_SYS_MODULE')
                     A module is a piece of code
                     (not linked into a complete executable) that can be dynamically linked to the running kernel
                     by the
                                 insmod  (or better: modprobe)
                     program and can be unlinked by the
                                 rmmod
                     program.
                     To see the running module: lsmod

                     For SECURITY reson, it is:
                        - possible to compile the lernel itself with 'CLOSED' the possibility to load new modules
                        - disable loading of modules at runtime also for normal compiled kernel.


  3 Classes of Modules:
                    Character devices:   a stream of bytes like a normal file:
                                         They implement at least the sys call:
                                                    open,
                                                    close,
                                                    read,
                                                    write
                                         The only diff respect a normal file, is that seldom there is
                                         something like a 'seek' (to go to and fro), but access is most
                                         ofetn sequentially.

                                                    examples: /dev/console
                                                              /dev/ttyS0
                                                              /dev/lp0

                    Block devices:       Block drivers have a completely different interface TO THE KERNEL
                                         than char drivers. But not to the user/application that sees them as a char device.
                                         Block devices can only handle I/O operations that transfer one or more whole
                                         blockblocks, which are usually 512 bytes (or a larger).

                                                    they also stay in /dev

                    Network devices:    is in charge of sending and receiving data packets.
                                        Many network connections
                                        (especially those using TCP) are stream-oriented, but network devices are, usu-
                                        ally, designed around the transmission and receipt of packets. A network driver
                                        knows nothing about individual connections; it only handles packets.

     ---------------------------------- Kernel numbers
     2.6.x   (the even versions) are STABLE
     2.7.x   (the odd  versions) NOT   (under development, they expire in some days)




   2/18  Building and Running Modules
   ===========================================
   linked to kernel obj: 2.6 modules are linked against object files found in the kernel source tree;
                         the result is a more robust module loader, but also the requirement that those object file
                         are availble.

   Compiling the kernel: The build process for modules differs significantly from that used for user-space applications;
                         the kernel is a large, standalone program with detailed and explicit requirements on how
                         its pieces are put together.

   modprobe
   modinfo
   lsmod
   insmod
   rmmod

/proc/modules             is a just ~100 lines text file listing for each line a module and its info

lsmod                     is a trivial prog (no params) to nicely cat /proc/modules

/lib/modules/`uname -r`   is the dir where the modules are stored.

uname                     prints system information.
       -a, --all

       Linux stiv-GP60-2PE 3.16.0-60-generic #80~14.04.1-Ubuntu SMP Wed Jan 20 13:37:48 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux

      |----|-------------|-----------------|---------------------------------------------------|------|------|------|----------|
       -s       -n              -r                              -v                                -m     -p     -i      -o

                                        -s, --kernel-name   <---  same as 'uname' alone with no option
                                        -n, --nodename (network hostname)
                                        -r, --kernel-release
                                        -v, --kernel-version
                                        -m, --machine (hardware name)
                                        -p, --processor (type / or "unknown")
                                        -i, --hardware-platform or "unknown"
                                        -o, --operating-system

"version magic"     Every module contains a small string containing important information,
                    such as the kernel and compiler versions.
                    This allows the kenel to complain if a modules is loaded with a wrong version.

CONFIG_MODVERSIONS  is an option that can be used when a module is compiled.
                    In the compilation output there will be a section detailing the versions of every interface used

depmod              Generates a file listing what other modules each module needs (if any),

modinfo             extracts module info in the format  " info : value "
                    'module' can be passed as a file name ex
                                modinfo /lib/modules/3.16.0-60-generic/kernel/drivers/hid/hid.ko
                    or module name
                                modinfo hid
                    output ex:
                            filename:       /lib/modules/3.16.0-60-generic/kernel/drivers/hid/hid.ko
                            license:        GPL
                            author:         Jiri Kosina
                            author:         Vojtech Pavlik
                            author:         Andreas Gal
                            srcversion:     A8A35D7D907D84D8F5FF7C7
                            depends:
                            intree:         Y
                            vermagic:       3.16.0-60-generic SMP mod_unload modversions
                            signer:         Magrathea: Glacier signing key
                            sig_key:        BE:C0:E2:4C:6C:15:79:A9:A8:E8:83:45:2F:3F:21:D7:73:D1:FE:BD
                            sig_hashalgo:   sha512
                            parm:           ignore_special_drivers:int
                            parm:           debug:toggle HID debugging messages (int)

                    -F, --field     to have one specific field only.
                                    ex    modinfo  -F author hid       or shorthand:  modinfo -a hid

                                                                       shorthands:
                                                                                      -a --author,
                                                                                      -d --description,
                                                                                      -l --license,
                                                                                      -p --parameters,
                                                                                      -n --filename
                    modinfo can be used to extract dependencies of a module.
                    It knows nothing of aliases or install commands, differently by  "modprobe --show-depends"

systool -v -m module_name     lists the options set for that module

insmod              Simple program to insert a module into the Linux Kernel
                    modprobe(8) is more clever and can handle module dependencies.

rmmod               like "modprobe -r"

                    rmmod [-f] [-w] [-s]      [-v]      [modulename]
                                   syslog   verbose

                                -w --wait           Normally, rmmod will refuse to unload modules which are in use.
                                                    With this option, rmmod will isolate the module,
                                                    and wait until the module is no longer used.
                                                    See lsmod(8)) for information on usage counts.

modprobe            /add/remove (-r)/get info/ for 1 or more modules
                    The work of resolving symbols and understanding parameters
                    is done by the kernel not by modprobe.
                    So module failures are logged by the kernel in 'dmesg'.

                       - list of modules on the command line can be passed indifferently with undersores _ or -
                         as modprobe will translate all into underscores.

                       - those modules are then searched in dir  /lib/modules/`uname -r`
                         or otherwise in dir /lib/modules/xxxx  with xxxx specified by option  -S, --set-version

                       - config settings  are searched in:
                                       1 /etc/modprobe.d   (can be changed by option -C --config)
                                       2 options specified on the kernel command line:
                                                           in the form <module>.<option>
                                                           and blacklists in the form of modprobe.blacklist=<module>.
                                       3 $MODPROBE_OPTIONS environment var

                         config settings are usually some 'install' or 'remove' command
                         config settings can be dumped by option -c --show config
                       - dependencies (by any other modules) are expected in a file modules.dep.bin (generated by 'depmod')
                       - the root directory for installed modules is by default /, but can be specified with option -d --dirname
                       -a                 option to add the listed modules
                       -b                 option to use blacklist
                       -r, --remove       (modules) If the modules it depends on are also unused, modprobe will try to remove them too.

                       -n, --dry-run, --show       only print what would do without doing

                       --ignore-install  ignore any 'install' commands (referring to this module) found in the config files
                       --ignore-remove   ignore any 'remove'  commands (referring to this module) found in the config files
                       -i                to have both the 2 above

                       -R                 print all modules names that match an ALIAS

                       --force-vermagic   to force adding even on "version magic" mismatch
                       --force-modversion to force adding even when the module section created by CONFIG_MODVERSIONS lists some incompatibility.
                       -f                 shorthand for having both the 2 --force-.... above


                      -q, --quiet         used when return code is enough,
                                          as it will be != 0 on errors or add/remove on modules not present.
                      --show-depends      lists the dependencies of a module, including the module itself
                                          (a list of lines starting with "insmod" / "install")
                                          ex
                                                modprobe --show-depends psmouse
                                                insmod /lib/modules/3.16.0-60-generic/kernel/drivers/input/mouse/psmouse.ko

                      -s, --syslog        log errors to syslog rather than standard error.
                      -v, --verbose




    ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   3/18  Char Drivers
   ===========================================


     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------


   4/18  Debugging Techniques
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   5/18  Concurrency and Race Conditions
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   6/18  Advanced Char Driver Operations
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   7/18  Time, Delays, and Deferred Work
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   8/18  Allocating Memory
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   9/18  Communicating with Hardware
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   10/18  Interrupt Handling
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   11/18  Data Types in the Kernel
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   12/18  PCI Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   13/18  USB Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   14/18  The Linux Device Model
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   15/18  Memory Mapping and DMA
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   16/18  Block Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   17/18  Network Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   18/18  TTY Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------


