-------------------------------
     PORT numbers
-------------------------------

/etc/services

      cat  /etc/services | grep -i ftp

         ftp-data    20/tcp
         ftp         21/tcp
         tftp        69/udp
         sftp        115/tcp
         ftps-data   989/tcp        # FTP over SSL (data)
         ftps        990/tcp
         venus-se    2431/udp       # udp sftp side effect
         codasrv-se  2433/udp       # udp sftp side effect
         gsiftp      2811/tcp
         gsiftp      2811/udp
         frox        2121/tcp       # frox: caching ftp proxy
         zope-ftp    8021/tcp       # zope management by ftp

-------------------------------
     SW ARCHITECTURE
-------------------------------

All the protocols (TCP, X.25, Novel, ...) are implemented
as 1 socket (
    AF_INET    AF_INET6      :  TCP  <---- yes, even TCP of course
    AF_X25                   :  X.25
    AF_IPX                   :  Novel
    AF_UNIX                  :  Unix domain
    ....
       can be extended
 )
 1 socket is an API, implemented in the 'libc' C library
 in the Linux Kernel.
 Each API-Socket exports the standard methods
      'bind'
      'listen'
      'connect'
      'accept'

-------------------------------
     127.0.0.0   127.0.0.1
-------------------------------
The first is the 'network' of the loopback address
The second is the loopback interface, the address
I can use to test my SW network stack
without using a real network.

-------------------------------
     ARP
-------------------------------

Address Resolution Protocol is the translation IP --> MAC.
To discover the MAC of a given IP a broadcast request is
sent. The host with that IP will answer.
The MAC is then read from the answer and stored in
an ARP-cache.
Entries of the cache are renewed after some timer elapses.

linux command to dump the arp cache: arp

        Address                  HWtype  HWaddress           Flags Mask            Iface
        192.168.1.1              ether   f4:8e:92:08:3a:0d   C                     wlan0


    arp -d      to delete an entry   (ex. arp -i eth3 -d 192.168.100.17)
    arp -s      (or --set)   to add 1 entry (ex. arp -s 192.168.100.17 -i eth3 -D eth3 pub)

-------------------------------
     ROUTING TABLES
-------------------------------
NB. There are more than 1.
    commands are:
       netstat -rn
       route -n     only displays information in the main routing table
       ip route     to access ALL routing features of the Kernel


-------------------------------
     ROUTING TABLES
-------------------------------
route -n

      Kernel IP routing table
      Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
      0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 wlan0
      192.168.1.0     0.0.0.0         255.255.255.0   U     9      0        0 wlan0



-------------------------------
     netstat
-------------------------------

-r    print routing table    (layout almost the same of route -n)

      netstat -r

      Kernel IP routing table
      Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
      default         routerlogin.net 0.0.0.0         UG        0 0          0 wlan0
      192.168.0.0     *               255.255.255.0   U         0 0          0 wlan0


-n   print information in numbers (xxx.xxx.xxx.xxx) instead of names

      netstat -nr

      Kernel IP routing table
      Destination     Gateway         Genmask         Flags   MSS Window  irtt Iface
      0.0.0.0         192.168.0.1     0.0.0.0         UG        0 0          0 wlan0
      192.168.0.0     0.0.0.0         255.255.255.0   U         0 0          0 wlan0


                                                G : the route uses a Gateway
                                                U : the interface to use is "UP"
                                                H : 1 only Host on the subnet (loopback)
                                                D : route dynamic. generated (ex. 'gated' cmd)
                                                M : route modify by an ICMP msg
                                                ! : reject route (packet will be dropped)


                                                MSS : Maximum Segment Size
                                            TCP Window : Data of a Burst (many messages, without ack)
                                                irtt   : initial round trip time (the time to wait
                                                         an IP joins remote host. When a connections
                                                         is established for the first time, with no
                                                         known real value, is used this irrt).
                                                         0 means used default.
                                                         Can be set with command 'route'
                                                wlan0 : the network interface used.

-i    interface statistic    (-a  all interfaces)

      Kernel Interface table
      Iface       MTU Met   RX-OK RX-ERR RX-DRP RX-OVR    TX-OK TX-ERR TX-DRP TX-OVR Flg
      eth0       1500 0         0      0      0 0             0      0      0      0 BMU
      lo        65536 0     24591      0      0 0         24591      0      0      0 LRU
      wlan0      1500 0    474831      0      0 0        197452      0      0      0 BMRU


                     Met : Metric for that interface
                     RX / TX  : packets received / transmitted
                     OK       :    "    error free
                     ERR      :    "    damaged
                     DRP      :    "    dropped
                     OVR      :    "    lost for an overrun


                     B  :     this interface   : a broadcast address has been set
                     L  :        "             is a loopback
                     M  :        "             : all packets are accepted (promiscue mode)
                     O  :        "             : ARP is turned OFF
                     P  :        "             is a Point to Point connection
                     R  :        "             is Running
                     U  :        "             is UP

SOCKET OPTIONS  they list open sockets (TCP or UDP application with a PORT num)
                any can have -a (to say all)
-t      TCP
-u      UDP
-w      RAW data
-x      UNIX socket

-a      gives all (-t u w x )

        netstat -ta

        Active Internet connections (servers and established)
        Proto Recv-Q Send-Q Local Address           Foreign Address         State
        tcp        0      0 stiv-GP60-2PE:domain    *:*                     LISTEN
        tcp        0      0 localhost:ipp           *:*                     LISTEN
        tcp        0      0 192.168.0.3:40203       wm-in-f189.1e100.:https ESTABLISHED
        tcp6       0      0 [::]:http               [::]:*                  LISTEN
        tcp6       0      0 ip6-localhost:ipp       [::]:*                  LISTEN
        tcp6       1      0 ip6-localhost:55006     ip6-localhost:ipp       CLOSE_WAIT




        netstat -ua

        Active Internet connections (servers and established)
        Proto Recv-Q Send-Q Local Address           Foreign Address         State
        udp        0      0 stiv-GP60-2PE:domain    *:*
        udp        0      0 *:bootpc                *:*
        udp        0      0 *:12461                 *:*
        udp        0      0 *:ipp                   *:*
        udp        0      0 *:41658                 *:*
        udp        0      0 *:mdns                  *:*
        udp6       0      0 [::]:54052              [::]:*
        udp6       0      0 [::]:50167              [::]:*
        udp6       0      0 [::]:mdns               [::]:*



        netstat -xa

        Active UNIX domain sockets (servers and established)
        Proto RefCnt Flags       Type       State         I-Node   Path
        unix  2      [ ACC ]     STREAM     LISTENING     14652    @/tmp/.ICE-unix/1468
        unix  2      [ ACC ]     STREAM     LISTENING     19746    /var/run/cups/cups.sock
        unix  2      [ ACC ]     STREAM     LISTENING     18441    @/tmp/.X11-unix/X0
        unix  2      [ ACC ]     STREAM     LISTENING     13115    /run/user/1000/keyring-vrm0fe/control
        unix  2      [ ACC ]     STREAM     LISTENING     10064    /var/run/acpid.socket
        unix  2      [ ACC ]     STREAM     LISTENING     18485    @/tmp/dbus-M6lvYwhUrt
        unix  2      [ ACC ]     STREAM     LISTENING     15707    /run/user/1000/keyring-vrm0fe/gpg
        unix  2      [ ACC ]     STREAM     LISTENING     15709    /run/user/1000/keyring-vrm0fe/ssh
        unix  2      [ ACC ]     STREAM     LISTENING     307      @/com/ubuntu/upstart
        unix  2      [ ACC ]     STREAM     LISTENING     18492    @/tmp/dbus-cVIOWpdi
        unix  2      [ ACC ]     SEQPACKET  LISTENING     357      /run/udev/control
        unix  2      [ ACC ]     STREAM     LISTENING     17513    @/tmp/dbus-X3P8N1NAGu
        unix  2      [ ACC ]     STREAM     LISTENING     11137    /var/run/dbus/system_bus_socket
        unix  2      [ ACC ]     STREAM     LISTENING     11157    /var/run/sdp
        unix  2      [ ACC ]     STREAM     LISTENING     15684    @/com/ubuntu/upstart-session/1000/1311
        unix  2      [ ACC ]     STREAM     LISTENING     18442    /tmp/.X11-unix/X0
        unix  20     [ ]         DGRAM                    15517    /dev/log
        unix  2      [ ACC ]     STREAM     LISTENING     11223    /var/run/avahi-daemon/socket

-------------------------------
     tcpdump
-------------------------------

common grouping options:  -nnvvS  instead of -nn -vv -S

-D           Show the list of available interfaces
-e           dump Ethernet header as well.
-n           show IP  (not resolve HOST names)
-nn          not resolve HOST + PORT names

-X           display packet also in HEX format (besides ASCII)
-XX          like -X but dump HEX + ASCII also for Ethernet header

-s 1514      dump size of 1514 bytes of message (default  96)
             also without the space: -s1514
             -s0 (get everything)

-S           the TCP field 'SEQUENCE number' is shown 'absolute' instead of 'relative'
-i eth0      select the interface to listen
             ex. -i wlan0
                 -i any     to specify ALL if.

-v -vv -vvv  Increase verbosity
-q           less verbose


-c 5         Only get 5 packets and stop.
-A           Print each packet (minus its link level header) in ASCII.
             Handy for capturing web pages and see HTTP headers
-E           Decrypt IPSEC traffic by providing an encryption key.

host 172.5.0.1     dump packet with that IP address
host router.net    I can use HOSTnames if there isn't  -n

port  21           dump packets with that PORT num
port  20-59        can specify a 'range'

src 172.5.0.1      dump packets with that src X
dst 172.5.0.1       "            "        dst X
                              src 172.5.0.1      dump packets with that src IP
                              src port 21        "                  "   src  port

net 172.5.0.0/24   dump packets of that subnet (use CIDR notation: /x)


icmp         Only get ICMP packets.
tcp            "      TCP    "
udp            "      UDP    "


ip6          Only get IP v26 D packets.

less    32       also   < 32   <=  32         are packets size limits in bytes
greater 128      also   >  128  >= 128

-w  log.txt      dump in a file instead stdout
-r  log.txt      read from file instead interface


and              also &&                  to aggregate more options
or               also ||
not              also !
''               single quotes  to safetely group

                 ex. tcpdump -nvvXSs 1514 dst 192.168.0.2 and src net and not icmp

                     tcpdump src 10.0.2.4 and (dst port 3389 or 22)     wrong
                     tcpdump ‘src 10.0.2.4 and (dst port 3389 or 22)’   OK

[]  test a byte val. NB the syntax in this example:  tcpdump ‘tcp[13] & 32!=0‘
    as & precedence > !=, it's like (tcp[13] & 32)!=0

- URGENT (URG)      bit 32         # tcpdump ‘tcp[13] & 32!=0‘
- ACKNOWLEDGE (ACK) bit 16         # tcpdump ‘tcp[13] & 16!=0‘
- PUSH (PSH)        bit 8          # tcpdump ‘tcp[13] & 8!=0‘
- RESET (RST)       bit 4
- SYNCHRONIZE (SYN) bit 2
- FINISH (FIN)      bit 1

--------------  HOW TO SEE THE HTTP  HEADERS WITH TCPDUMP

[root@webserver1 ~]# tcpdump -vvvs 1024 -l -A host fir3net.com
tcpdump: listening on eth0, link-type EN10MB (Ethernet), capture size 1024 bytes
19:51:57.742793 IP (tos 0x0, ttl 64, id 39410, offset 0, flags [DF], proto: TCP (6), length: 208) webserver1.55355 > web160.extendcp.co.uk.http: P, cksum 0x4ce6 (incorrect (-> 0x29e9), 1:157(156) ack 1 win 183
E.....@.@.T.....O.(..;.P.B.<..w3....L......
!y>.5...HEAD / HTTP/1.1
User-Agent: curl/7.15.5 (x86_64-redhat-linux-gnu) libcurl/7.15.5 OpenSSL/0.9.8b zlib/1.2.3 libidn/0.6.5
Host: fir3net.com
Accept: */*

19:51:57.747162 IP (tos 0x0, ttl 56, id 40702, offset 0, flags [DF], proto: TCP (6), length: 52) web160.extendcp.co.uk.http > webserver1.55355: ., cksum 0xdeb4 (correct), 1:1(0) ack 157 win 1448
E..4..@.8.W.O.(......P.;..w3.B.............
5...!y>.
19:51:58.581168 IP (tos 0x0, ttl 56, id 40704, offset 0, flags [DF], proto: TCP (6), length: 475) web160.extendcp.co.uk.http > webserver1.55355: P, cksum 0xdd93 (correct), 1:424(423) ack 157 win 1448
E.....@.8.U.O.(......P.;..w3.B.............
5...!y>.HTTP/1.1 200 OK
Date: Mon, 26 Sep 2011 19:51:57 GMT                                                     <--------
Server: Apache/2                                                                        <--------
X-Powered-By: PHP/5.2.17                                                                <--------
P3P: CP="NOI ADM DEV PSAi COM NAV OUR OTRo STP IND DEM"                                 <--------
Expires: Mon, 1 Jan 2001 00:00:00 GMT                                                   <--------
Cache-Control: post-check=0, pre-check=0                                                <--------
Pragma: no-cache                                                                        <--------
Set-Cookie: 76a7b8dc15e4f0021ca24944dc631ff9=7bg357jeia0soqojvkj6iejhg5; path=/         <--------
Last-Modified: Mon, 26 Sep 2011 19:51:58 GMT                                            <--------
Content-Type: text/html; charset=utf-8                                                  <--------

-------------------------------
     ip
-------------------------------

ip link show


       1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default
           link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
       2: eth0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc pfifo_fast state DOWN mode DEFAULT group default qlen 1000
           link/ether 44:8a:5b:ed:d1:97 brd ff:ff:ff:ff:ff:ff
       3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DORMANT group default qlen 1000
           link/ether 30:3a:64:d4:c1:37 brd ff:ff:ff:ff:ff:ff

ip neigh show

       192.168.0.1 dev wlan0 lladdr c4:04:15:fa:12:6f REACHABLE


ip addr show wlan0      to see link speed

       3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000
           link/ether 30:3a:64:d4:c1:37 brd ff:ff:ff:ff:ff:ff
           inet 192.168.0.3/24 brd 192.168.0.255 scope global wlan0
              valid_lft forever preferred_lft forever
           inet6 fe80::323a:64ff:fed4:c137/64 scope link
              valid_lft forever preferred_lft forever






old commands:
                arp
                ifconfig
                route




_____________________________________________________________
DNS LOOKUP
_____________________________________________________________
-------------------------------
       nslookup          the old original one
       dig               produces many lines of output for every record (more difficult to parse)
       host                  "     1   line  "    "     "   "       "   (easier to parse)
-------------------------------
     nslookup              DNS lookup    (it uses /etc/resolv.conf)
-------------------------------           It doesn't use the OS's DNS-resolver-library to perform its queries,
                                          and thus may behave differently from dig  which does.
nslookup google.com

       Server:    127.0.1.1
       Address:   127.0.1.1#53

       Non-authoritative answer:
       Name:    google.com
       Address: 216.58.210.46     <---------------

-q=a
      nslookup -q=a www.google.com 8.8.8.8


               Server:     8.8.8.8
               Address:    8.8.8.8#53

               Non-authoritative answer:
               Name:    www.google.com
               Address: 62.253.72.183
               Name:    www.google.com
               Address: 62.253.72.177
               Name:    www.google.com
               Address: 62.253.72.172
               Name:    www.google.com
               Address: 62.253.72.148
               Name:    www.google.com
               Address: 62.253.72.173
               Name:    www.google.com
               Address: 62.253.72.168
               Name:    www.google.com
               Address: 62.253.72.158
               Name:    www.google.com
               Address: 62.253.72.182
               Name:    www.google.com
               Address: 62.253.72.187
               Name:    www.google.com
               Address: 62.253.72.178
               Name:    www.google.com
               Address: 62.253.72.162
               Name:    www.google.com
               Address: 62.253.72.153
               Name:    www.google.com
               Address: 62.253.72.167
               Name:    www.google.com
               Address: 62.253.72.152
               Name:    www.google.com
               Address: 62.253.72.157
               Name:    www.google.com
               Address: 62.253.72.163

nslookup gives information from a hostname

    nslookup [-option] [host_to_search | -] [dns_server_name]


    with no parameters or with 1st param '-' it enters
    into INTERACTIVE mode, whose commands are:

       set k[=val]
                    all    dumps the names for 'k' ---------------------------------.
                           ___________________________________________________      |
                            > set all                                               |
                            Default server: 172.16.7.7                              |
                            Address: 172.16.7.7#53                                  |
                            Default server: 172.16.7.17                             |
                            Address: 172.16.7.17#53                                 |
                                                                                    |
                            Set options:                                            |
                              novc                  nodebug         nod2            |
                              search                recurse                    <----'
                              timeout = 0           retry = 3       port = 53
                              querytype = A         class = IN
                              srchlist = internal.ch
                           ___________________________________________________


    class=value         (Default = IN; abbreviation = cl)
                        Changes the query class (values:

                                                  IN      the Internet class
                                                  CH      the Chaos class
                                                  HS      the Hesiod class
                                                  ANY     wildcard)

    [no]debug           (Default = nodebug; abbreviation = [no]deb)
                        on/off the display of the full response packet (and
                        any intermediate response packets)


    [no]d2              (Default = nod2)
                        Turns debugging mode on or off.
                        This displays more about what nslookup is doing.


    [no]search          (Default = search)
                        If the lookup request contains at least one period but doesn't end with a trailing period,
                        append the domain names in the domain search list to the request until an answer is received.


    port=value          (Default = 53; abbreviation = po)
                        Change default port


    querytype=value     (Default = A; abbreviations = q, ty)
    type=value          Change the type of query.



    [no]recurse         (Default = recurse; abbreviation = [no]rec)
                        query other servers


    retry=number        number of retries
    timeout=number      Change the initial timeout interval for waiting for a reply to number seconds.
    [no]vc              (Default = novc)   Always use a virtual circuit when sending requests to the server.


    [no]fail            (Default = nofail)
                        Try the next nameserver if response = SERVFAIL


-------------------------------
     nc  (netcat)
-------------------------------

      -v    verbose


      nc -l 1234          creates a listener :
                                   - on port 1234         (in not specified => default 31337)
                                   - using by default TCP (I can specify --udp     (or on OSX -u)
                                                                      or --sctp  )


      nc <ip> <port>    ex nc localhost 1234
                          creates a client-sender:
                                  - sending on port 1234  (if not specified => default 31337)
                                  - using TCP (change with --udp / -u  / --sctp)


                        NB. listener or 'server' is bit misleading.
                            Even if 1 nc starts with a -l
                            and the other (client) connects to it,
                            still the 'echoed' of the input text in the 2 shels
                            is dual (I can enter 'aaaaaaa' in the left (listener)
                            or in the right (client) and it will be echoed in the other).


 ----------------- server
     -k                 (keep listening)
                                        ex. nc -k -l
                        by default the listener exits when the client disconnects.
                        (so I can have only 1 listener with 1 client)
                        With -k the listener remains alive, so I can have connect with another client.
                        Even with many clients in parallel.
                        An input 'aaaaaaa' in the listener will be echoed in all the clients
                        at the same time.

                        NB.
                             In OSx and some minor implementation
                             the connection is anyhow 1-1 (1.listener-1.client) at a time
                             till the first client doesn't disconnect any other client CANNOT
                             establish a connection with that listener.

     -m                 (max clients)
                        With -k I can have many clients (max by default 100)
                        With -m I can specified how many:
                                        ex. nc -m 2 -l     (a 3rd client attempting to connect
                                                            will receive a connection refused)

     --broker           it must be used on the listener     ex.    nc -l localhost --broker
                        It makes the listener no more an echoed listener/clients  but allow clients
                        to echoed (an 'aaaaaaa' in client 1 is displayed in all the others)


     --chat             The same of --broker.
                        The clients receives an nick-id (usually '<user num>'  ex. '<user 4>')
                        so that when a client (ex. <user 2>' enters 'aaaaaaa' it's echoed in all the others
                        prefixed by '<user 2>')

 ----------------- client

     --ssl              establish a HTTP secure connection (i.e. on port 443 instead of 80)
                        ex.
                               nc youtube.com 80            <---- doesn't answer because I didn't establish
                                                                  a secure connection

                               nc youtube.com 443 --ssl     <---- ok


 ----------------- sending files:

     server         ncat -l 1234 > output.txt
     client         ncat -l 1234 < input.txt

                    it's very simple.



       socket listener (socket server):
                        nc -v -l 1234               creates a listener on the port 1234  <--- TCP
                                                                                              if I want UDP   -u 1234

                                          if in another shell I connect on that port:
                                          i.e.
                                                         nc -v 1234    <--- TCP
                                                                            if I want UDP   -u 1234
                                          all I type is echoed
       log in a file (instead of live outout) :
                       nc -v -l 1234 > aaaa.log
       echo server:
                       nc -l -p 12345 -c 'while true; do read i && echo [echo] $i; done'
       echo server:
                       nc -l -p 12345 -c 'while true; do read i && echo [echo] $i; done'
       echo server:
                       nc -l -p 12345 -c 'while true; do read i && echo [echo] $i; done'
       echo server:
                       nc -l -p 12345 -c 'while true; do read i && echo [echo] $i; done'
       echo server:
                       nc -l -p 12345 -c 'while true; do read i && echo [echo] $i; done'
-------------------------------
     ss
-------------------------------

    -nat      to show the connections   (e.x. ss -nat|grep 5555   to check if port 5555 is open)
-------------------------------
     ethtool
-------------------------------

ethtool eth0


         Settings for eth0:
             Supported ports: [ TP ]
             Supported link modes:   10baseT/Half 10baseT/Full
                                     100baseT/Half 100baseT/Full
                                     1000baseT/Full
             Supported pause frame use: Symmetric Receive-only
             Supports auto-negotiation: Yes
             Advertised link modes:  10baseT/Half 10baseT/Full
                                     100baseT/Half 100baseT/Full
                                     1000baseT/Full
             Advertised pause frame use: Symmetric
             Advertised auto-negotiation: Yes
             Speed: Unknown!
             Duplex: Unknown! (255)
             Port: Twisted Pair
             PHYAD: 0
             Transceiver: internal
             Auto-negotiation: on
             MDI-X: Unknown
             Current message level: 0x000060e4 (24804)
                                    link ifup rx_err tx_err hw wol
             Link detected: no

-------------------------------
     IP TABLES
-------------------------------


Netfilter:    firewall built-in in the linux kernel           www.netfilter.org
              (process packets at Lev3, so IP).

iptables :    admin interface to Netfilter.

ebtables:     process Ethernet-Bridge Lev2.


iptables works on LV3 (IP) LV4 (TCP/UDP).
Possible very basic filtering in Application and Network layers, but not designed for this.

For example, match a specific string inside the packet, (ex /index.html) Will that work? Normally, yes.
However, if the packet size is very small/split, iptables will not see that string.
Much better using a proxy.

    ______________________________________________________
    POLICIES OF FIREWALL (they can be opposite):

      POLICY  DEFAULT=DENY  (the risk if to have false positive, deny useful packets)

         1. by default DENY all IP packets
         2. check if there are any configured RULES.
            Probably some of these will allow some IP packets to be ACCEPT-ed

      POLICY  DEFAULT=ACCEPT   (more risky ... I need to configure a lot to avoid malicious packets)

         1. by default ACCEPT all IP packets
         2. check if there are any configured RULES.
            Probably some of these will deby some IP packets


      Note: Policies are defined per INPUT / FORWARD / ....
            ex.
                    iptables --policy INPUT DROP         # DEFAULT=DENY

                    iptables --policy OUTPUT DROP

                    iptables --policy FORWARD DROP


    ______________________________________________________



    ______________________________________________________
    FIREWALL /FILTER BENFITS

    Inspecting IP packets means not only to look at 1 single packet
    but to collect statistics/ trend so that I can intercept
        - port scans
        - address spoofing
        - malformed broadcast to identify UNIX systems
        - any form of network mapping
        - DOS attacks
        - ....





    ______________________________________________________


iptables -t nat   -A PREROUTING   -i eth1   -p tcp  --dport 80
         -j DNAT   --to-destination 192.168.1.3:8080

         -t nat              operate NAT table
         -A PREROUTING       appending following rule to PRE.. chain
         -i eth1             consider pckts coming from eth1
         -p tcp              protocol tcp  (also udp)
         --dport 80          address to that port
         -j DNAT             jump to DNAT target
         --to ...            change IP addr and port
______________________________________________________ config

   /etc/sysconfig/iptables              stores the rules
   chkconfig --list iptables            list the runlevel associated (3,4,5)
   chkconfig --levels 345 iptables on   associate runlevels
   service iptables start               to manaully start
   service iptables stop                to manually stop

   service is the command to run an 'init' script
   in Ubuntu chkconfig is replaced by 'sysv-rc-conf' and 'upstart'
______________________________________________________
                               defined in /usr/include/linux/netfilter_ipv4.h
5 hooks          1. PREROUTING
                 2. INPUT        (input pkts)
                 3. FORWARD      (I have 2 network cards (a router) and these are the pkts routed from 1 to 2)
                 4. OUTPUT
                 5. POSTROUTING

       each is the start pointer to a seq of rules, chained together

       each 'rule' describes what to do on 3 tables
       where kernel stores data:

                   filter (defaul: if no tbl is specified
                                   in iptables cmd, this tbl is used)
                   mangle
                   nat

______________________________________________________ rule


       rule:  criteria to match.
              1 pckt is matched against all the criteria of the rule
              if it fits, it's forwarded to the TARGET of the rule.
              For each pckt forwarded the kernel increments:

                    -num of pckts passed through this rule:=  +1
                    -num of bytes         idem            := + pckt bytes


              if the match-part  is missing, all pkts are sent to target
              if the target-part is missing, none is done on pckt, anyhow
                                             the above counts are incremented.

______________________________________________________ match


______________________________________________________ target

  4 targets (more can be others with extension modules)

  ACCEPT: stop processing current chain
          go to next rule
  DROP:   discard the pkt
  QUEUE:  queue pkt in user-space queue (man libipq)
  RETURN: for user specific chain, added.




INPUT:  is the CHAIN of pkts entering into the interface

INTERFACE:   can be many. Ex
                 lo =  loop back
                 eth0
                 eth1

TARGET:      I specify where to go. They are 3:
                              -j ACCEPT
                              -j DROP         drop the pkt quietly
                              -j REJECT       return icmp-port unreachable error

1. # remove all CHAINS
                   iptables --flush

2. # add rules to quickly allow unlimited traffic on loopback interface
                   iptables -A INPUT  -i lo -j ACCEPT     # -A:  Append
                   iptables -A OUTPUT -o lo -j ACCEPT

3. # set defualt policy to DROP
                    iptables --policy INPUT DROP
                    iptables --policy OUTPUT DROP
                    iptables --policy FORWARD DROP

































































