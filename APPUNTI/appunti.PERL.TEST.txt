
           websystems/testing/testmodules/TestCommon.pm :
           
            1 sub aliasExternalMethods
            2 sub aliasMethods
            3 sub checkClassName
            4 sub helper_clearWebInputs
            5 sub restoreMethods
            6 sub test_attributesDefined
            7 sub test_methodsDefined 
            8 sub test_moduleBaseIs
            9 sub test_new
           10 sub test_propertiesDefined 
           11 sub test_propertiesValues
           12 sub test_propertyMetaData
           13 sub test_use
           
Test::Harness   is the test runner and output interpreter for Perl. 
                It's the thing that powers 'make test' and where the 'prove' utility comes from.


 use Test::More               more advanced version of Test::Simple 
                              well..... remember there is Test::Most


               Other modules in Test::


               Test::Differences    for more ways to test complex data structures. 
               Test::Class          is like xUnit but more perlish.
               Test::Deep           gives you more powerful complex data structure testing.
               Test::Inline         shows the idea of embedded testing.
               Test::FixtureBuilder Quickly define fixture data for unit tests.



               Other modules:

               Mock::Quick          The ultimate mocking library. Easily spawn objects defined on the fly. 
                                    Can also override, block, or reimplement packages as needed.

----------------------
    Test::More
---------------


 1   ok         ok ([1] bool_condition, [2] test_name)                

                ex.ok( $p->tests == 4, 'my test' );

 2   is         is ([1] cmd, [2] expected_result, [3] test_name)     
                    execute cmd and compare with [2]. If it's different the test fails
                    it's short for    ok (cmd 'eq' expected_result, '..')
                  
 3   isnt       short for ok (cmd 'ne' expected_result, '..')      (there is also isn't() the alias with the: ')

 4   like       like ([1] cmd, [2] regular_expr, [3] test_name)
                like($got, qr/expected/,  '..');
                like( $got, '/expected/', '..' );
                it's short for         ok( $got =~ m/expected/, '..')

 5   unlike     (easy to understand)

 6   cmp_ok     cmp_ok([1] op1, [2] bool_operator, [3] op2, [4] test_name)
                it compares op1 and op2 with the Perl operator [2],
                which can be usefull when the implicit 'eq' 'ne' above not work (ex number compare)
                ex. cmp_ok( $got, '&&', $expected, '..')

                it's also better the output as it prints both op1 and op2 .

 7   is_ok      is_ok ([1] obj,       [2], class, [3] [obj_name])
                is_ok ([1] sub_class, [2], class, [3] [obj_name])
                is_ok ([1] ref,       [2], type,  [3] [ref_name])
                
                ex.1   isa_ok( $obj, 'Some::Module' );           
                       short for     ok( defined $obj && $obj->isa('Some::Module') );

                ex.2   use constant CLASS_UNDER_TEST => 'NetBanx::UI::Request';
                       my $nbx = new_ok( CLASS_UNDER_TEST, [ controlName => 'testControlName' ] );
                       isa_ok( $nbx, CLASS_UNDER_TEST );

                ex.3   $validator = $handler->getValidator($ar_class);
                       isa_ok($validator,'CompaniesHouse::Filing::Validation::LLPAnnualReturnValidator','LLP Validator Test');

 8   new_ok     new_ok ([1] class, [2] [obj_name])

                ex. isa_ok( $nbx, CLASS_UNDER_TEST );

                short for new ... +  isa_ok 

 9   subtest    subtest 'some text for the subtest name'  =>  \&code

                ex.   subtest 'An example subtest' => sub {
                          plan tests => 2;
                          pass("This is a subtest");
                          pass("So is this");
                      };


10   pass       pass ([1] test_name)
                ex.  see 9.
                short for ok(1, ..

11   fail       short for ok(0, ..



12   require_ok      require_ok"file_or_module_name"  tests if it can load modules

                ex.1      require_ok "Some::Module";
                ex.2      require_ok "Some/File.pl";

13   use_ok     BEGIN { use_ok($module); }   or       like require_ok but not work with files.
                BEGIN { use_ok($module, @imports); }

                ex.       BEGIN { use_ok('Some::Module', qw(foo bar)) }



14   is_deeply  is_deeply([1] var, [2] expected_values, [3] test_name)    Compares a var with the expected content
                                                                          whene a simpe ok with ok does not work.
                                                                          Know that There are more advanced modules:
                                                                          Test::Differences and Test::Deep 

                ex. is_deeply($output_r, $s->{expected}, "Output as expected");

15   diag       diag(message)         like a print but it won't interfere with the test.
                                      as it returns FALSE, this can be used like a 'die':

                ex.         ok( grep(/foo/, @users), "There's a foo user" ) or
                            diag("Since there's no foo, check that /etc/bar is set up right");

16   note       diag(message)         Like diag(), except the message will not be seen when 
                                      the test is run in a harness. 
                                      It will only be visible in the verbose TAP stream.
                                      Handy for putting in notes which might be useful for debugging, 
                                      but don't indicate a problem.

17   explain    explain ref           dump the contents of any references in a human readable format. 
                                      Usually to pass this into note or diag .

                ex.     is_deeply($have, $want) || diag explain $have;

18   SKIP       SKIP { skip [1] why, [2] num_of_tests, if [3] condition}   allows to include in a block
                                                                           some num_of_tests that after certain condition
                                                                           can be skipped
                ex.
                        SKIP: {
                                    eval { require HTML::Lint };
                                    skip "HTML::Lint not installed", 2 if $@;
                                    my $lint = new HTML::Lint;
                                    isa_ok( $lint, "HTML::Lint" );
                                    $lint->parse( $html );
                                    is( $lint->errors, 0, "No errors found in HTML" );
                              }

                [2] allows Test::More to have at the end the right TOTAL for the tests


19   TODO       like SKIP. The tests inside are expected to fail. 
                Test::More runs them normally, but print out special flags indicating they are "todo". 
                Test::Harness will interpret 
                                failures:as being ok. 
                                succees :unexpected success. 

                As opposed to simply commenting out a block of tests, is it's like having a programmatic todo list. 
                You know how much work is left to be done.
                Once a todo test starts succeeding, simply move it outside the block. 
                When the block is empty, delete it.

                ex.
                        TODO: {
                                    local $TODO = "URI::Geller not finished";
                                    my $card = "Eight of clubs";
                                    is( URI::Geller->your_card, $card, 'Is THIS your card?' );
                                    my $spoon;
                                    URI::Geller->bend_spoon;
                                    is( $spoon, 'bent',    "Spoon bending, that's original" );
                              }

                SKIP vs. TODO

                If it's something the user might not be able to do, use SKIP. 
                ie. optional modules not installed, running under an OS that doesn't have some feature (like fork() or symlinks), 
                or maybe you need an Internet connection and one isn't available.

                If it's something the programmer hasn't done yet, use TODO. 
                This is for any code you haven't written yet.

20   BAIL_OUT   BAIL_OUT('message')      like a die

21   ok         ok ([1] bool_condition, [2] test_name)                ok( $p->tests == 4, 'saw tests' );
                
Test::Harness   is the test runner and output interpreter for Perl. 
                It's the thing that powers 'make test' and where the 'prove' utility comes from.


 use Test::More               more advanced version of Test::Simple 
                              well..... remember there is Test::Most


               Other modules in Test::


               Test::Differences    for more ways to test complex data structures. 
               Test::Class          is like xUnit but more perlish.
               Test::Deep           gives you more powerful complex data structure testing.
               Test::Inline         shows the idea of embedded testing.
               Test::FixtureBuilder Quickly define fixture data for unit tests.



               Other modules:

               Mock::Quick          The ultimate mocking library. Easily spawn objects defined on the fly. 
                                    Can also override, block, or reimplement packages as needed.

----------------------
    Test::More
---------------


 1   ok         ok ([1] bool_condition, [2] test_name)                

                ex.ok( $p->tests == 4, 'my test' );

 2   is         is ([1] cmd, [2] expected_result, [3] test_name)     
                    execute cmd and compare with [2]. If it's different the test fails
                    it's short for    ok (cmd 'eq' expected_result, '..')
                  
 3   isnt       short for ok (cmd 'ne' expected_result, '..')      (there is also isn't() the alias with the: ')

 4   like       like ([1] cmd, [2] regular_expr, [3] test_name)
                like($got, qr/expected/,  '..');
                like( $got, '/expected/', '..' );
                it's short for         ok( $got =~ m/expected/, '..')

 5   unlike     (easy to understand)

 6   cmp_ok     cmp_ok([1] op1, [2] bool_operator, [3] op2, [4] test_name)
                it compares op1 and op2 with the Perl operator [2],
                which can be usefull when the implicit 'eq' 'ne' above not work (ex number compare)
                ex. cmp_ok( $got, '&&', $expected, '..')

                it's also better the output as it prints both op1 and op2 .

 7   is_ok      is_ok ([1] obj,       [2], class, [3] [obj_name])
                is_ok ([1] sub_class, [2], class, [3] [obj_name])
                is_ok ([1] ref,       [2], type,  [3] [ref_name])
                
                ex.1   isa_ok( $obj, 'Some::Module' );           
                       short for     ok( defined $obj && $obj->isa('Some::Module') );

                ex.2   use constant CLASS_UNDER_TEST => 'NetBanx::UI::Request';
                       my $nbx = new_ok( CLASS_UNDER_TEST, [ controlName => 'testControlName' ] );
                       isa_ok( $nbx, CLASS_UNDER_TEST );

                ex.3   $validator = $handler->getValidator($ar_class);
                       isa_ok($validator,'CompaniesHouse::Filing::Validation::LLPAnnualReturnValidator','LLP Validator Test');

 8   new_ok     new_ok ([1] class, [2] [obj_name])

                ex. isa_ok( $nbx, CLASS_UNDER_TEST );

                short for new ... +  isa_ok 

 9   subtest    subtest 'some text for the subtest name'  =>  \&code

                ex.   subtest 'An example subtest' => sub {
                          plan tests => 2;
                          pass("This is a subtest");
                          pass("So is this");
                      };


10   pass       pass ([1] test_name)
                ex.  see 9.
                short for ok(1, ..

11   fail       short for ok(0, ..



12   require_ok      require_ok"file_or_module_name"  tests if it can load modules

                ex.1      require_ok "Some::Module";
                ex.2      require_ok "Some/File.pl";

13   use_ok     BEGIN { use_ok($module); }   or       like require_ok but not work with files.
                BEGIN { use_ok($module, @imports); }

                ex.       BEGIN { use_ok('Some::Module', qw(foo bar)) }



14   is_deeply  is_deeply([1] var, [2] expected_values, [3] test_name)    Compares a var with the expected content
                                                                          whene a simpe ok with ok does not work.
                                                                          Know that There are more advanced modules:
                                                                          Test::Differences and Test::Deep 

                ex. is_deeply($output_r, $s->{expected}, "Output as expected");

15   diag       diag(message)         like a print but it won't interfere with the test.
                                      as it returns FALSE, this can be used like a 'die':

                ex.         ok( grep(/foo/, @users), "There's a foo user" ) or
                            diag("Since there's no foo, check that /etc/bar is set up right");

16   note       diag(message)         Like diag(), except the message will not be seen when 
                                      the test is run in a harness. 
                                      It will only be visible in the verbose TAP stream.
                                      Handy for putting in notes which might be useful for debugging, 
                                      but don't indicate a problem.

17   explain    explain ref           dump the contents of any references in a human readable format. 
                                      Usually to pass this into note or diag .

                ex.     is_deeply($have, $want) || diag explain $have;

18   SKIP       SKIP { skip [1] why, [2] num_of_tests, if [3] condition}   allows to include in a block
                                                                           some num_of_tests that after certain condition
                                                                           can be skipped
                ex.
                        SKIP: {
                                    eval { require HTML::Lint };
                                    skip "HTML::Lint not installed", 2 if $@;
                                    my $lint = new HTML::Lint;
                                    isa_ok( $lint, "HTML::Lint" );
                                    $lint->parse( $html );
                                    is( $lint->errors, 0, "No errors found in HTML" );
                              }

                [2] allows Test::More to have at the end the right TOTAL for the tests


19   TODO       like SKIP. The tests inside are expected to fail. 
                Test::More runs them normally, but print out special flags indicating they are "todo". 
                Test::Harness will interpret 
                                failures:as being ok. 
                                succees :unexpected success. 

                As opposed to simply commenting out a block of tests, is it's like having a programmatic todo list. 
                You know how much work is left to be done.
                Once a todo test starts succeeding, simply move it outside the block. 
                When the block is empty, delete it.

                ex.
                        TODO: {
                                    local $TODO = "URI::Geller not finished";
                                    my $card = "Eight of clubs";
                                    is( URI::Geller->your_card, $card, 'Is THIS your card?' );
                                    my $spoon;
                                    URI::Geller->bend_spoon;
                                    is( $spoon, 'bent',    "Spoon bending, that's original" );
                              }

                SKIP vs. TODO

                If it's something the user might not be able to do, use SKIP. 
                ie. optional modules not installed, running under an OS that doesn't have some feature (like fork() or symlinks), 
                or maybe you need an Internet connection and one isn't available.

                If it's something the programmer hasn't done yet, use TODO. 
                This is for any code you haven't written yet.

20   BAIL_OUT   BAIL_OUT('message')      like a die

21   ok         ok ([1] bool_condition, [2] test_name)                ok( $p->tests == 4, 'saw tests' );
                
