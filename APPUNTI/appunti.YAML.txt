          Y A M L                                      J S O N                                       X M L
      microservices:                            {                                     <microservices>
              - app: user-auth                     microservice: [                        <microservice>
                port: 900                             {                                      <app> user-auth </app>
                version: 1.0                            app: "user-auth"                     <port> 900 </port>
                                                        port: 900                            <version> 1.0 </version>
                                                        version: "1.0"                    </microservice>
                                                      }                               </microservices>
                                                   ]
                                                }
      EASIER:      than XML and JSON
                   It's a superset of JSON
                                      allows
                                         - comments    #
                                         - variables   {{ }}
                                         - quotation is optional  ' "
                                         - quotation can use " or '
                                            (The difference between ' and " is that in " you can use escapes:
                                                foo: "a \t TAB and a \n NEWLINE" )

      API:         available in most languages (to manage YAML files)


---       starts a doc (3 dashes)  the section before --- can be used to write YAML 'directives'

...       ends a doc   (3 dots) // this is OPTIONAL

  #       <--- a comment. Ex:
                                - task: hello-world-task
                                config:
                                  # Tells Concourse which type of worker this task should run on   <----------------- comment
                                  platform: linux

  SAME INDENTETION:    the fields of my 'structure' are identified just because they are indented with the same
                       num of spaces ((<Tab> NEVER allowed))



  _______________ LIST / (ARRAY):
  -       all MEMBERS of a list start with a -    (it's like the C enum, a list of the possible values)
                      fruits:
                          - Apple
                          - Orange
                          - Strawberry
                          - Mango

          compact form:    fruits: ['Apple', 'Orange', 'Strawberry', 'Mango']      <-- in 1 line between '[' ']' separated by ','




  _______________ HASH:

  the HASH (so key / value pairs) can be in the usual 'implicit' syntax or 'explicit'


  |    IMPLICIT SYNTAX
  |    __________________
  |
  |
  |    key: value        NB. a ' ' (space) must follow the ':'
  |                          Quote if there is a :
  |                          foo: "somebody said I should put a colon here: so I did"
  |                                                                       ^
  |            compact form:    martin: {name: Martin D'vloper, job: Developer, skill: Elite}   <-- in 1 line between '{' '}' separated by ','
  |                                           ^                     ^                 ^
  |
  |    |  >              to wrap long lines  (the > NOT include \n)
  |
  |                      include_newlines: |
  |                                  exactly as you see
  |                                  will appear these three
  |                                  lines of poetry
  |
  |                      ignore_newlines: >
  |                                  this is really a
  |                                  single line of text
  |                                  despite appearances
  |
  |
  |
  |    EXPLICIT SYNTAX
  |    __________________
  |
  |    It is useful when keys and/or values are 'complex'
  |    In this case I identify a key prepending it with a '?'
  |    and a value, prepending it with a ':'
  |
  |   Then a key and/or a value can be any type:
  |
  |
  |                               # Use a sequence as a key
  |                               ? - foo
  |                                 - bar
  |                               : 1
  |
  |                               # Use a (implicit) hash as a key
  |                               ? baz: qux
  |                               : 2
  |
  |                               # I can skip the value, which implies `null`
  |                               ? quux
  |
  |                               # I can leave the key blank, which implies a `null` key
  |                               ?
  |                               : 3
  |
  |                               # I can even skip both the key and value, so both will be `null`
  |                               ?
  |
  |                               # Or even long scalar as a key
  |                               ? |
  |                                 We the People of the United States, in Order to form a more
  |                                 perfect Union, establish Justice, insure domestic Tranquility,
  |                                 provide for the common defence, promote the general Welfare,
  |                                 and secure the Blessings of Liberty to ourselves and our
  |                                 Posterity, do ordain and establish this Constitution for the
  |                                 United States of America.
  |                               : 3
  |
  |
  |                               other examples:
  |
  |                               ? - Detroit Tigers
  |                                 - Chicago cubs
  |                               :
  |                                 - 2001-07-23
  |
  |                               ? [ New York Yankees,
  |                                   Atlanta Braves ]
  |                               : [ 2001-07-02, 2001-08-12,
  |                                   2001-08-14 ]
  |



  {{  }}            As the single { } means a list (see above)
                    the VALUE of a VAR is written as {{ var }}
                    ex.
                           foo: "{{ variable }}"


  TYPES:
           a: 123                     # an integer
           b: "123"                   # a string, disambiguated by quotes
           c: 123.0                   # a float
           d: !!float 123             # also a float via explicit data type prefixed by (!!)
           e: !!str 123               # a string, disambiguated by explicit type
           f: !!str Yes               # a string via explicit type
           g: Yes                     # a boolean True (yaml1.1), string "Yes" (yaml1.2)   possible reserved values:  yes/no true/false  on/off
           h: Yes we have No bananas  # a string, "Yes" and "No" disambiguated by context.


  &xxx     add a mark-label named xxx (to then refer the item with *xxx)     like  C ( & / * )
  *        refers a marked item
           nb.1 << is the symbol to 'merge 1 hash into another'

           - step:  &id001                  # defines anchor label id001
               instrument:      Lasik 2000
               pulseEnergy:     5.4
               pulseDuration:   12
               repetition:      1000
               spotSize:        1mm

           - step: &id002
               instrument:      Lasik 2000
               pulseEnergy:     5.0
               pulseDuration:   10
               repetition:      500
               spotSize:        2mm

           - step: *id001                # refers to the 1' step
           - step: *id002                # refers to the 2' step
           - step:
               <<: *id001                # refers to 'id001'  but change only 'spotSize'
               spotSize: 2mm
           - step: *id002

           nb.2 << for hash merge do not go down on levels (it's not recursive) it means
                   that if a hash is more structured (ex

                                    defaults: &defaults                             |  this is the block
                                        input_location: common_input                |  I'd like to reuse
                                        output_location: dev_location               |
                                        mail:                                       |
                                          sender_name: sender                       |
                                          smtp_server: your_server                  |
                                          login: your_login                         |
                                          password: top_secret                      |
                                      development:            _______________________
                                        <<: *defaults                               | I reuse it here
                                        mail:                                       | but since field 'mail' is down 1 level
                                          sender_name: sender_dev                   | it will not work the merge on that
                                      production:            ________________________ and the final result is sender_name: sender_dev (only 1 entry, I miss the others 3)
                                        <<: *defaults                               |
                                        output_location: prod_location              |
                                        mail:                                       |
                                          sender_name: sender_prod                  |

                                      common_settings: &common_settings        |_____ the solution is the add a reference for each section (1 here)
                                         input_location: common_input          |
                                         output_location: dev_location         |
                                         mail_defaults: &mail_defaults         | ____ (1 here)
                                           sender_name: sender                 |
                                           smtp_server: your_server            |
                                           login: your_login                   |
                                           password: top_secret                |
                                                                               | ____ (1 here)
                                         defaults: &defaults                   |
                                           <<: *common_settings                |
                                           mail:                               |
                                             <<: *mail_defaults                |
                                         development:                          |
                                           <<: *defaults                       |
                                         production:                           |
                                           <<: *defaults                       |
                                           mail:                               |
                                             <<: *mail_defaults                |
                                             sender_name: sender_prod          |

                                ________________________________________________________
                                 The solution becomes a mess if the are more levels !  <------ N.B.
                                ________________________________________________________


  ?        set
           # YAML has a set type, which looks like this:
           set:
               ? item1
               ? item2
               ? item3

           # Like Python, sets are just maps with null values; the above is equivalent to:
           set2:
               item1: null
               item2: null
               item3: null




