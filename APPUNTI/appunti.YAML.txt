      EASIER:      than XML and JSON
                   It's a superset of JSON
                                      allows
                                         - comments
                                         - quotation is optional
                                         - quotation can use " or '
                                         - variables
      API:         available in most languages (to manage YAML files)

---       starts a doc

...       ends a doc

  #       comment

  -       all MEMBERS of a list starts with a -
          each with the same INDENTATION (<Tab> NEVER allowed)
                      fruits:
                          - Apple
                          - Orange
                          - Strawberry
                          - Mango

  key: value        NB. a ' ' (space) must follow the ':'
                        Quote if there is a : 
                        foo: "somebody said I should put a colon here: so I did"
                                                                     ^

  |  >              to wrap long lines  (the > NOT include \n)

                    include_newlines: |
                                exactly as you see
                                will appear these three
                                lines of poetry

                    ignore_newlines: >
                                this is really a
                                single line of text
                                despite appearances


  compact forms:    fruits: ['Apple', 'Orange', 'Strawberry', 'Mango]              <-- array (only values)
                    martin: {name: Martin D'vloper, job: Developer, skill: Elite}  <-- hash  (also keys)
                                 ^                     ^                 ^
 
  {{  }}            As the single { } means a list (see above)
                    the VALUE of a VAR is written as {{ var }}



  TYPES:
           a: 123                     # an integer
           b: "123"                   # a string, disambiguated by quotes
           c: 123.0                   # a float
           d: !!float 123             # also a float via explicit data type prefixed by (!!)
           e: !!str 123               # a string, disambiguated by explicit type
           f: !!str Yes               # a string via explicit type
           g: Yes                     # a boolean True (yaml1.1), string "Yes" (yaml1.2)
           h: Yes we have No bananas  # a string, "Yes" and "No" disambiguated by context.


  &        add a mark (to then refer the item)  
  *        refers a marked item

           - step:  &id001                  # defines anchor label id001
               instrument:      Lasik 2000
               pulseEnergy:     5.4
               pulseDuration:   12
               repetition:      1000
               spotSize:        1mm

           - step: &id002
               instrument:      Lasik 2000
               pulseEnergy:     5.0
               pulseDuration:   10
               repetition:      500
               spotSize:        2mm

           - step: *id001                # refers to the 1' step 
           - step: *id002                # refers to the 2' step
           - step: 
               <<: *id001                # refers to 'id001'  but change only 'spotSize'
               spotSize: 2mm   
           - step: *id002




  ?        set
           # YAML has a set type, which looks like this:
           set:
               ? item1
               ? item2
               ? item3

           # Like Python, sets are just maps with null values; the above is equivalent to:
           set2:
               item1: null
               item2: null
               item3: null




