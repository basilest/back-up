







interpreter:
tiv@stiv-GP60-2PE:~$ python
Python 2.7.8 (default, Oct 20 2014, 15:05:19)
[GCC 4.9.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> print "Hello World!"
Hello World!



file:
vi test.py
#!/usr/bin/env python
print "Hello World!"
ZZ
chmod +x test.py
./test.py







________________________________________

#--------------- <-- comment line
________________________________________

print "-" * 50       ---------------------   like in vi a command  50a


________________________________________

import           import math            to import module mathg.py
                 print math.e

________________________________________

+ - * /  % (mod)

+= -= *= /=

divmod         returns 2 num: div and also mod
               print "Months = %d Days = %d" % (divmod(days, 30))

<  ... ==  !=    test on num

and  or  not     test on bool


string <--->  num           float(string)    int(string)      give  num  from text
                            str(num)                          gives text from num


________________________________________

,              tuple  / or list
               a , b = 45, 54          a:45   b:54
               a, b = b , a            a <--> b    (switch)

               data = ("Kushal Das", "India", "Python")
               name, country, language = data      name:Kushal Das country:India language:Python

               n.b.  tuple are immutable cannot be added\remove values
                     a tuple of 1 elem is (1,)  not (1)

named tuple    For readability I can give a name xxx to a tuple
               namedtuple('xxx', ...)

               from collections import namedtuple
               Point = namedtuple('Point', ['x', 'y'])
               p = Point(10, y=20) <--- without the above line, here we had an error on undef Point

________________________________________

a = [ 1, 342, 2233423, 'India', 'Fedora']    <--- is a sequence (int and string here)

a[0]                    1
a[-1]                   'Fedora'
a[-2]                   'India'
a[0:-1]                 [1, 342, 2233423, 'India']
a[2:-2]                 [2233423]
a[:-2]                  [1, 342, 2233423]
a[0::2]                 from 0 at step of 2:  [1, 2233423, 'Fedora']
                        a[i:e:s]    from i-nit to e-nd  at s-tep

range(i,e,s)            returns a sequence from i to e-1 at step s
                        ange(1, 5)          [1, 2, 3, 4]
                        range(1, 15, 3)     [1, 4, 7, 10, 13]
                        range(10)           [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]


'Fedora' in a           True
'xxxx'   in a           False
if a:                   True is a not empty!

len(a)                  5
for x in a:             to iterate on the sequence


a.append(45)            ...., 45]     n.b.  if b is another list  a.append(b)
                                            [...., [ - ]]    a list in a list
                                            a.extend(b)      insert insted b values
                                                             [...., -, -, -]
a.insert(0, 1)          [1, .....
a.count(45)             1    (number of occurrence of 45 in a)
a.remove('India')
a.pop()                 moves out the last elem
a.pop(i)                moves out the 'i'  elem       pop(0)  the 1st
a.reverse()
a.sort
________________________________________

if:  else:  read_input_text    ( raw_input (...)    waits then returns keyboard input
                 #!/usr/bin/env python
                 number = int(raw_input("Enter an integer: "))
                 if number < 100:                if      :
                     print "smaller"
                 elif number == 100:             elif     :
                     print "is equal:
                 else:                           else      :
                     print "greater"

________________________________________

for:
               sum = 0.0
               for i in range(1, 11):
                   sum += 1.0 / i
________________________________________

while:
               f = float(raw_input("Enter f: "))
               i = int(raw_input("Enter i: "))
               while f <= i:
                   print "INT %d FLOAT %.2f" % (i, f)
                   f = f + 1
________________________________________ else on loops
         while / for :
             print 1
         else:
             print 2
________________________________________ break continue
break / conintue   as usual
________________________________________ List Comprehensions

build a list with a for inside []

>>> a = [1, 2, 3]
>>> [x ** 2 for x in a]
[1, 4, 9]
>>> z = [x + 1 for x in [x ** 2 for x in a]]
>>> z
[2, 5, 10]
________________________________________ for with both index and values
>>> for i, j in enumerate(['a', 'b', 'c']):
...     print i, j
...
0 a
1 b
2 c
________________________________________ zip()  to iterate in parallel on 2 lists
>>> a = ['Pradeepto', 'Kushal']
>>> b = ['OpenSUSE', 'Fedora']
>>> for x, y in zip(a, b):
...     print "%s uses %s" % (x, y)
________________________________________ Set (no duplicates inside)

>>> a = set('abcthabcjwethddda')
>>> a
set(['a', 'c', 'b', 'e', 'd', 'h', 'j', 't', 'w'])

>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a                                  # unique letters in a
set(['a', 'r', 'b', 'c', 'd'])
>>> a - b                              # letters in a but not in b
set(['r', 'd', 'b'])
>>> a | b                              # letters in either a or b
set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
>>> a & b                              # letters in both a and b
set(['a', 'c'])
>>> a ^ b                              # letters in a or b but not both
set(['r', 'd', 'b', 'm', 'z', 'l'])

To add or pop values from a set

>>> a
set(['a', 'c', 'b', 'e', 'd', 'h', 'j', 'q', 't', 'w'])
>>> a.add('p')
>>> a
set(['a', 'c', 'b', 'e', 'd', 'h', 'j', 'q', 'p', 't', 'w'])


________________________________________ Dictionary (are the associative array)

>>> data = {'kushal':'Fedora', 'kart_':'Debian', 'Jace':'Mac'}
>>> data
{'kushal': 'Fedora', 'Jace': 'Mac', 'kart_': 'Debian'}
>>> data['kart_']
'Debian'
---------- add
>>> data['parthan'] = 'Ubuntu'
>>> data
{'kushal': 'Fedora', 'Jace': 'Mac', 'kart_': 'Debian', 'parthan': 'Ubuntu'}
---------- del
>>> del data['kushal']
>>> data
{'Jace': 'Mac', 'kart_': 'Debian', 'parthan': 'Ubuntu'
---------- check
>>> 'Soumya' in data
False
---------- dict()     create from 2 tuple of keys and values
>>> dict((('Indian','Delhi'),('Bangladesh','Dhaka')))
{'Indian': 'Delhi', 'Bangladesh': 'Dhaka'}
---------- loop /iteritems()
>>> data
{'Kushal': 'Fedora', 'Jace': 'Mac', 'kart_': 'Debian', 'parthan': 'Ubuntu'}
>>> for x, y in data.iteritems():
...     print "%s uses %s" % (x, y)
---------- add
---------- add

________________________________________Strings

" or '

s = "Here is a line \                  splitted on 2 lines
... splitted in two lines"


s = "Here is a line \n split in two lines"    splitted on 2 lines


s = """ This is a                        3 "   to split on + lines
... multiline string, so you can
... write many lines"""

U = s.upper()
u = s.lower()
s.swapcase()
s.isalnum()            True if represents a num
s.isalpha()            True if only letters
s.split(':')           "Nishant:is:waiting"  --> ['Nishant', 'is', 'waiting']
join                   -".join("GNU/Linux is great".split(" ")) --> 'GNU/Linux-is-great'
strip(chars)           strip any combination of chars (default blanks (\s \n))
                       s = "  abc\n " s.strip() --> 'abc'
find()                 s = "faulty for a reason"   s.find("for") : 7    s.find("fora") : -1
startswith             s.startswith("fa")     True
endswith               s.endswith("reason")   True


n.b.  s = "....."   z = s[::-1]      z is the reverse of s
________________________________________ Functions

def functionname(params):           def .... :
    ....

def sum(a, b):                      args                default arg:  def sum(a , b=-99):
    ...     return a + b

def change(b):                      local var
    a = 90
    print a

def change(b):                      global var
    global a
    a = 90
    print a


print locals()     returns the var that I see in this scope (in a function the local)
print globals()    returns global vars


n.b.  default args are evaluated only ONCE.
      In some cases this can produce unexpected results:

      def f(a, L=[]):
          L.append(a)
          return L

     print f(1)    -->  [1]
     print f(2)    -->  [1, 2]
     print f(3)    -->  [1, 2, 3]

     args, are normally positional:  ...(a,b) means in a call ...(1,2)  a:1 b:2
     but are also 'named', which means I can also call like ...(b=2, a=1)
     so inverting the order, but still it works.


* args     both in a definition:  def f1(...,*args):    def f2(..., **args)
** args    and in a subsequent call to fun:
                      t=(1, 2, 3)            h== {'x': 1, 'y': 2}
                      a=[1,2]                f2(**h)
                      f1(*t)
                      f1(*a)

           I can use *args  **args to pass a list or a hash in 1 shot.


functions are objects in Python, just like everything else.
This means that I can pass a function as 'argument' to another function,
or in the return statement.

                     >>> def apply(func, x, y):   <--- I then can call as applay(add, 2, 1)
                     ...     return func(x, y)         where i.e. def add(x,y):
                                                                      return x+y
                    _______________________________
                   | def outer():
                   | ...     def inner():
                   | ...         print "Inside inner"
                   | ...     return inner
                   |
                   | f = outer()
                   | f() -->  Inside inner
                   |_______________________________
                   |                            Closures: is the scope-envrionment saved
                   | def outer():               for inner functions. The above inner()
                   | ...     x = 1              once passed out, and used, should not anymore
                   | ...     def inner():       have access to the scope of outer() (so here i.e. x var)
                   | ...         print x        but Python allows the during its life, inner()
                   | ...     return inner       still will have a x=1. It's like that outer()
                   |                            has made by constructor for inner
                   | f = outer()                and 'x' has been added to its private var.
                   | f() -->  Inside inner



map(fun, list)                  receives a fun to call for each elem of the list

                                lst = [1, 2, 3, 4, 5]
                                def square(num):
                                    return num * num
                                ...
                                map(square, lst)          [1, 4, 9, 16, 25]


________________________________________  Files

fobj = open("love.txt")    open in read is the default, so I can skip long form
                           fobj = open("love.txt", 'r')
fobj           -->  <open file 'love.txt', mode 'r' at 0xb7f2d968>
fobj.close()


read()              read ALL the file at once         S=fobj.read()
readline()          read 1 line                       l=fobj.readline()
readlines()         read ALL file in a lines array    a=fobj.readlines()


for                 a way to fast write code that read 1 line a time:
                            fobj = open("sample.txt")
                            for line in fobj:
                            ...     print line,


with                'with' takes care of closing the file for me.
                    with open('setup.py') as fobj:
                    ...     for line in fobj:
                    ...             print line,


write              obj = open("ircnicks.txt", 'w')    last open mode is 'a':append
                   fobj.write('powerpork\n')
                   fobj.close()

seek(offset [,pos])     offset:num bytes from pos
                        pos:    0 (default) start of file
                                1 current position (that I reached somehow)
                                2 end of file

                        fobj.seek(5)     # Goto 5th byte
                        fobj.seek(-3, 2) # goto 3rd byte from the end
                        fobj.tell()      # return Long integer with position

________________________________________ argc, argv

as usual, only import sys

#!/usr/bin/env python                          ./argvtest.py Hi there
import sys                                      First value ./argvtest.py
print "First value", sys.argv[0]                All values
print "All values"                              0 ./argvtest.py
for i, x  in enumerate(sys.argv):               1 Hi
    print i, x                                  2 there


               typical code (with also exit fun):
               if __name__ == '__main__':
                   if len(sys.argv) > 1:
                           main(sys.argv[1])
                   else:
                          sys.exit(-1)
                   sys.exit(0)

________________________________________   Exceptions

try:
   .....
except TypeError:         if empty      except:    it catches ANY excp.
   ...
finally:
   ...

raise                     to throw an excp.  I can even catch it myself in the except block:
                          try:
                          ...     raise ValueError("A value error happened.")
                          except ValueError:
                          ...     print "ValueError."


________________________________________  Class

class nameoftheclass(parent_class):       class MyClass(object):
    statement1                            ...     a = 90
    statement2                            ...     b = 88
    statement3


__init__                  the constructor
                          def __init__(self, name, branch, year):
                                       self.name = name
                                       self.branch = branch
                                       self.year = year

del                       to remove an object.
                          It decreases reference count. When it becomes 0
                          the garbage collector will delete that object.


setters / getters         Do not use. Refer directly fields  (get) ob.field / (set) ob.field = v
                          There is control on fields as private/ public / protected
                                     .....

Inheritance               class Person(object):
                                     .....
                          class Student(Person):
                                     .....

Multiple Inheritance      class MyClass(Parentclass1, Parentclass2,...):
                                     .....
________________________________________ Modules

              module name to import = name of Python file without .py           xxx.py  (a file)
              You can find it by accessing the global var __name__
__init__.py   A module xxx instead of a file xxx.py can also be a dir xxx       xxx     (a dir)
              In this case we have a dir xxx with + files .py and 1 special      |__  *.py
              file __init__.py                                                   |__  __init__.py

              usually __init__.py
              is something as:

              from bars import simplebar      <---  if someone makes:
              __all__ = [simplebar, ]                 from mymodule import *
                                                      it's the same as importing only simplebar


import:       import  bars
              .....
              bars.func (10) ...

from bars import simplebar, starbar      this syntax, import select functions only
                                         but it's a bad practice and should be avoided

help()        enter from python shell the interactive help
           1  >modules              I get the list of installed modules
           2  >xxx                  name of module (here xxx) to have doc on the module

              instead of 1+2 I can directly do  help(xxx)   ex help(str) I've ALL the
              list of functions on strings

pip:       it's the package manager for python modules. (Go to the pip part of this document)

yolk       list all the modules installed
           yolk -l

________________________________________ pip


pip:       modules (external) are usually managed by 'pip' which recursively means (pip install python)

           to check if pip is installed:
           python -m pip --version


           sudo apt-get install python-pip

           once pip is installed, you can install modules:
                             sudo pip install yolk
                             sudo pip install --upgrade yolk      # to update
                             sudo pip install -U        yolk      # to update

           I can update pip via pip itself :
             pip install --upgrade pip
             pip install -U        pip

             but it seems replace by the following
                  python2 -m pip install --upgrade pip   # for Python 2
                  python3 -m pip install --upgrade pip   # for Python 3

              ---------------------------------
              ISSUE OF PIP NOT UPGRADING ITSLEF:
              ---------------------------------

              Python.org sites stopped supporting TLS version 1.0 and 1.1, which could be causing
              the chicken-and-egg problem. Try upgrading pip without using pip

                   curl https://bootstrap.pypa.io/get-pip.py | python             #old

                   curl https://bootstrap.pypa.io/pip/2.7/get-pip.py | python     #new




              ---------------------------------
               2.1  At this point is better to tidy up the system wrt python.

               Like perlenv there is
                           . virtualenv          https://virtualenv.pypa.io/en/stable/userguide/
                           . virtualenvwrapper   is a set of extensions to virtualenv.
                                                 https://virtualenvwrapper.readthedocs.io/en/latest/command_ref.html  <--- cmd reference
                                                 which makes the usage of virtualenv
                                                 easier with shortcuts (e.g. workon)


                     1   pip uninstall virtualenvwrapper
                     2   pip uninstall virtualenv
                     3.  pip install virtualenv
                     4.  pip install virtualenvwrapper

                         this will install a shell script (virtualenvwrapper.sh) somewhere
                         (on the Mac in 1 of these possible places:
                                         /Library/Frameworks/Python.framework/Versions/2.7/bin/virtualenvwrapper.sh)
                                         /usr/local/bin/virtualenvwrapper.sh                   ^^^^^^^^^^^^^^^^^^^^
                                         ...)           ^^^^^^^^^^^^^^^^^^^^
                     5.  source ....../virtualenvwrapper.sh (add this also in the .bashrc)
                                       ^^^^^^^^^^^^^^^^^^^^
                     6.  WORKON_HOME=~/PYTHON_ENVS (or any wanted dirname)
                     7.  workon             without args just list the virtual envs (they are the dirs inside $WORKON_HOME)
                     8.  mkvirtualenv env1  this will install a new python in a dir $WORKON_HOME/env1
                                            This env1 env2 ... envn dirs
                                            have the same structure:
                                                     these 3 dirs
                                                      ls ~/PYTHON_ENVS/2.5.2
                                                                          |_/bin
                                                                          |_/lib
                                                                          |_/include

                                                      in the "bin" directory the modules are then installed
                                                      every time I do "pip install xxxx"

                                                      ls ~/PYTHON_ENVS/2.5.2
                                                                          |_/bin
                                                                          |      activate
                                                                          |      activate.csh
                                                                          |      activate.fish
                                                                          |      activate.ps1
                                                                          |      activate_this.py
                                                                          |      ansible
                                                                          |      ansible-config
                                                                          |      ansible-connection
                                                                          |      ansible-console
                                                                          |      ansible-doc
                                                                          |      ansible-galaxy
                                                                          |      ansible-inventory
                                                                          |      ansible-playbook
                                                                          |      ansible-pull
                                                                          |      ansible-vault
                                                                          |      easy_install
                                                                          |      easy_install-2.7
                                                                          |      get_env_details
                                                                          |      pip
                                                                          |      pip2
                                                                          |      pip2.7
                                                                          |      postactivate
                                                                          |      postdeactivate
                                                                          |      preactivate
                                                                          |      predeactivate
                                                                          |      python
                                                                          |      python-config
                                                                          |      python2
                                                                          |      python2.7
                                                                          |      wheel
                                                                          |_/lib
                                                                          |      python2.7
                                                                          |
                                                                          |_/include
                                                                                 python2.7

                                            7.1 example then to install python modules with pip (ex. ansible)
                                            pip install ansible==2.5.2
                                            pip install redis

                     9.  lssitepackages     to see the packages
                    10.  mkvirtualenv env2  this will install another python in a dir $WORKON_HOME/env2
                    11.  workon env1        sets the env. (here back to env1)
                    12.  deactivate         Switch from a virtual environment to the system-installed version of Python.

                    virtualenvwrapper (other commands) :
                                       . lsvirtualenv     -b (brief)   -l (long/verbose)   -h (help)
                                       . rmvirtualenv     ex. rmvirtualenv env1    (<---- NB. better to run after a deactivate (of env1))
                    ex. lsvirtualenv    gives

                        env_ansible.2.3.1.0
                        ===================

                        env_ansible.2.5.2           <----------- I then can do    workon env_ansible.2.5.2
                        ===================

                        env_ansible.2.6.2
                        ===================

pip list
            Package         Version
            --------------- -------
            awscli          1.18.53
            boto3           1.13.3
            botocore        1.16.3
            colorama        0.4.3
            docutils        0.15.2
            jmespath        0.9.5
            pip             20.1
            pyasn1          0.4.8
            python-dateutil 2.8.1
            PyYAML          5.3.1
            rsa             3.4.2
            s3transfer      0.3.3
            setuptools      46.1.3
            six             1.14.0
            urllib3         1.25.9
            wheel           0.34.2



pip list --outdated

            Package    Version Latest  Type
            ---------- ------- ------- -----
            awscli     1.18.53 1.18.88 wheel
            boto3      1.13.3  1.14.11 wheel
            botocore   1.16.3  1.17.11 wheel
            docutils   0.15.2  0.16    wheel
            jmespath   0.9.5   0.10.0  wheel
            pip        20.1    20.1.1  wheel
            rsa        3.4.2   4.6     wheel
            setuptools 46.1.3  47.3.1  wheel
            six        1.14.0  1.15.0  wheel



[xml@i-041925ed4c545e6a2 ~]$ pip3 freeze          # (both with pip & pip3)  to show the list of modules

            ansible==2.10.6
            ansible-base==2.10.15
            awscli==1.21.8
            boto==2.49.0
            boto3==1.20.22
            botocore==1.23.22
            cffi==1.15.0
            colorama==0.4.3
            cryptography==35.0.0
            distro==1.6.0
            docutils==0.15.2
            j2cli==0.3.10
            Jinja2==3.0.2
            jmespath==0.10.0
            MarkupSafe==2.0.1
            packaging==21.2
            pyasn1==0.4.8
            pycparser==2.20
            pyparsing==2.4.7
            python-dateutil==2.8.2
            PyYAML==5.4.1
            rsa==4.7.2
            s3transfer==0.5.0
            selinux==0.2.1
            six==1.16.0
            urllib3==1.26.7


[xml@i-041925ed4c545e6a2 ~]$ pip3 show boto3
            Name: boto3
            Version: 1.20.22
            Summary: The AWS SDK for Python
            Home-page: https://github.com/boto/boto3
            Author: Amazon Web Services
            Author-email:
            License: Apache License 2.0
            Location: /usr/local/lib/python3.6/site-packages
            Requires: botocore, jmespath, s3transfer
            Required-by:


________________________________________ MORE PYTHONS


        there are "different" (not "many", as these solution do not always overlap and do different things)
        solutions to have more PYTHON versions and switch between them
        This creates confusion and goes against the Python Zen:

            “There should be one – and preferably only one – obvious way to do it.”


        venv                          is builtin with Python 3, which you can run using
                                                 python3 -m venv
                                      It serves a similar purpose to virtualenv, and works in a very similar way,
                                      but it doesn't need to copy Python binaries around (except on Windows).
                                      Use this if you don't need to support Python 2.

        virtualenv / virtualwrapper : they copy the full python executable binary file in their env directories.
                                      >>>>> As Python looks for its LIBRARIES starting relative to its path first <<<<<<
                                      avery Python will use theirown env libraries

        pyenv / pyenv-virtualenv / pyenv-virtualwrapper : they copy the full python executable binary file in their env directories.
                                      it isolates Python versions (ex. Python 2.6, 2.7, 3.3, 3.4 and 3.5) and switches between them.
                                      It prefixes PATH with
                                                       ~/.pyenv/shims,
                                      which contains special files matching commands (python & pip).
                                      These are not copies of the binaries like in virtualenv / virtualwrapper
                                      but special scripts that decide on the fly which version of Python to run based on
                                               PYENV_VERSION    env var
                                               .python-version  file,
                                               ~/.pyenv/version file.

                                       pyenv also makes the process of downloading and installing multiple Python versions easier, i
                                       using the command pyenv install.

                                       pyenv-virtualenv:     plugin to use both pyenv & virtualenv
                                       pyenv-virtualwrapper: plugin to use both pyenv & virtualwrapper


________________________________________ os

import os

os.getuid()            500  (user id)
os.getpid()            16150 (proc id)
os.getppid()           14847 (parent id)
os.uname()             ('Linux', 'd80', '2.6.34.7-56.fc13.i6 ....

work on dirs           os.getcwd()      -->  '/home/kushal'
                       os.chdir('/tmp')
                       os.getcwd()      -->  '/tmp'

                       names = os.listdir(path)
                       names.sort()
                       for name in names:
                           print name,




________________________________________ Fast operations on Collections

from collections import Counter

z=Counter(l)       receives a list l, returns like an hash: a list of pairs
                   elem:num   enum is any different elem of l, num its the occurrences

z.most_common(N)   returns the first N elem of z, ordere by  occurences

z.elments()        returns a list from z, whit all elem of z, each duplicated n times
                   (its number of occurrences)



________________________________________ Test

import unittest                  unittest is the python module for testing

class MyTestClass (unittest.TestCase):    define a test class (derived from unittest.TestCase)
                                          where call the functions I want to test.
                                          Each method of 'MyTestClass' named like

                                                          test_xxxxx()

                                          will be called launching:

                                                          unittest.main()

                                          Each test_xxx() inside is a template like
                                                          res = ffff()
                                                          self.asserTTTTTTTT

                                          where ffff() is the function I want to test
                                          asserTTTTT is one of many way unittest provides to test:

assertEqual(a, b)           a == b                ex. self.assertEqual(res, 120)
assertNotEqual(a, b)        a != b
assertTrue(x)               bool(x) is True
assertFalse(x)              bool(x) is False
assertIs(a, b)              a is b
assertIsNot(a, b)           a is not b
assertIsNone(x)             x is None
assertIsNotNone(x)          x is not None
assertIn(a, b)              a in b
assertNotIn(a, b)           a not in b
assertIsInstance(a, b)      isinstance(a, b)
assertNotIsInstance(a, b)   not isinstance(a, b)

assertRaises(....Error, ...)          ex. self.assertRaises(ZeroDivisionError, div, 0)



python-coverage             is the module to test how much I test covered my code:
                            sudo pip install coverage
                            coverage -x mytest.py



________________________________________   develop a module 'basilest'

     1. mkdir temp                                         temp
     2. cd temp                                              |__ basilest
     3. mkdir basilest                                       |     |__ myfile.py
     4. vi basilest/myfile.py                                |     |___  __init__.py
     4. vi basilest/ __init__.py                             |__ README.rst
     5. vi ./README.rst                                      |__ MANIFEST.in
     6. vi MANIFEST.in                                       |__ setrup.py
                        include *.py
                        include README.rst
                        n.b. you can also use dir 'exclude'
     7. sudo pip install setuptools
     8. vi setup.py
                        #!/usr/bin/env python
                        """ my module description here"""
                        from setuptools import find_packages, setup

                        setup(name = 'proj_basilest',------------------------\
                        version = '0.1',                                     |
                        description = "Basile module.",                      |
                        long_description = "A test module for our book.",    |
                        platforms = ["Linux"],                               |
                        author="Kushal Das",                                 |
                        author_email="kushaldas@gmail.com",                  |
                        url="http://pymbook.readthedocs.org/en/latest/",     |
                        license = "MIT",                                     |
                        packages=find_packages()                             |
                        )                                                    |
                                             --------------------------------'
                                             |
     9. python setup.py sdist    --->  proj_basilest-0.1.tar.gz
    10. python setup.py install

________________________________________ Decorators


              def outer(fun_to_cut):              receives a fun to cut from  its old def
              ...     x = 1
              ...     def inner():
              ...         print x
              ...         r = fun_to_cut()        here call the original fun
              ...         return r;               return original r
              ...     return inner                outer returns the Closuer 'inner'

              def f():         #1
                 bla bla bla

              f()                here f () calls original #1
              f = outer(f)       assigning again to f, from now on I lost original def
                                 and f() will call the Closuer inner where legacy f is in
              f() -->  Inside inner

@             the f = outer(f) assignment can be left as it is, or
              can be also specified as

              @outer              which means, where there is the original def of f()
              def f():            I use @ and the name of the function containin the Closure
                 bla bla bla      so here 'outer'


(*args, **kwargs)    the moste general form, considering any number and type
             of args, is substitute the 'def inner()' with the syntax:
                      def inner(*args, **kwargs):
             while def 'outer(fun_to_cut)' remains equal, 1 arg only


________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________
________________________________________

