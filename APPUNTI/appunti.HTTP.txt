HTTP   Hypertext Transfer Protocol


       -------------------------------
  T      HTTP/1.0         Tim Berners Lee (CERN)          1989
  C                                                               . A 'connection' (3 handshake) is performed for every URL
  P                                                                 (very expensive)

  T                                                               . only method GET (case sensitive!)
  C
  P                                                               . the resource was always 1 HTML file

  T                                                               . the server app was a text web server
  C      HTTP/0.9          1st document HTTP WG           1991
  P                           (Working Group)

  T
  C      HTTP/1.0        . RFC 1945                       1996
  P                                                               . 2 additional Methods: HEAD / POST  (still case sensitive!)

  T                                                               . Header fields
  C
  P      HTTP/1.1
                         .                                1996    RFC 2068 was still working in progress but browser companies started
  T                                                               to implement the soon to come HTTP/1.1 defined there
  C                      .                                1996 March 40% of people browsing had browsers with HTTP/1.1 supported
  P                      .                                1996 June  65% of people browsing had browsers with HTTP/1.1 supported

  T                      . RFC 2068  (HTTP-NG)            1997  (obsoleted by next)
  C                      . RFC 2616                       1999  (obsoleted by next)
  P                      . RFC 7230 (a family)            2014

  T                             RFC 7230, HTTP/1.1: Message Syntax and Routing
  C                             RFC 7231, HTTP/1.1: Semantics and Content
  P                             RFC 7232, HTTP/1.1: Conditional Requests
                                RFC 7233, HTTP/1.1: Range Requests
  T                             RFC 7234, HTTP/1.1: Caching
  C                             RFC 7235, HTTP/1.1: Authentication
  P                                                               . HTTP/1.1 add 5 Methods: OPTIONS, PUT, DELETE, TRACE and CONNECT.
                                                                             (still case sensitive!)

                                                                  . HTTP/1.1 adds a KEEP-ALIVE mechanism to reuse the connections. (persistent connections)

                                                                  . HTTP/1.1 adds "CHUNKED TRANSFER ENCODING" to allow content on
                                                                             (persistent) connections to be streamed rather than buffered.

                                                                  . HTTP/1.1 adds "HTTP PIPELINING"  allowing clients to send multiple requests before
                                                                             waiting for each response.

                                                                  . HTTP/1.1 adds "BYTE SERVING", where a server transmits just the portion of a resource
                                                                             explicitly requested by a client.

  T      HTTP/2
  C                      . RFC 7540                       2015
  P                                                               . A

       -------------------------------
  U      HTTP/3
  D                      .
  P                                                               . A



---------------------------------------------------------------------------------------


        Client                                     Server
       (browser)           HTTP-header           (ex. Apache)
                           -----
                            TCP
                  ------------------>  Port:80


                  <------------------
                           HTTP-header
                           -----
                            TCP


  HTTP is
           . a protocol at the APPLICATION layer
           . on TCP  (HTTP 1 & 2)      port 80 (default (occasionally 8080), but can be any)
           . on UDP  (HTTP 3)
           . STATELESS:                servers do not store requests info among more request.
                                       However, some web applications implement states or server side sessions
                                       using for instance HTTP cookies or hidden variables within web forms
           . allows AUTHENTICATION     (more authentication schemes,
                                        . basic  access authentication
                                        . digest access authentication )

           . identifies RESOURCES with URLs  (Uniform Resource Locators)


            userinfo          host        port
        ┌───────┴───────┐ ┌────┴────────┐ ┌┴┐
 http://john.doe:password@www.example.com:123/forum/questions/?tag=networking&order=newest#top
 └─┬─┘ └───────────┬────────────────────────┘└─┬─────────────┘└────────┬──────────────────┘└┬─┘
 scheme         authority                      path                  query             fragment





MESSAGE FORMATS

         both requests
                       Client ---------> Server

         and answers
                       Client <--------- Server

   have a general scruture like the following where Request and Answers can slightly change.


HTTP-header           Client and Server communicate via TCP messages
                      containing as Data a HTTP-header with this structure:
                      N.B. ALL lines ends in DOS format ( \r\n or CR+LF ASCII 13+10)


                          | ----------------------
                        1 | <a starting line>    <--  differ for request & response
                          | ----------------------
                          |
                          | Header1: value1
                        2 | Header2: value2      <-- HEADER lines  (OPTIONAL)  In HTTP/1.1 "Host: ..." is MANDATORY
                          | Header3: value3                                    ex. Host: www.example.com
                          | ----------------------
                        3 |
                          |  \r\n                <-- 1 blank line (only 1 CR+LF)
                          | ----------------------
                          |
                        4 | .... body ....       <-- any text/binary data  (OPTIONAL)
                          |
                          | ----------------------

                ______________________________________________
                1. Initial Line:   3 parts, with 2 spaces:

                    for a   REQUEST:

                                   GET /path/to/file/index.html HTTP/1.0     1- a method (GET,HEAD,POST,OPTIONS,PUT,DELETE,TRACE,CONNECT (case senst.)
                                     ^               ^             ^         2- Resources PATH / URL
                                     1               2             3         3- HTTP version to use
                                                                                     with the form HTTP:/x.x
                    for a   RESPONSE:    called 'status line'

                                   HTTP/1.0         404         Not Found    1- the same HTTP:/x.x
                                     ^               ^             ^         2- status-code    (for computer)
                                     1               2             3         3- reason phrase  (for humans)

                                                 status codes: 3-digits, grouped by the 1st

                                                          1xx informational message only
                                                          2xx success of some kind
                                                          3xx redirects the client to another URL
                                                          4xx Client side err
                                                          5xx Server side err

                                                                The most common:
                                                                             200 OK
                                                                             404 Not Found
                                                                             301 Moved Permanently
                                                                             302 Moved Temporarily
                                                                             303 (HTTP 1.1 only) # used often in CGI script.
                                                                                 (URL given by the Location: response header),
                                                                                 so the client can automatically retrieve it.
                                                                             500 Server Error (most common cause: server script syntax err)

                NOTE:  A REQUEST message with ONLY this 1st line is accepted by the servers
                       to be backward compatible with versions < HTTP/1.0

                REQUEST METHODS:

         RFC 7231_______:
                            GET      by spec if should have no other effect than retreive data (idempotent)

                            HEAD     like a GET but the server will answer with same HEADER (of a GET) but without the BODY
                                     (useful when I only need the metainfo in the header.

                            POST     usually has a body

                            PUT      .

                            DELETE   delete that RESOURCE

                            OPTIONS  the server will answer with the Methods it supports for the sent URL.
                                     (useful when I only need the metainfo in the header)

                            CONNECT  .

                            TRACE    The server will echo the REQUEST so that a client can see what (if any)
                                     changes or additions have been made by intermediate servers.
                                     It can be used as part of a class of attacks known as cross-site tracing;
                                     for that reason is usually disabled.

         RFC 5789_______:
                            PATCH    applies partial modifications to a resource.





                ______________________________________________
                2. HEADERs lines
                   1 line per header with the form

                       ------ HEADER_NAME :         value    CRLF           lines beginning with space or tab are part of the previous header,
                         ^       ^        ^     ^     ^       ^
                   NO SPACES case-SENSITIVE     \s
                   BEFORE                       \t


                             ex:
                                    Header1: some-long-value-1a, some-long-value-1b
                                    HEADER1:    some-long-value-1a,
                                                some-long-value-1b



                            HTTP 1.0       defines 16 headers  (ALL OPTIONAL)
                            HTTP 1.1       defines 46 headers, (1,  (Host:) is Mandatory in REQUESTS.

                                  Most Common:

                                     for a REQUEST:     "From:"        gives an email address
                                                        "User-Agent:"  identifies the program with the form
                                                                            "Program-name/x.xx",

                                                                          ex "User-agent: Mozilla/3.0Gold".

                                     for a RESPONSE:
                                                        Content-Type: text/html; charset=UTF-8       specifies  MIME Type
                                                        Content-Length: 138                          specifies  size in BYTES
                                                                                                     if missing the len is determined in other ways.
                                                        Etag: "3f80f-1b6-3e1cb03b"                   used to determine if a cached version
                                                                                                     is up-to-date (same version of the server).
                                                        Server: Apache/1.2b3-dev"
                                                        Last-Modified: Fri, 31 Dec 1999 23:59:59 GMT"
                                                        Accept-Ranges: bytes                          used in "BYTE SERVING" when the client needs to have
                                                                                                      only certain portions of a resource,
                                                        Connection: close                             the server will close the TCP connection
                                                                                                      immediately after the transfer of this response.
                ______________________________________________
                3. new line
                           even not-standard, some implementations allow only LF instead of the mandatory CRLF
                ______________________________________________
                4. Optional Body
                           If a HTTP message includes a body, there are usually header lines to describe it.

                               "Content-Type:"    MIME-type of the data, ex text/html or image/gif.
                               "Content-Length:"  body len in bytes
                ______________________________________________



3 STEPS       the most basic message flow is a 3-ways-handshake

                  ex on http://www.somehost.com/path/file.html


                  1. Open the socket
                        server:  http://www.somehost.com/
                        port  :  80 (if not specified)

                  2. Client sends this REQUEST --------->
                                       GET /path/file.html HTTP/1.0
                                       From: someuser@jmarshall.com
                                       User-Agent: HTTPTool/1.0
                                       \n

                  3. Servers sends this RESPONSE   <------------
                                                   HTTP/1.0 200 OK
                                                   Date: Fri, 31 Dec 1999 23:59:59 GMT
                                                   Content-Type: text/html
                                                   Content-Length: 1354

                                                   <html>
                                                   <body>
                                                   <h1> ....
                                                     .
                                                         </body>
                                                         </html>

GET / HEAD / POST
                HEAD  is like GET but the Server RESPONSE will NEVER
                      contain a body
                      This is useful to check a resource without actually
                      downloading it, thus saving bandwidth.

                POST  i)   has always a body
                      ii)  having a body, has usually headers
                      iii) the URI is normally the path of the prog (CGI) to execute
                           that will see the data in the body in its STDIN
                      iv)  can be used to send anything once Client and Server
                           both agree on the used format.

                               ex.
                                  POST /path/script.cgi HTTP/1.0
                                  From: frog@jmarshall.com
                                  User-Agent: HTTPTool/1.0
                                  Content-Type: application/x-www-form-urlencoded
                                  Content-Length: 32

                                  home=Cosby&favorite+flavor=flies

HTTP Proxy
                They rely between Client and Server and forward the traffic.
                One main usage is to CACHE data in a LAN
                A Client's REQUEST will differ only in the 1st line
                where there is a complete URL not just the path:

                     GET http://www.somehost.com/path/file.html HTTP/1.0
                instead of
                     GET /path/file.html HTTP/1.0

                the proxy knows which server to forward the request to (even another proxy)

                forward proxy:  they are 'client' proxy. They are at the source of the chain,
                                and can control how to forward outgoing traffic (it can also block it)

                reverse proxy:  they stay on the destination side. It's the other site administrator
                                to hide the internal servers putting as public visible a proxy.
                                It will manage the requests, redirecting on the appropriate server
                                whihch will answer again to the proxy which will return to the requester.



______________________________________
HTTPS
                  provides bidirectional encryption of communications between a client and server.
                  protects against man-in-the-middle attacks.
                  Basically there are 3 stages in any HTTPS connection:

                   1 Connection negotiation - the client (your browser) and the server (Web server or proxy)
                                              negotiate the basic parameters: ciphers to use, session key, etc.
                   2 Connection authentication: at the very least the server presents the client with a certificate
                                              that says "I am server www.encrypted.com - and certificate.authority.org will verify that".
                                              The client may also present a certificate of its own at this stage.
                   3 Request/response cycle: normal HTTP is sent (through the encrypted channel) back and forth.

                 The vital point to notice here is that connection authentication takes place BEFORE any request was issued.

                 HTTPS URLs begin with "https://" and use port 443 by default.
______________________________________
Sessions and Stateless
                 Unfortunately, HTTP is defined as a stateless protocol, which complicates matters:
                 many schemes have been invented to allow keeping track of sessions, none of which works perfectly.
                 Even worse, sessions are critical in order to allow web-based applications to function correctly-
                 it is vital that ONCE a session is established ALL subsequent requests from the same browser
                 be directed to the same back-end server.
______________________________________
HTTP/2
                 Did you notice that all HTTP headers is a bunch of text ?
                 HTTP/2 is a new RFC binary protocol that makes much easier to parse a HTTP/2 header.
                 Moreover it fixes some congestion problem of HTTP that requires 1 request per TCP connection.
                 With HTTP/1, browsers open between 4 and 8 connections per origin.
                 Since many sites use multiple origins, this could mean that a single page load
                 opens more than 30 connections.
                 So many connections simultaneously breaks a lot of the assumptions that TCP was built upon.

                 HTTP/2 acts multiplexing, allowing multiple request and response messages to be in flight at the same time.

______________________________________
WebSocket
                 It's an evoluton of HTTP(S) so instead of http://  https:// the url
                 are of type                               ws://    wss://

                 It's:
                   - based on TCP     (the protocol is defined in RFC 6455)
                   - at Developer level API's are standardized by W3C HTML5
                   - of course both server and client must implement it.
                     In the specific the handshake start as an HTTP\HTTPs and
                     then switch into the new protocol.

                     In the specific, client request and server response are as follows:

                                                             GET /chat HTTP/1.1
                                                             Host: server.example.com
                                                             Upgrade: websocket <---- this is the new HTTP header to switch into websocket
                                                             Connection: Upgrade
                                  request <-------------     Sec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==  <---  key
                                                             Sec-WebSocket-Protocol: chat, superchat
                                                             Sec-WebSocket-Version: 13
                                                             Origin: http://example.com                   <---  Origin

                                                             1. the new HTTP header is Upgrade: websockt
                                                             2. a random base64 key is added
                                                             3. a normal HTTP header, Origin is usually present (to identify the client)

       code 101 --> HTTP/1.1 101 Switching Protocols
                    Upgrade: websockete             ------------>   response
                    Connection: Upgrade
                    Sec-WebSocket-Accept: HSmrc0sMlYUkAGmm5OPpG2HaGWk=
                    Sec-WebSocket-Protocol: chat


                    1. Server response has a code 101
                    2. performs some SHA1 on client key and returns a new base64 code ...-Accept
                    3. The Origin infomation can be used on Server side to improve security checks


______________________________________
HTTP is defined by RFCs

     retrieving the FULL RFC db, and sorting them out as

     perl -e 'while (<>) {if ($_=~/^RFC[^ ]* /) {$line=$_;} else {if($_ =~/^[ ]*$/) {$line =~ s/\n//g; print "$line\n"} else {$line .= $_}};}' \
          | grep -i -v  obsoleted | grep -i http



1945    Hypertext Transfer Protocol -- HTTP/1.0.                           T. Berners-Lee, R.   (Status:     INFORMATIONAL)
2169    A Trivial Convention for using HTTP in URN Resolution.                                                             June      1997.(Status: EXPERIMENTAL)
2227    Simple Hit-Metering and Usage-Limiting for HTTP.                                                                   October   1997.(Status: PROPOSED STANDARD)
2295    Transparent Content Negotiation in HTTP.                                                                           March     1998.(Status: EXPERIMENTAL)
2296    HTTP Remote Variant Selection Algorithm -- RVSA/1.0.                                                               March     1998.(Status: EXPERIMENTAL)
2585    Internet X.509 Public Key Infrastructure Operational Protocols: FTP and HTTP.                                      May       1999.(Status: PROPOSED STANDARD)
2774    An HTTP Extension Framework.                                                                                       February  2000.(Status: EXPERIMENTAL)
2817    Upgrading to TLS Within HTTP/1.1.                                                                                  May       2000.(Updates RFC2616) (Updated by RFC7230, RFC7231) (Status: PROPOSED STANDARD)
2818    HTTP Over TLS.                                                                                                     May       2000.(Updated by RFC5785, RFC7230) (Status: INFORMATIONAL)
2935    Internet Open Trading Protocol (IOTP) HTTP Supplement.                                                             September 2000.(Status: PROPOSED STANDARD)
2936    HTTP MIME Type Handler Detection.                                                                                  September 2000.(Status: INFORMATIONAL)
2964    Use of HTTP State Management.                                                                                      October   2000.(Status: BEST CURRENT PRACTICE)
3143    Known HTTP Proxy/Caching Problems.                                                                                 June      2001.(Status: INFORMATIONAL)
3205    On the use of HTTP as a Substrate.                                                                                 February  2002.(Status: BEST CURRENT PRACTICE)
3229    Delta encoding in HTTP.                                                                                            January   2002.(Status: PROPOSED STANDARD)
3230    Instance Digests in HTTP.                                                                                          January   2002.(Status: PROPOSED STANDARD)
3310    Hypertext Transfer Protocol (HTTP) Digest Authentication Using  Authentication and Key Agreement (AKA).            September 2002.(Status: INFORMATIONAL)
4130    MIME-Based Secure Peer-to-Peer Business Data Interchange Using HTTP, Applicability Statement 2 (AS2).              July      2005.(Status: PROPOSED STANDARD)
4169    Hypertext Transfer Protocol (HTTP) Digest Authentication Using  Authentication and Key Agreement (AKA) Version-2.  November  2005.(Status: INFORMATIONAL)
4229    HTTP Header Field Registrations.                                                                                   December  2005.(Status: INFORMATIONAL)
4236    HTTP Adaptation with Open Pluggable Edge Services (OPES).                                                          November  2005.(Status: PROPOSED STANDARD)
4387    Internet X.509 Public Key Infrastructure Operational Protocols: Certificate Store Access via HTTP.                 February  2006.(Status: PROPOSED STANDARD)
4559    SPNEGO-based Kerberos and NTLM HTTP Authentication in Microsoft Windows.                                           June      2006.(Status: INFORMATIONAL)
4918    HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV).                                             June      2007.(Obsoletes RFC2518) (Updated by RFC5689) (Status: PROPOSED STANDARD)
5789    PATCH Method for HTTP.                                                                                             March     2010.(Status: PROPOSED STANDARD)
5843    Additional Hash Algorithms for HTTP Instance Digests.                                                              April     2010.(Status: INFORMATIONAL)
5861    HTTP Cache-Control Extensions for Stale Content.                                                                   May       2010.(Status: INFORMATIONAL)
5985    HTTP-Enabled Location Delivery (HELD).                                                                             September 2010.(Updated by RFC7840) (Status: PROPOSED STANDARD)
5987    Character Set and Language Encoding for Hypertext Transfer Protocol (HTTP) Header Field Parameters.                August    2010.(Status: PROPOSED STANDARD)
5989    A SIP Event Package for Subscribing to Changes to an HTTP Resource.                                                October   2010.(Status: PROPOSED STANDARD)
6155    Use of Device Identity in HTTP-Enabled Location Delivery (HELD).                                                   March     2011.(Updated by RFC6915) (Status: PROPOSED STANDARD)
6202    Known Issues and Best Practices for the Use of Long Polling and Streaming in Bidirectional HTTP.                   April     2011.(Status: INFORMATIONAL)
6249    Metalink/HTTP: Mirrors and Hashes.                                                                                 June      2011.(Status: PROPOSED STANDARD)
6265    HTTP State Management Mechanism.                                                                                   April     2011.(Obsoletes RFC2965) (Status: PROPOSED STANDARD)
6266    Use of the Content-Disposition Header Field in the Hypertext Transfer Protocol (HTTP).                             June      2011.(Updates RFC2616) (Status: PROPOSED STANDARD)
6546    Transport of Real-time Inter-network Defense (RID) Messages over HTTP/TLS.                                         April     2012.(Obsoletes RFC6046) (Status: PROPOSED STANDARD)
6585    Additional HTTP Status Codes.                                                                                      April     2012.(Updates RFC2616) (Status: PROPOSED STANDARD)
6712    Internet X.509 Public Key Infrastructure -- HTTP Transfer for the Certificate Management Protocol (CMP).           September 2012.(Updates RFC4210) (Status: PROPOSED STANDARD)
6753    A Location Dereference Protocol Using HTTP-Enabled Location Delivery (HELD).                                       October   2012.(Status: PROPOSED STANDARD)
6797    HTTP Strict Transport Security (HSTS).                                                                             November  2012.(Status: PROPOSED STANDARD)
6896    SCS: KoanLogic's Secure Cookie Sessions for HTTP.                                                                  March     2013.(Status: INFORMATIONAL)
6915    Flow Identity Extension for HTTP-Enabled Location Delivery (HELD).                                                 April     2013.(Updates RFC6155)     (Status: PROPOSED STANDARD)
6983    Models for HTTP-Adaptive-Streaming-Aware Content Distribution Network Interconnection (CDNI).                      July      2013.(Status: INFORMATIONAL)
7034    HTTP Header Field X-Frame-Options.                                                                                 October   2013.(Status: INFORMATIONAL)
7089    HTTP Framework for Time-Based Access to Resource States -- Memento.                                                December  2013.(Status: INFORMATIONAL)
7230    Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing.                                                June      2014.(Obsoletes RFC2145, RFC2616) (Updates RFC2817, RFC2818) (Status: PROPOSED STANDARD)
7231    Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content.                                                     June      2014.(Obsoletes RFC2616) (Updates RFC2817) (Status: PROPOSED STANDARD)
7232    Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests.                                                      June      2014.(Obsoletes RFC2616) (Status: PROPOSED STANDARD)
7233    Hypertext Transfer Protocol (HTTP/1.1): Range Requests.                                                            June      2014.(Obsoletes RFC2616) (Status: PROPOSED STANDARD)
7234    Hypertext Transfer Protocol (HTTP/1.1): Caching.                                                                   June      2014.(Obsoletes RFC2616) (Status: PROPOSED STANDARD)
7235    Hypertext Transfer Protocol (HTTP/1.1): Authentication.                                                            June      2014.(Obsoletes RFC2616, RFC2617) (Status: PROPOSED STANDARD)
7236    Initial Hypertext Transfer Protocol (HTTP) Authentication Scheme Registrations.                                    June      2014.(Status: INFORMATIONAL)
7237    Initial Hypertext Transfer Protocol (HTTP) Method Registrations.                                                   June      2014.(Status: INFORMATIONAL)
7239    Forwarded HTTP Extension.                                                                                          June      2014.(Status: PROPOSED STANDARD)
7240    Prefer Header for HTTP.                                                                                            June      2014.(Status: PROPOSED STANDARD)
7469    Public Key Pinning Extension for HTTP.                                                                             April     2015.(Status: PROPOSED STANDARD)
7472    Internet Printing Protocol (IPP) over HTTPS Transport Binding and the 'ipps' URI Scheme.                           March     2015.(Updates RFC2910, RFC2911) (Status: PROPOSED STANDARD)
7480    HTTP Usage in the Registration Data Access Protocol (RDAP).                                                        March     2015.(Status: PROPOSED STANDARD)
7486    HTTP Origin-Bound Authentication (HOBA).                                                                           March     2015.(Status: EXPERIMENTAL)
7540    Hypertext Transfer Protocol Version 2 (HTTP/2).                                                                    May       2015.(Status: PROPOSED STANDARD)
7541    HPACK: Header Compression for HTTP/2.                                                                              May       2015.(Status: PROPOSED STANDARD)
7615    HTTP Authentication-Info and Proxy-Authentication-Info Response Header Fields.                                     September 2015.(Obsoletes RFC2617) (Status: PROPOSED STANDARD)
7616    HTTP Digest Access Authentication.                                                                                 September 2015.(Obsoletes RFC2617) (Status: PROPOSED STANDARD)
7617    The 'Basic' HTTP Authentication Scheme.                                                                            September 2015.(Obsoletes RFC2617) (Status: PROPOSED STANDARD)
7639    The ALPN HTTP Header Field.                                                                                        August    2015.(Status: PROPOSED STANDARD)
7694    Hypertext Transfer Protocol (HTTP) Client-Initiated Content-Encoding.                                              November  2015.(Status: PROPOSED STANDARD)
7711    PKIX over Secure HTTP (POSH).                                                                                      November  2015.(Status: PROPOSED STANDARD)
7725    An HTTP Status Code to Report Legal Obstacles.                                                                     February  2016.(Status: PROPOSED STANDARD)
7804    Salted Challenge Response HTTP Authentication Mechanism.                                                           March     2016.(Status: EXPERIMENTAL)
7807    Problem Details for HTTP APIs.                                                                                     March     2016.(Status: PROPOSED STANDARD)
7838    HTTP Alternative Services.                                                                                         April     2016.(Status: PROPOSED STANDARD)
7840    A Routing Request Extension for the HTTP-Enabled Location Delivery (HELD) Protocol.                                May       2016.(Updates RFC5985, RFC6881) (Status: PROPOSED STANDARD)

______________________________________
COOKIES / LOCAL STORAGE / SESSION STORAGE


                                   Cookies              Local Storage      Session Storage
       ___________________________________________________________________________________

        Capacity                    4 KB                 10 MB              5 MB

        Browsers                    HTML4 / 5            HTML 5             HTML 5

        Accessible from             Any window           Any window         SAME TAB <-------- only

        Expires                     Manually set         Never              On TAB close <----

        Storage Location            Browser & server     Browser ONLY       Browser ONLY

        Sent with requests          YES                  NO                 NO



COOKIES:
           . ALL cookies of a domain are 1 single string
           . The string is a ';'-separated list of key=val  (ex  cookie1=val1; cookie2=val2; ....; cookieN=valN'
           . The cookies (that string) are sent for every REQUEST (-----> so if the size of the cookies is big every REQUEST can take longer)
                                                    ^^^^^
           . The cookie are set in the first place on the server and sent to the browser in the "Set-Cookie" header
           . The browser stores the cookie and will send them back with every request.
           . The cookies (that 1 string) is in JS:
                              "document.cookie"

                              A N Y H O W

                              that string is bit special:
                               - a READ (e.g. console.log(document.cookie)  or let s = document.cookie)
                                 gives 1 single string. I can split by ';' to have the array of cookies:

                                     document.cookie.split(';')

                               - a WRITE can accept 1 cookie at a time and it doesn't overwrite the previous value but KEEPS ADDING
                                 ex.
                                     document.cookie = "aaa=val1"   <--- this sets the 1st cookie "aaa"
                                     document.cookie = "bbb=val2"   <--- this doesn't overwrite "aaa", so actually console.log(document.cookie) will give "aaa=val1; bbb=val2"
                                     document.cookie = "ccc=val3"   <--- console.log(document.cookie) will give "aaa=val1; bbb=val2; ccc=val3"
           . when setting a cookie I can specify these attributes (which are the columns I see in the browser dev tools)
                - path= absolute path. current path by default.         by default '/' root, so if I'm interacting with A.com
                                                                        and the path is '/' then at every path
                                                                                     A.com/video
                                                                                     A.com/xx/yy
                                                                                     ..
                                                                        the cookie is sent
                                                                        If instead I specify a path  ex  /video
                                                                        then the cookie is sent only when I sent request to that path (or below /video/aa/bb/..)
                - domain=sub.example.com current domain by default.     If I set a domain (example.com)
                                                                        the cookie will be sent only when REQUESTING to that domain (and all its subdomains
                                                                        ex. sub1.example.com)
                                                                        but it will not be sent to other domains (ex. example.net)
                - max-age= seconds  ex 60*60*24*30  30 days             The cookie will expire after this time from now
                - expires= UTC date. end of current session by default  The cookie will expire at that time
                - secure=true                                           only sent if we are on HTTPS
                - same-site=Strict | Lax | None                         The cookie will not be sent (Strict) to a different domain.
                                                                        Ex. If I was interacting with A.com (remmber the browser will sent the cookies
                                                                            at every REQUEST to A.com) and there is a redirection to B.com (other site)
                                                                            then the cookie will not be sent

                                                                        SameSite=None: This value allows the cookie to be sent in cross-origin requests,
                                                                                       such as when loading resources from a different domain in a web page.
                                                                                       However, it requires that the cookie also be marked as Secure, (HTTPS only).
                                                                                       This is typically used for cookies that are needed for authentication or
                                                                                       session management across multiple sites.

                                                                        SameSite=Strict: This value prevents the cookie from being sent in cross-origin requests,
                                                                                       ensuring that it is only sent when the request originates from the same site
                                                                                       as the one that set the cookie.

                                                                        SameSite=Lax: This value is similar to Strict, but it allows some exceptions for certain types of
                                                                                      cross-origin requests, such as when navigating to a link from an external site.
                                                                                      It provides a balance between security and usability.
                ex of setting
                document.cookie = "aaa}=val1;path=/;max-age=3600;"
                so when I write the cookie in document.cookie I ';'-separate the desired attributes

                                var expirationDate = new Date();
                                expirationDate.setDate(expirationDate.getDate() + 7);
                                var expiresUTCString = expirationDate.toUTCString();
                                document.cookie = "aaa=val; expires=" + expiresUTCString;

                NOTE: a cookie is not just the key=value but it's actually like a JSON, an object with the above attributes
                      so these 2 settings:
                         document.cookie = "xxx=val5;path=/"
                         document.cookie = "xxx=val5;path=/Users"

                      create actually 2 distinct cookie both named "xxx" and with value "val5" but with
                      a differnt path, so they are distinct

           . DELETE a cookie  (I set its "expires" attribute in the past. The browser doesn't send expired cookies and it will remove them when the session expires)
             ex
                        var pastExpirationDate = new Date(0).toUTCString();
                        document.cookie = "username=; expires=" + pastExpirationDate;

                      NOTE:
                         as I can have cookies with the same name, to delete a cookie exactly specify
                         its attributes (ex. path)



______________________________________
Revese HTTP Proxy  & Load Balancer    (Pound a free open source, not using hard disk)


              - a reverse-proxy: it passes requests from client browsers to one or more back-end servers.
              - a load balancer: it will distribute the requests from the client browsers
                                 among several back-end servers, while keeping session information.
              - an SSL wrapper: Pound will decrypt HTTPS requests from client browsers
                                and pass them as plain HTTP to the back-end servers.
              - an HTTP/HTTPS sanitizer: Pound will verify requests for correctness and accept only well-formed ones.
              - a fail over-server: should a back-end server fail, Pound will take note of the fact and
                                    stop passing requests to it until it recovers.
              - a request redirector: requests may be distributed among servers according to the requested URL.

                WHAT POUND IS NOT:

              - Pound is not a Web server: by itself, Pound serves no content - it contacts the back-end server(s) for that purpose.
              - Pound is not a Web accelerator: no caching is done - every request is passed "as is" to a back-end server.

                     Pound passes ALL headers as they arrive from the client browser to the back-end server(s).
                     In 2 case it can create a missing one:
                           1  Pound may add information about the SSL client certificate (a X-Forwarded-For header).
                              The general format is:
                                                    X-Forwarded-for: client-IP-address

                              The back-end server(s) may use this extra information in order to create their log-files
                              with the real client address (otherwise all requests will appear to originate from Pound itself,
                              which is rather useless).
                           2  HTTPS CERTIFICATES  (see some sections below)


                    Let's assume that you have internal server 192.168.0.10 that is supposed to serve
                    the needs of virtual host www.server0.com and 192.168.0.11 that serves www.server1.com.
                    You want Pound to listen on address 1.2.3.4 and separate the requests to each host.
                    The config file would look something like this:

                                    ListenHTTP
                                        Address 1.2.3.4
                                        Port    80

                                        Service
                                            HeadRequire "Host: .*www.server0.com.*"

                                            BackEnd
                                                Address 192.168.0.10
                                                Port    80
                                            End
                                        End

                                        Service
                                            HeadRequire "Host: .*www.server1.com.*"

                                            BackEnd
                                                Address 192.168.0.11
                                                Port    80
                                            End
                                        End
                                    End

Sessions and Stateless solution with Pound
              Pound has the ability to keep track of sessions between a client browser and a back-end server.
              6 possible ways of detecting a session have been implemented:

                1 by client address: Pound directs all requests from the same client IP to the same back-end server.

                          Session
                              Type  IP
                              TTL  300   <-- indicates what period of inactivity is allowed before the session is discarded.
                          End

                2 by Basic Authentication: Pound directs all requests from the same user
                                          (as identified in the Basic Authentication header) to the same back-end server.
                          Session
                              Type    Basic
                              TTL     300
                          End

                3 by URL parameter: quite often session information is passed through URL parameters
                                    (the browser is pointed to something like http://xxx?id=123).

                          Session
                              Type    URL
                              ID      "id"  <-- and the sessions will be tracked based on the value of the "id" parameter.
                              TTL     300
                          End

                4 by cookie value: applications that use this method pass a certain cookie BACK AND FORTH.

                          Session
                              Type    Cookie
                              ID      "sess" <-- the sessions will be tracked by the value of the "sess" cookie.
                              TTL     300
                          End

                5 by HTTP parameter value: applications that use this method pass a parameter (http://x.y/z;parameter) BACK AND FORTH.

                          Session
                              Type    PARM  <-- the sessions will be tracked by the value of the parameter
                              TTL     300
                          End

                6 by header value: applications that use this method pass a certain header BACK AND FORTH.

                          Session
                              Type    Header
                              ID      "X-sess"  <-- the sessions will be tracked by the value of the "X-sess" header.
                              TTL     300
                          End



                 Please note the following restrictions on session tracking:

                   - session tracking is always associated with a certain Service.
                     Thus each group may have other methods and parameters.
                     If your application has more methods for sessions you must define a separate Service for each method.

                   - there is no default session: if you have not defined any sessions no session tracking will be done.

                HTTPS CERTIFICATES

                If a client browser connects via HTTPS and if it presents a certificate and if HTTPSHeaders is set,
                Pound will obtain the certificate data and add the following HTTP headers to the request it makes to the server:

                    X-SSL-Subject: information about the certificate owner
                    X-SSL-Issuer: information about the certificate issuer (CA)
                    X-SSL-notBefore: begin validity date for the certificate
                    X-SSL-notAfter: end validity date for the certificate
                    X-SSL-serial: certificate serial number (in decimal)
                    X-SSL-cipher: the cipher currently in use
                    X-SSL-certificate: the full client certificate (multi-line)

                It is the application's responsibility to actually use these headers - Pound just passes this information
                without checking it in any way (except for signature and encryption correctness).

                Please note that this mechanism allows forgeries: a client may (maliciously) send these headers to Pound
                in order to masquerade as an SSL client with a specific certificate.
                If this is a problem for your application make sure to deny these requests. Add within the UrlGroup(s):

                        HeadDeny X-SSL-Subject ".*"
                        HeadDeny X-SSL-Issuer ".*"
                        HeadDeny X-SSL-notBefore ".*"
                        HeadDeny X-SSL-notAfter ".*"
                        HeadDeny X-SSL-serial ".*"
                        HeadDeny X-SSL-cipher ".*"


