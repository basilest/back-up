
    - observability of our Live deployments
    - to implement this across our services



     DEMO:
        - data flow between web front end and through a Node.js microservice through to backend Java microservices,
        - typical metrics, traces and logs
        - A dashboard visualising traces, metrics and logs 
            - Can we integrate into an AppDynamics backend and use AppDynamics as a Visualiser? 
            - AppDynamics vs Dashboarding
            - What level of tracing to use in Live
            - What Metrics
            - What logs
        - expected traffic generated by the telemetry

     VERSION 1:
        https://companieshouse.atlassian.net/wiki/spaces/~712020ce9c40ac1e0644f3a4c3b28c20dde4e4/pages/5218369545/OTEL+Exploration
        - Eric preventing telemetry data end to end

================================================
OPEN TELEMETRY  (OTel)
------------------------


            open-source observability framework for

                generating
                collecting
                exporting

            telemetry data (traces, metrics, and logs)

            Traces  – Track requests across multiple services to understand the flow of execution.
            Metrics – Collect numerical data such as latency, request count, and system health.
            Logs    – Capture structured or unstructured logs for troubleshooting and analysis.



Vendor-neutral – Works with multiple backends (Prometheus, Zipkin, etc.).
Standardized – Unified approach for tracing, logging, and metrics.
Flexible – Supports multiple languages and frameworks.
Cloud-native – Designed for modern, distributed systems.



================================================
PERL
------------------------

OpenTelemetry does not natively support Perl.
While OpenTelemetry provides SDKs for multiple languages, including Python, Java, Go, .NET, JavaScript, Ruby, and PHP, there is no official OpenTelemetry SDK for Perl.

Alternatives for Perl Users

    Use OpenTelemetry’s OTLP Protocol
        Instead of a native Perl SDK, you can manually instrument your Perl application and send telemetry data (traces, logs, metrics) using the OTLP (OpenTelemetry Protocol) via gRPC or HTTP.
        You can use a Perl HTTP client (like LWP::UserAgent) to send data to an OpenTelemetry collector.

    Leverage Existing Perl Observability Libraries
        Jaeger or Zipkin Tracing: Perl has libraries like Net::OpenTracing::Jaeger that can send tracing data to Jaeger, which is compatible with OpenTelemetry.
        Logging and Metrics: Use logging frameworks like Log::Log4perl and forward logs to OpenTelemetry-supported platforms.

    Wrap a Different OpenTelemetry SDK
        If you have microservices in multiple languages, you can set up OpenTelemetry in another supported language (e.g., Python, Go) and send relevant data from Perl using APIs or message queues.

------------------------ implementing OTLP Protocol

      OTLP/HTTP (OpenTelemetry Protocol over HTTP)
      defines the expected structure of payloads for traces, metrics, and logs, ensuring consistency across different clients and backends.


     .------------------------------------ T R A C E -------------------------------------------------------------------------------- M E T R I C ------------------------------------------------------------------- L O G ---------------------------------
     | ✅ Endpoint: POST http://localhost:4318/v1/traces                                             | ✅ Endpoint: POST http://localhost:4318/v1/metrics                 | ✅ Endpoint: POST http://localhost:4318/v1/logs
     | 📌 Required Fields: traceId, spanId, name, startTimeUnixNano, endTimeUnixNano                 | 📌 Required Fields: name, unit, gauge/sum/histogram, timeUnixNano  | 📌 Required Fields: timeUnixNano, severityText, body
     |                                                                                               |                                                                    |
     | {                                                                                             | {                                                                  | {
     |   "resourceSpans": [{                                                                         |   "resourceMetrics": [{                                            |   "resourceLogs": [{
     |     "resource": { "attributes": [] },                                                         |     "resource": { "attributes": [] },                              |     "resource": { "attributes": [] },
     |     "scopeSpans": [{                                                                          |     "scopeMetrics": [{                                             |     "scopeLogs": [{
     |       "spans": [{                                                                             |       "metrics": [{                                                |       "logRecords": [{
     |         "traceId": "aabbccddeeff00112233445566778899",                                        |         "name": "cpu_usage",                                       |         "timeUnixNano": 1710000000000000000,
     |         "spanId": "0011223344556677",                                                         |         "description": "CPU Usage Percentage",                     |         "severityText": "ERROR",
     |         "name": "example-span",                                                               |         "unit": "percent",                                         |         "body": { "stringValue": "Something went wrong!" },
     |         "kind": 1,                                                                            |         "gauge": {                                                 |         "attributes": [{ "key": "service.name", "value": { "stringValue": "perl-app" } }]
     |         "startTimeUnixNano": 1710000000000000000,                                             |           "dataPoints": [{                                         |       }]
     |         "endTimeUnixNano": 1710000001000000000,                                               |             "asDouble": 42.5,                                      |     }]
     |         "attributes": [{ "key": "http.method", "value": { "stringValue": "GET" } }]           |             "timeUnixNano": 1710000000000000000                    |   }]
     |       }]                                                                                      |           }]                                                       | }
     |     }]                                                                                        |         }                                                          |
     |   }]                                                                                          |       }]                                                           |
     | }                                                                                             |     }]                                                             |
     |                                                                                               |   }]                                                               |
     |                                                                                               | }                                                                  |
     |                                                                                               |                                                                    |
     | Understanding spanId in Context                                                               |                                                                    |
     |                                                                                               |                                                                    |
     |     A Trace (traceId) represents a complete request                                           |                                                                    |
     |         Example: A user makes a request to your API.                                          |                                                                    |
     |         Every trace has a unique traceId that groups all related spans.                       |                                                                    |
     |                                                                                               |                                                                    |
     |     A Span (spanId) represents one operation in the trace                                     |                                                                    |
     |         Example: A request goes through multiple services (e.g., API Gateway → Database).     |                                                                    |
     |         Each operation (API call, DB query) is a span with a unique spanId.                   |                                                                    |
     |         Spans belong to a trace and are linked together.                                      |                                                                    |
     |                                                                                               |                                                                    |
     | Example of traceId and spanId Usage                                                           |                                                                    |
     |                                                                                               |                                                                    |
     | Imagine an e-commerce checkout request going through multiple services:                       |                                                                    |
     |                                                                                               |                                                                    |
     |             Trace Structure:                                                                  |                                                                    |
     |                                                                                               |                                                                    |
     |             ------------------------------------------------------------                      |                                                                    |
     |             Trace ID    Span ID   Parent Span ID  Operation                                   |                                                                    |
     |             (traceId)   (spanId)  (parentSpanId)                                              |                                                                    |
     |             ------------------------------------------------------------                      |                                                                    |
     |               abc123      spanA       null         User clicks "Buy Now"                      |                                                                    |
     |               abc123      spanB       spanA        API receives request                       |                                                                    |
     |               abc123      spanC       spanB        Database query                             |                                                                    |
     |                                                                                               |                                                                    |
     | Key Points:                                                                                   |                                                                    |
     |                                                                                               |                                                                    |
     |     traceId (abc123) is shared by all spans in the request.                                   |                                                                    |
     |     Each spanId is unique within the trace.                                                   |                                                                    |
     |     Spans are linked via parentSpanId (except the first span, which has null).                |                                                                    |
     |                                                                                               |                                                                    |
     | Why is spanId Important?                                                                      |                                                                    |
     |                                                                                               |                                                                    |
     | ✔ Tracks individual operations → Each spanId represents a distinct step.                      |                                                                    |
     | ✔ Establishes relationships → Child spans link to parents, creating a call hierarchy.         |                                                                    |
     | ✔ Enables debugging & latency analysis → Helps find slow operations in a distributed system.  |                                                                    |
     '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


     M E T R I C  (gauge/sum/histogram)
     .------------------------------------ G A U G E -----------------------------|-------------------------------------------------- S U M  ----------------|--------------------------------------- H I S T O G R A M --------------------
     |                                                                            |                                                                          |
     |  {                                                                         |    {                                                                     |     {
     |    "resourceMetrics": [{                                                   |      "resourceMetrics": [{                                               |       "resourceMetrics": [{
     |      "resource": {                                                         |        "resource": {                                                     |         "resource": {
     |        "attributes": [{                                                    |          "attributes": [{                                                |           "attributes": [{
     |          "key": "service.name",                                            |            "key": "service.name",                                        |             "key": "service.name",
     |          "value": { "stringValue": "perl-metrics-service" }                |            "value": { "stringValue": "perl-metrics-service" }            |             "value": { "stringValue": "perl-metrics-service" }
     |        }]                                                                  |          }]                                                              |           }]
     |      },                                                                    |        },                                                                |         },
     |      "scopeMetrics": [{                                                    |        "scopeMetrics": [{                                                |         "scopeMetrics": [{
     |        "metrics": [{                                                       |          "metrics": [{                                                   |           "metrics": [{
     |          "name": "cpu_usage",                                              |            "name": "http_requests_total",                                |             "name": "request_duration",
     |          "description": "CPU usage percentage",                            |            "description": "Total number of HTTP requests",               |             "description": "Request duration in seconds",
     |          "unit": "%",                                                      |            "unit": "1",                                                  |             "unit": "s",
     |          "gauge": {     --------------------------------------------------------------  "sum": {  ----------------------------------------------------------------  "histogram": {
     |            "dataPoints": [{                                                |              "dataPoints": [{                                            |               "dataPoints": [{
     |              "timeUnixNano": "1710000000000000000",                        |                "timeUnixNano": "1710000000000000000",                    |                 "timeUnixNano": "1710000000000000000",
     |              "asDouble": 75.3,  # Gauge value                              |                "startTimeUnixNano": "1710000000000000000",               |                 "startTimeUnixNano": "1710000000000000000",
     |              "attributes": [{                                              |                "asInt": 345,  # Cumulative value                         |                 "count": 100,  # Total number of recorded values
     |                "key": "cpu",                                               |                "attributes": [{                                          |                 "sum": 450.5,  # Sum of all values
     |                "value": { "stringValue": "core1" }                         |                  "key": "http.method",                                   |                 "bucketCounts": [30, 40, 20, 10],  # Distribution across buckets
     |              }]                                                            |                  "value": { "stringValue": "GET" }                       |                 "explicitBounds": [0.1, 0.5, 1.0],  # Upper bounds for each bucket
     |            }]                                                              |                }]                                                        |                 "attributes": [{
     |          }                                                                 |              }],                                                         |                   "key": "http.route",
     |        }]                                                                  |              "isMonotonic": true,    # True if value only increases      |                   "value": { "stringValue": "/api" }
     |      }]                                                                    |              "aggregationTemporality": 2  # 1 = Delta, 2 = Cumulative    |                 }]
     |    }]                                                                      |            }                                                             |               }],
     |  }                                                                         |          }]                                                              |               "aggregationTemporality": 2  # 1 = Delta, 2 = Cumulative
     |                                                                            |        }]                                                                |             }
     |                                                                            |      }]                                                                  |           }]
     |                                                                            |    }                                                                     |         }]
     |                                                                            |                                                                          |       }]
     |                                                                            |                                                                          |     }
     |  Key Fields:                                                               |   Key Fields:                                                            |     Key Fields:
     |                                                                            |                                                                          |
     |      gauge: Contains the list of dataPoints.                               |       sum: Contains the list of dataPoints.                              |         histogram: Contains the list of dataPoints.
     |      timeUnixNano: Timestamp in nanoseconds.                               |       timeUnixNano: Timestamp in nanoseconds.                            |         count: The number of samples recorded.
     |      asDouble: The gauge value (can also be asInt for integer values).     |       startTimeUnixNano: Start timestamp for delta metrics.              |         sum: The total sum of all samples.
     |      attributes: Key-value pairs for additional context.                   |       asInt or asDouble: The sum value.                                  |         bucketCounts: An array representing the number of values in each bucket.
     |                                                                            |       isMonotonic:                                                       |         explicitBounds: The upper boundaries of each bucket.
     |                                                                            |           true: Value only increases.                                    |         aggregationTemporality:
     |                                                                            |           false: Value can increase or decrease.                         |             1: Delta (change since last report).
     |                                                                            |       aggregationTemporality:                                            |             2: Cumulative (total value over time).
     |                                                                            |           1: Delta (change since last report).                           |
     |                                                                            |           2: Cumulative (total value over time).                         |
     |                                                                            |                                                                          |
     |                                                                            |                                                                          |
     .-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


     1.3   docker run --rm -p 4317:4317 -p 4318:4318 otel/opentelemetry-collector-contrib               launch an OpenTelemetry Collector running locally (localhost:4318).
           docker run --rm -p 4318:4318 -e LOG_LEVEL=debug otel/opentelemetry-collector-contrib         Once the collector is running I can send over payloads (ex with curl)
                                        ^^^^^^^^^^^^^^^^^^                                              If they do not match the OTLP (ex. missing fields) then the collector will log the errors:
                                           Turn on the debug in the logs
                                                                                                        Example of error in payload:

                                                                                                              - curl -v -X POST "http://localhost:4318/v1/traces" \
                                                                                                                                 -H "Content-Type: application/json" \
                                                                                                                                 -d @your_trace_payload.json                 ----> HTTP 400 Bad Request with an error message.

                                                                                                              - "Invalid JSON: missing required field 'traceId'"             in the logs if "-e LOG_LEVEL=debug" is on,


                                                                                                        Note on ports 4317 / 4318
                                                                                                            I run the OTL collector listening on 2 ports gRPC & HTTP

                                                                                                            4317 → gRPC  (binary protocol)    (better performance (lower latency, multiplexing) used by SDKs like Go, Java)   Perl doesn’t have strong gRPC support
                                                                                                            4318 → HTTP  (JSON-based)         (simpler, used by cURL, Perl, and debugging tools)


                                                                                                        ---------------- WHAT A COLLECTOR DOES ----------------------------------------------------------------------------------
                                                                                                        The OpenTelemetry Collector is a middleware that receives, processes, and exports telemetry data (traces, logs, metrics).
                                                                                                        It does not store data—instead, it forwards it to a backend like Jaeger, Prometheus, Grafana, or Elastic for visualization.
                                                                                                        📌 Collector’s Main Functions

                                                                                                            Receives Data → Accepts traces, metrics, and logs via OTLP (gRPC or HTTP).
                                                                                                            Processes Data → Optionally modifies or filters telemetry data before forwarding.
                                                                                                            Exports Data → Sends data to dashboards or storage backends.
                                                                                                        -------------------------------------------------------------------------------------------------------------------------


     2.3   cpan install LWP::UserAgent JSON                                                             Just the HTTP agent

     3.3   Implementation:
     .------------------------------------ T R A C E ---------------------------------------------------------------------------- M E T R I C ------------------------------------------------------------------- L O G ---------------------------------
     | use strict;                                                                                      | use strict;                                                           | use strict;
     | use warnings;                                                                                    | use warnings;                                                         | use warnings;
     | use LWP::UserAgent;                                                                              | use LWP::UserAgent;                                                   | use LWP::UserAgent;
     | use JSON;                                                                                        | use JSON;                                                             | use JSON;
     |                                                                                                  |                                                                       |
     | # OpenTelemetry Collector OTLP HTTP endpoint                                                     | # OTLP Metrics endpoint                                               | # OTLP Logs endpoint
     | my $otlp_endpoint = "http://localhost:4318/v1/traces";  ---------------------------------------- | my $otlp_endpoint = "http://localhost:4318/v1/metrics";  ------------ | my $otlp_endpoint = "http://localhost:4318/v1/logs";
     |                                              ^^^^^^^                                             |                                               ^^^^^^^                 |                                               ^^^^
     | # Create a basic trace payload in OTLP format (JSON)                                             | # Get current timestamp in nanoseconds                                | # Get current timestamp in nanoseconds
     | my $trace_id = "aabbccddeeff00112233445566778899";  # Example Trace ID (16-byte hex)             | my $timestamp_ns = int(time * 1_000_000_000);                         | my $timestamp_ns = int(time * 1_000_000_000);
     | my $span_id  = "0011223344556677";                  # Example Span ID (8-byte hex)               |                                                                       |
     | my $payload = {                                                                                  | # Create a basic metric payload                                       | # Create a basic log payload
     |     resourceSpans => [{                                                                          | my $payload = {                                                       | my $payload = {
     |         resource => { attributes => [] },  # No special attributes                               |     resourceMetrics => [{                                             |     resourceLogs => [{
     |         scopeSpans => [{                                                                         |         resource => { attributes => [] },                             |         resource => { attributes => [] },
     |             spans => [{                                                                          |         scopeMetrics => [{                                            |         scopeLogs => [{
     |                 traceId    => $trace_id,                                                         |             metrics => [{                                             |             logRecords => [{
     |                 spanId     => $span_id,                                                          |                 name => "cpu_usage",                                  |                 timeUnixNano => $timestamp_ns,
     |                 name       => "example-span",                                                    |                 description => "CPU Usage Percentage",                |                 severityText => "ERROR",
     |                 kind       => 1,  # 1 = SPAN_KIND_INTERNAL                                       |                 unit => "percent",                                    |                 body => { stringValue => "Something went wrong in the application!" },
     |                 startTimeUnixNano => int(time * 1_000_000_000),  # Convert to nanoseconds        |                 gauge => {                                            |                 attributes => [{
     |                 endTimeUnixNano   => int((time + 1) * 1_000_000_000),                            |                     dataPoints => [{                                  |                     key => "service.name",
     |                 attributes => [{ key => "http.method", value => { stringValue => "GET" } }]      |                         asDouble => 42.5,  # Example CPU usage        |                     value => { stringValue => "perl-app" }
     |             }]                                                                                   |                         timeUnixNano => $timestamp_ns                 |                 }]
     |         }]                                                                                       |                     }]                                                |             }]
     |     }]                                                                                           |                 }                                                     |         }]
     | };                                                                                               |             }]                                                        |     }]
     |                                                                                                  |         }]                                                            | };
     |                                                                                                  |     }]                                                                |
     |                                                                                                  | };                                                                    |
     |                                                                                                  |                                                                       |
     | # Convert to JSON                                                                                | # Convert to JSON                                                     | # Convert to JSON
     | my $json_payload = encode_json($payload);                                                        | my $json_payload = encode_json($payload);                             | my $json_payload = encode_json($payload);
     |                                                                                                  |                                                                       |
     | # Create an HTTP client                                                                          | # Send the request                                                    | # Send the request
     | my $ua = LWP::UserAgent->new;                                                                    | my $ua = LWP::UserAgent->new;                                         | my $ua = LWP::UserAgent->new;
     | my $req = HTTP::Request->new(POST => $otlp_endpoint);                                            | my $req = HTTP::Request->new(POST => $otlp_endpoint);                 | my $req = HTTP::Request->new(POST => $otlp_endpoint);
     | $req->header('Content-Type' => 'application/json');                                              | $req->header('Content-Type' => 'application/json');                   | $req->header('Content-Type' => 'application/json');
     | $req->content($json_payload);                                                                    | $req->content($json_payload);                                         | $req->content($json_payload);
     |                                                                                                  |                                                                       |
     | # Send the request                                                                               |                                                                       |
     | my $response = $ua->request($req);                                                               | my $response = $ua->request($req);                                    | my $response = $ua->request($req);
     |                                                                                                  |                                                                       |
     | # Print response                                                                                 | # Print response                                                      | # Print response
     | if ($response->is_success) {                                                                     | if ($response->is_success) {                                          | if ($response->is_success) {
     |     print "Trace sent successfully!\n";                                                          |     print "Metric sent successfully!\n";                              |     print "Log sent successfully!\n";
     | } else {                                                                                         | } else {                                                              | } else {
     |     print "Failed to send trace: " . $response->status_line . "\n";                              |     print "Failed to send metric: " . $response->status_line . "\n";  |     print "Failed to send log: " . $response->status_line . "\n";
     | }                                                                                                | }                                                                     | }
     '---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



====================================================
AppDynamics or Dashboarding Tools
----------------------------------

✅ AppDynamics supports OpenTelemetry, allowing you to send traces, metrics, and logs to its backend.
🔹 How Does It Work?

    AppDynamics agents do not natively use OpenTelemetry but can ingest OTel traces via the OTLP exporter.
    You need to configure the OpenTelemetry Collector to send data to AppDynamics Analytics.

🔧 Setup Steps

 1. Deploy the OpenTelemetry Collector
 2. Configure an OTLP Exporter to send data to AppDynamics:

   .--------------------------------------------------------------
   |exporters:
   |  otlphttp:
   |    endpoint: "https://your-appdynamics-endpoint.com/v1/trace"
   '--------------------------------------------------------------

 3. View Data in AppDynamics Dashboards (Traces, Metrics, Logs).




-----------------------------------
Other Dashboarding Tools for OpenTelemetry

Many other dashboarding tools can natively visualize OpenTelemetry data.

    Tool                   Traces   Metrics   Logs    How to Use with OTel?
    ---------------------------------------------------------------------------
    Grafana                ✅ Yes   ✅ Yes   ✅ Yes   Use OTLP, Prometheus, or Loki
    Jaeger                 ✅ Yes   ❌ No    ❌ No    Best for distributed tracing
    Prometheus             ❌ No    ✅ Yes   ❌ No    Best for metrics collection
    Kibana (Elastic Stack) ✅ Yes   ✅ Yes   ✅ Yes   Use Elasticsearch for logs/metrics
    Splunk                 ✅ Yes   ✅ Yes   ✅ Yes   OpenTelemetry agent supports Splunk


====================================================


================================================
MICROSERVICE ARCHITECTURE   (Java, Go, Node, Perl)  Kafka , Mongo, Oracle
------------------------
To achieve full observability across your microservices architecture,
you should implement OpenTelemetry (OTel)
               IN EACH SERVICE.
This ensures that traces, metrics, and logs are correlated across your system,
allowing you to monitor API calls, Kafka events, and database interactions seamlessly.

   - For Java, Go, and Node.js, you can use OpenTelemetry SDKs with auto-instrumentation to reduce coding effort.
   - For Perl, since there is no official OpenTelemetry SDK, you will need to manually send OTLP/HTTP traces.

                ----- JAVA
                    Use auto-instrumentation:
                        java -javaagent:opentelemetry-javaagent.jar \
                             -Dotel.exporter.otlp.endpoint=http://localhost:4318 \
                             -jar your-service.jar

                    manual tracing:
                        Span span = tracer.spanBuilder("my-operation").startSpan();
                        try {
                            // Your logic here
                        } finally {
                            span.end();
                        }
                ----- GO
                    Install OpenTelemetry Go SDK:

                        go get go.opentelemetry.io/otel

                    Create a trace:

                        ctx, span := tracer.Start(ctx, "my-operation")
                        defer span.End()
                ----- NODE

                    Install OpenTelemetry:

                        npm install @opentelemetry/sdk-trace-node

                    Initialize tracing:

                        const { trace } = require("@opentelemetry/api");
                        const tracer = trace.getTracer("my-service");

                        const span = tracer.startSpan("my-operation");
                        span.end();



-------------------------------- How JAVA Auto-Instrumentation Works

The Java auto-instrumentation agent works without modifying a single line of code.
This is possible because Java agents can intercept and modify bytecode at runtime.

When you run your application with:

java -javaagent:opentelemetry-javaagent.jar \
     -Dotel.exporter.otlp.endpoint=http://localhost:4318 \
     -jar your-service.jar

the OpenTelemetry Java Agent does the following:

    Attaches to the JVM as a Java Agent
        Java supports agent-based instrumentation (-javaagent).
        The agent modifies classes at runtime to inject OpenTelemetry logic.

    Uses Bytecode Manipulation (via ByteBuddy & ASM)
        ByteBuddy dynamically modifies method calls.
        ASM rewrites bytecode to insert tracing/logging without modifying source code.

    Hooks into Popular Frameworks Automatically
        It detects commonly used libraries like:
            Spring Boot, Micronaut, Quarkus
            JAX-RS, Apache HttpClient
            JDBC (MySQL, PostgreSQL, Oracle)
            Kafka, RabbitMQ
        Injects tracing logic before and after method execution.

    Captures and Exports Telemetry Data
        It automatically creates spans for:
            Incoming and outgoing HTTP requests
            Database queries
            Kafka message production & consumption
        Exports data to OTLP endpoint (http://localhost:4318).

--------------------- EXAMPLE

Imagine you have this Spring Boot REST API:

@RestController
@RequestMapping("/api")
public class MyController {
    @GetMapping("/hello")
    public String sayHello() {
        return "Hello, World!";
    }
}




You didn’t add any OpenTelemetry code, yet auto-instrumentation still traces the request!
What Actually Happens?

    The OTel agent intercepts @GetMapping("/hello").
    It creates a trace span before calling sayHello().
    It records latency, errors, and metadata.
    It propagates the trace context for distributed tracing.
    The data is sent to the OpenTelemetry Collector.

--------------------------------------------------------------------------------
-------------------------------- OpenTelemetry’s Overhead & Traffic Impact

Adding OpenTelemetry increases traffic by generating additional traces, metrics, and logs that need to be transmitted to your observability backend.


The additional network traffic depends on:

    Number of requests per second (RPS) your services handle.
    Sampling rate (percentage of traces/logs captured).
    Size of trace spans, logs, and metrics (more attributes = bigger payloads).
    How frequently metrics are sent (default: every 10s).

💡 Estimating Trace Data Volume

Each trace span is typically 500B - 5KB depending on:

    Number of attributes (e.g., HTTP headers, database queries).
    Number of events per span.
    Span context propagation across services.

🔢 Example Calculation

    RPS (Requests per second): 1,000
    Spans per request: 5 (e.g., HTTP request → DB call → Kafka → External API)
    Span size: 1 KB

➡️ Traffic per second: 1,000 RPS × 5 spans × 1 KB = 5 MB/s
➡️ Per minute: 5 MB × 60 = 300 MB/min
➡️ Per hour: 300 MB × 60 = 18 GB/hour

🔹 With sampling (10%), traffic reduces to 1.8 GB/hour.

================================= Service ---> Collector traffic

   To reduce the traffic from the service to the collector I could
      - decrease the rate at which metrics/log/traces are sent
      - decrease the size of their payload
      - batch them

   The "batch" option is a good one.
   Here a Perl solution to group 30 spans before sending them over:
            | use JSON;
            | use HTTP::Tiny;
            |
            | my @trace_batch = ();
            |
            | sub send_traces {
            |     my $ua = HTTP::Tiny->new;
            |     my $payload = encode_json({ resourceSpans => \@trace_batch });
            |     $ua->post('http://localhost:4318/v1/traces', {
            |         headers => { 'Content-Type' => 'application/json' },
            |         content => $payload
            |     });
            |     @trace_batch = ();  # Clear batch after sending
            | }
            |
            | # Example span creation
            | push @trace_batch, {
            |     traceId => "abc123abc123abc123abc123abc123ab",
            |     spanId => "span1234",
            |     name => "my-operation",
            |     startTimeUnixNano => 1710000000000000000,
            |     endTimeUnixNano => 1710000001000000000
            | };
            |
            | # Only send every 30 spans (batching)
            | if (scalar(@trace_batch) >= 30) {
            |     send_traces();
            | }









































































