                                              |
 1    Echoing Messages                        |:echo   "aaa"         writes text wirhour remembering it
                                              |:echom  "aaa"         echoes & stores-message (is the short form of :echomsg)
                                              |:messages             dumps any kind of previous message (i.e. all vim errors) 
                                              |                      (called message-history) included ALL :echom
                                              |                        
 2    Setting Options                         |           boolean options (on/off)   
                                              |:set nu   :set nonu
                                              |:set nu!              toggle onto the opposite value from the current
                                              |:set nu?              dump the current value
                                              |                      
                                              |           options with values
                                              |:set numberwidth=10     (or using let and & :  let &numberwidth=10
                                              |                         this syntax allows this: let &numberwidth = &numberwidth + 3)
                                              |:set numberwidth?     dump the current value
                                              |                      
                                              |           more options at the same time (to save typing)
                                              |:set nu numberwidth=6
                                              |
 3    Basic Mapping                           |                      :map 1 cmd   map the key 1 to command cmd
                                              |:map - viw            ex map the '-' to highlight word under cursor
                                              |:map <space> ...      special char (here space-bar) special_name inside '<' '>'
                                              |:map <c-d>   ...      special char (here Ctrl-d)
                                              |
 4    Modal Mapping                           |           echo mode can be mapped (normal, visual, insert)
                                              |:nmap \ dd            (when in normal mode) map \ to delete line 
                                              |:vmap \ U             (when in visual mode) map \ to Uppercase 
                                              |:imap <c-d> dd        not what expected (it writes 2 d (when in insert mode)
                                              |:imap <c-d> <esc>ddi  <-- ok
                                              |
                                              |:nunmap ...           to unmap (from normal mode) (ex nunmap -    nunmap \)
                                              |
 5    Strict Mapping                          |           consider following side effects:
                                              |                    1)           :nmap - dd
                                              |                                 :nmap \ -     <-- I must remember the chain of mappings
                                              |                                                   (here \ will delete the line)
                                              |                    2)           :nmap dd O<esc>jddk
                                              |                                       ^         ^
                                              |                                       it's recursive the second dd it's itself
                                              |                                       so that produces an endless loop
                                              |:*noremap  (the 'nore' versions are for 'no-recursive') (nnoremap vnoremap inoremap)
                                              |            and must be ALWAYS used instead of the normal ones
                                              |                                 
 6    Leaders                                 |           In the above examples we used 1 key, but it can be any sequence
                                              |           ex  :nnoremap -d dd       :nnoremap -c dd0
                                              |           So when I first press a '-', vim still waits for what's next (d or c?)
                                              |           So with only 1 key (here '-') I can then define more other mappings
                                              |           That 1 key can be considered a 'prefix' and vim allows a dedicated syntax:
                                              |:let mapleader = "-"
                                              |:nnoremap <leader>d dd     <--- I can then use '<' leader '>' to define the others
                                              |                                The advantage is I can change in 1 only place 
                                              |                                and all the mappings are portable to other .vimrc with other prefixes
                                              |:let maplocalleader = "\\"      it's like mapleader but has usually minor scope
                                              |                                only in some file types (used in plugin to not
                                              |                                clash with global mappings)
                                              |                                nb. \\ is the \ (1 key) but must be escaped
                                              |
 7    Editing Your Vimrc                      |:nnoremap <leader>ev :split  $MYVIMRC<cr>      to open quickly your ~/.vimrc
                                              |:nnoremap <leader>sv :source $MYVIMRC<cr>      to source it runtime
                                              |
 8    Abbreviations                           |           abbreviations are normally used in insert mode
                                              |           and they are similar to :inoremap 
                                              |           but differently to :inoremap they take care of chars 'before and 'after'
                                              |           so while a :inoremap ssig xxxxx will insert text xxxxx as soon as 
                                              |           ssig is typed (ex in Larry Lessig)
                                              |:iabbrev ssig xxxxx        will convert only where seems more "appropriate" ex in  (ssig.)
                                              |
 9    More Mappings                           |           only 1 example:   :nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
                                              |
10    Training Your Fingers                   |           to train using different keys you can <nop> (disable) them
                                              |:inoremap <esc> <nop>        disable the esc
                                              |                             so you can become fluent on alternatives:
                                              |                             Ctrl-c   (a builtin alternative) <-----
                                              |                             jk       (:inoremap jk <esc>)
                                              |
11    Buffer-Local Options and Mappings       |           adding <buffer> keyword or using :setlocal I can associate mappings or settings 
                                              |           ONLY FOR THE BUFFER WHERE I AM.
                                              |:setlocal wrap                         this will work only in this buffer
                                              |:nnoremap <buffer> <leader>x dd          "              "             "
                                              |                      ^               
                                              |                    but it'd be better here <localleader> that it's exactly
                                              |                    where/when it should be used
                                              |
12    Autocommands                            |           Autocommand Structure
                                              |                  :autocmd BufNewFile * :write
                                              |                           ^          ^ ^
                                              |                           |          | |
                                              |                           |          | The command to run.
                                              |                           |          |
                                              |                           |          A "pattern" to filter the event.
                                              |                           |
                                              |                           The "event" to watch for.
                                              |:autocmd BufWritePre *.html :normal gg=G     this reindent all html files before saving them
                                              | 
13    Buffer-Local Abbreviations              |                       the following defines a way to comment any file according to its type
                                              |:autocmd FileType javascript nnoremap <buffer> <localleader>c I//<esc>
                                              |:autocmd FileType python     nnoremap <buffer> <localleader>c I#<esc>
                                              |
                                              |                       the following defines some snippet s trick
                                              |:autocmd FileType javascript :iabbrev <buffer> iff if ()<left>
                                              |:autocmd FileType python     :iabbrev <buffer> iff if:<left>
                                              |
14    Autocommand Groups                      |           When you create an autocommand like above vim has no way of knowing if
                                              |           you want to replace an existing one. 
                                              |           So just 'resourcing' n times ~/.vimrc, vim creates n separate 
                                              |           autocommands that each happens in sequence on the same events.
                                              |           The solution is using:
                                              |:augroup xxxxx  <-- this opens a group (I can give it a name xxxxx)
                                              |                    I can define any number of augroups, but for vim they are
                                              |                    as a single big one
                                              |:autocmd!       <-- this is the trick, this clears all the autocmds inside
                                              |                    its augroup (allowing multiple sourcing with no side effect)
                                              |:augroup END    <-- this ends
                                              |
15    Operator-Pending Mappings               |           this mapping allows to define the selection of text onto which
                                              |           the command must be executed. This extends the movements operators
                                              |:onoremap p i(      <--- defines the selection 'p' as selection of what inside some ( )
                                              |                         so now editing  cp  or  dp  will change/delete what inside ( )
                                              |           these operator-mappings work on:
                                              |                  1) from CURRENT cursor position till wherespecified
                                              |                  2) on the VISUALISED text I was able to select
                                              |           ex fo 1) :onoremap b /return<cr>
                                              |           ex fo 2) :onoremap il( :<c-u>normal! F)vi(<cr>
                                              |
16    More Operator-Pending Mappings          |:onoremap ih :<c-u>execute "normal! ?^==\\+$\r:nohlsearch\rkvg_"<cr>
                                              |                   
                                              |                   <c-u>    is the usual effect of Ctrl-U, to delete
                                              |                            all what is on the left. This is required
                                              |                            as vim on a ':' add in the line the '<,'>
                                              |                   execute  allows to run a vim script inside the ""
                                              |                            special chars are allowed (ex. \r for ENTER)
                                              |                   normal!  allows to specify vim normal mode commands
                                              |                            nb. it exists the command  :normal 
                                              |                                that runs normal-mode commands (ex:  :normal dd)
                                              |                                anyhow it cannot read special char like <cr>
                                              |                                so in that case use execute "normal!..."
                                              |                                   :normal! gg/a<cr>          <--- not works as expected
                                              |                                   :execute "normal! gg/a\r"  <-- ok
                                              |                   ?^==\\+$     search backword a line of all '='
                                              |                   \r           ENTER
                                              |                   :nohlsearch  remove highlight of found text
                                              |                   \r           ENTER
                                              |                   k            up
                                              |                   v            enter visual mode
                                              |                   g_           go to end of line  (excluding \n, not like $ does)
                                              |
17    Status Lines                            |:set statusline=%f\ -\ FileType:\ %y   <-- all in 1 line so spaces must be escaped
                                              |
                                              |:set statusline=%f          <--- on more lines with +=
                                              |:set statusline+=\ -\     
                                              |:set statusline+=FileType: 
                                              |:set statusline+=%y        
                                              |
                                              |                      like a normal printf
                                              |                      there are many flags %
                                              |                      each with the structure %-0{minwid}.{maxwid}{flag}
                                              |                      (:help statusline)
18    Responsible Coding                      |"         use comments
                                              |          use folding. It works as:
                                              |:set foldmethod=marker   <--- this sets the folding method type
                                              |za                       <--- this will opens & closes any block 
                                              |                              started with a line with 3 {
                                              |                              till one line ended by }}}
19    Variables                               |:let x = "string"
                                              |:let x = 42
                                              |:echo x
                                              |:echo &x             <-- the syntax '&' refers to a builtin name 'x' of vim
                                              |                         ex :let &nu = 1   (to distinguish from user vars)
                                              |                                       nb. "true" is != 0
                                              |:let &l:nu = 1       <-- the syntax l:  means local to this buffer
                                              |      b:                            b:   "      "            "
                                              |
                                              |:let @a = "hello!"   <-- the syntax @ refers to registers
                                              |                         remember:
                                              |                                  @"   unnamed (or default) register
                                              |                                  @/   search reg
                                              |
20    Variable Scoping                        |:l
                                              |:b   
                                              |            
21    Conditionals                            |            more commands can be put on 1 line
                                              |            using the pipe '|' as separator
                                              |            (the meaning is like the ';' in other languages not lie the '|' in unix)
                                              |:if xxx
                                              |:  
                                              |:elseif                  nb.   if 1    if 45      if "13abc"    =  TRUE
                                              |:                              if 0    if "abc"   if "abc13"    =  FALSE
                                              |:else
                                              |:  
                                              |:endif
                                              |
22    Comparisons                             |
                                              |:if 10 > 1  
                                              |:if 10 == 11
                                              |:if "foo" == "bar"                  F
                                              |:if "foo" == "foo"                  T
                                              |:set noic | :if "foo" == "FOO"      F
                                              |:set ic   | :if "foo" == "FOO"      T <--- nb changes 
                                              |                                           as the T/F of the == operator depends on a
                                              |                                           user settings, NEVER use its pure form
                                              |                                           but the 
                                              |==?   (case ic)     <--.
                                              |==#   (case noic)   <---`---- they work also on numbers (not only strings)
                                              |                                           
                                              |
23    Functions                               |           - function name MUST have the 1' letter: UPPERCASE
                                              |           - they always returns number '0' if there is no explicit 'return'
                                              |
                                              |:function Meow()         :function GetMeow()
                                              |:  echom "Meow!"         :  return "Meow String!"
                                              |:endfunction             :endfunction
                                              |      ^
                                              |      |
                                              |  this returns 0
                                              |
                                              |:call Meow()         <-- explicit call with keyword 'call'
                                              |:echom GetMeow()     <-- implicit call
                                              |
24    Function Arguments                      |:function DisplayName(name)
                                              |:  echom "Hello!  My name is:"
                                              |:  echom a:name     <-- nb. ALWAYS the syntax is a:   (is the vim scope on vars like l: b:)
                                              |:endfunction
                                              |
                                              |:function Varg(a,b,...) <-- Vaiable args.  
                                              |                          - a:000  is the LIST of extra args passed
                                              |                          - a:0    is the NUMBER of args passed
                                              |                          - a:1    is the first  (a:2 the second ...)
25    Numbers                                 |:echo 100
                                              |:echo 0xff     (255)
                                              |:echo 100.1    
                                              |:echo 5.45e+3
                                              |:echo 5.45e-2
                                              |:echo 3 / 2       <-- 1
                                              |:echo 3 / 2.0     <-- 1.5
                                              |
26    Strings                                 |:echo "Hello"
                                              |:echo "Hello, " . "world"
                                              |:echo "3abc"    + "efg"     <-- gives 3, as '+' is a numeric operator 
                                              |
                                              |          to escape, use, as usual '\'
                                              |          anyhow echom cannot manage escaped chars, while echo can:
                                              |
                                              |:echo  "foo\nbar"   <-- ok
                                              |:echom "foo\nbar"   <-- foo^@bar   (new line in vi: ^@)
                                              |
27    String Functions                        |:echom strlen("foo")               --> 3
                                              |:echom len("foo")                  --> 3
                                              |:echo split("one two three")       --> ['one', 'two', 'three']   <-- a VIM LIST
                                              |:echo split("one,two,three", ",")
                                              |:echo join(["foo", "bar"], "...")  --> foo...bar
                                              |:echom tolower("Foo")
                                              |:echom toupper("Foo")
                                              |
28    Execute                                 |         It's like the 'eval' of other languages.
                                              |         it executes the vim code provided.
                                              |
29    Normal                                  |         It simply takes a sequence of keys and pretends they were typed in normal mode.
                                              |:normal G                    go to last line
                                              |:nnoremap G dd | :normal G   delets current line (it takes into account any mapping)
                                              |
                                              |:normal! G                   :normal!   is the version that doesn't consider mappings
                                              |
                                              |         ALWAYS USE :normal!
                                              |
                                              |:normal! /foo<cr>            <-- doesn't work (special chars <cr> not understood)
                                              |
30    execute normal!                         |:execute "normal! /foo\<cr>" <-- works! 
                                              |                                 with execute I can use normal escape-sequences
                                              |
31    Basic Regular Expressions               |:set hlsearch incsearch        (1' highl. ALL    
                                              |                                2' highl. FIRST on the fly while typing)
                                              |
                                              |         Suppose we want to search:   "for i in range(max):"
                                              |
                                              |:execute "normal! gg/for .+ in .+:\<cr>"            <-- not_ok
                                              |:execute "normal! gg/for .\\+ in .\\+:\<cr>"        <-- OK (escaped). Used "
                                              |:execute 'normal! gg/for .\+ in .\+:\<cr>'          <-- not_ok. Used '  (<cr> becomes literal)
                                              |:execute "normal! gg" . '/for .\+ in .\+:' . "\<cr>"<-- OK. Used  ' . "
                                              |
                                              |             In the last version we have the clean regular expression in the middle.
                                              |
                                              |             vim has 4 methods to parse regular expression strings.
                                              |             To keep on the standard one, use ALWAYS the "\v" at the beginnig:
                                              |
                                              |:execute "normal! gg" . '/\vfor .+ in .+:' . "\<cr>"
                                              |                          ^
32    Case Study: Grep Operator, Part One     |
                                              |:nnoremap <leader>g :grep -R aaa .<cr>        <-- useless with fixed string "aaa"
                                              |:nnoremap <leader>g :grep -R <cword> .<cr>    <-- <cword>: word under the cursor (ex foo of foo-bar)
                                              |:nnoremap <leader>g :grep -R <cWORD> .<cr>    <-- <cWORD>: WORD under the cursor (all foo-bar)
                                              |:nnoremap <leader>g :grep -R '<cWORD>' .<cr>  <-- add ' (still problems with > that's <)
                                              |
                                              |:nnoremap <leader>g :execute "grep -R " . shellescape("<cWORD>") . " ."<cr>             
                                              |                                              ^
                                              |                                           adds the proper escapes (ex ' becomes '')
                                              |                                           here doesn't work as returns literally
                                              |                                           '<cWORD>'
                                              |:nnoremap <leader>g :exe "grep -R " . shellescape(expand("<cWORD>")) . " ."<cr>
                                              |                                            ^       ^
                                              |                                            |     returns "that's"
                                              |                                           returns "that''s"
                                              |
                                              |
                                              |:nnoremap <leader>g :execute "grep! -R " . shellescape(expand("<cWORD>")) . " ."<cr>:copen<cr>
                                              |                                                                                       ^
                                              |                                                                       opens quickfix window
                                              |:nnoremap <leader>g :silent execute "grep! -R " ....
                                              |                       ^
                                              |                     don't show intermediate steps
33    Case Study: Grep Operator, Part Two     |
                                              |
                                              |
                                              |
                                              |
                                              |
                                              |
34    Case Study: Grep Operator, Part Three   |
                                              |
35    Lists                                   |
                                              |
36    Looping                                 |
                                              |
37    Dictionaries                            |
                                              |
38    Toggling                                |
                                              |
39    Functional Programming                  |
                                              |
40    Paths                                   |
                                              |
41    Creating a Full Plugin                  |
                                              |
42    Plugin Layout in the Dark Ages          |
                                              |
43    A New Hope: Plugin Layout with Pathogen |
                                              |
44    Detecting Filetypes                     |
                                              |
45    Basic Syntax Highlighting               |
                                              |
46    Advanced Syntax Highlighting            |
                                              |
47    Even More Advanced Syntax Highlighting  |
                                              |
48    Basic Folding                           |
                                              |
49    Advanced Folding                        |
                                              |
50    Section Movement Theory                 |
                                              |
51    Potion Section Movement                 |
                                              |
52    External Commands                       |
                                              |
53    Autoloading                             |
                                              |
54    Documentation                           |
                                              |
55    Distribution                            |
                                              |
56    What Now?                               |
                                              |
