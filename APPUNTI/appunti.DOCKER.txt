
       3 main pieces of DOCKER:

            1. engine      $ docker         --version
            2. compose     $ docker-compose --version
            3. machine     $ docker-machine --version





      image  :  is an EXEC package (including all what is required
                                          - the application to tun
                                                    +
                                          - required LIBRARIES
                                          - required ENV vars
                                          - required CONFIG file
                                          )

      container  :  it's a running instance of an image
                    (it has a proc id)

      docker ps                         to see all the containers
      docker --version
      docker version                    nb. without --      it gives more info for Client and Sever
      docker info                       even more verbose

      docker container ls --all

      docker network create confluent
      docker network ls

      docker volume ls
      docker volume create portainer_data




------------      docker-compose
      docker-compose --version




------------      docker-machine
      docker-machine --version



------------ PORTAINER    (https://portainer.readthedocs.io/en/stable/deployment.html)

    docker volume create portainer_data
    docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer



                  PERSISTENT DATA

                  By default, Portainer stores in "/data" the container's data.
                  to keep your changes after restart/upgrade of the Portainer container
                  I can use a bind mount on the Docker host folder:


    docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v /path/on/host/data:/data portainer/portainer
                                                                                                                 ^^^^^^^^^^^^^^^^^^







     Install and start Zookeeper

                                   docker run -d \
                                       --net=confluent \
                                       --name=zookeeper \
                                       --restart=always \
                                       -e ZOOKEEPER_CLIENT_PORT=32181 \
                                       confluentinc/cp-zookeeper:5.0.0

     Install and start Kafka

                                   docker run -d \
                                       --net=confluent \
                                       --name=kafka \
                                       --restart=always \                                                      This is the local host (i.e. Mac) IP
                                       -p 29093:29093 \                                                       /
                                       -e KAFKA_ZOOKEEPER_CONNECT=zookeeper:32181 \                          /
                                       -e KAFKA_ADVERTISED_LISTENERS=INSIDE://localhost:29092,OUTSIDE://172.19.68.36:29093 \
                                       -e KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT \
                                       -e KAFKA_INTER_BROKER_LISTENER_NAME=INSIDE \
                                       -e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
                                       confluentinc/cp-kafka:5.0.0



     Listing your Kafka Topics

                                   docker run \
                                       --net=confluent \
                                       --rm confluentinc/cp-kafka:5.0.0 \
                                       kafka-topics --list --zookeeper zookeeper:32181

    Running Kafka Console Consumer

                                   docker exec -it kafka /usr/bin/kafka-console-consumer --bootstrap-server localhost:29092 --topic PA_STREAMING_2 --from-beginning # Ctrl C to exit



    option -v     : to mount a volume (dir or file) so that it's visible in the docker from the host filesystem.

                docker run -d --name nginx -p 443:443 \
                           -v "/nginx.ssl.conf:/etc/nginx/conf.d/default.conf" \
                           -v "/ssl-cert.pem:/etc/nginx/certs/ssl-cert.pem" \
                           -v "/ssl-cert.key:/etc/nginx/certs/ssl-cert.key" \
                           nginx



    option -w     : to use ENV variables;


                The `docker run` command has -e and --env-file options to provide environments variables for processes inside the container


    Dockerfile:



                docker run -d --name nginx -p 443:443 \
                   -v "/ssl-cert.pem:/etc/nginx/certs/ssl-cert.pem" \
                   -v "/ssl-cert.key:/etc/nginx/certs/ssl-cert.key"\
                   -e "NGINX_ENABLE_SSL=True" \      <------------   we want to have a config var to control how the docker is config.
                   our-nginx



                Dockerfile:

                FROM nginx
                    RUN apt-get update && \
                        apt-get install python-dev python-setuptools
                    RUN easy_install j2cli

                    COPY nginx.conf.j2 /templates/
                    COPY docker-entrypoint.sh /         <-----------------------   #!/bin/bash -e
                    ENTRYPOINT ["/docker-entrypoint.sh"]                           j2 /templates/nginx.conf.j2 > /etc/nginx/conf.d/default.conf
                    CMD ["nginx", "-g", "daemon off;"]                             exec "$@"





                J2 Template

                server {
                        server_name _;
                        {% if NGINX_ENABLE_SSL|default('False') == 'True' %}
                        listen 443;
                        ssl on;

                        ssl_certificate /etc/ssl/certs/ssl-cert.pem;
                        ssl_certificate_key /etc/ssl/private/ssl-cert.key;
                        {% else %}
                        listen 80;
                        {% endif %}

                        location / {
                            proxy_pass http://localhost:8080;
                        }
                    }



    docker ps -a        to show all containers
    docker run
                            --name           assign a name to the container:                            ex.  --name my_container
                            -d  (--detach)   runs the container in the background of the terminal.      ex.  -d
                            -e  (--env)      sets an ENV var using a KEY=VALUE pair.                    ex.  -e KEY=VALUE    (I can add many -e flags in the cmd line)
                            --env-file       if ENV vars are in file, I can pass the full path here     ex. -env-file ./env.list
                            --ip             declare an IP address.                                     ex. --ip=10.10.9.75
                            --rm             automatically removes the container when it exits          ex. --rm
                            -v  (--volume)   mount host's filesystem into the docker's one.             ex. -v "/ssl-cert.pem:/etc/nginx/certs/ssl-cert.pem"
                            -w  (--workdir)  sets the working dir in the docker  (useful for example
                                             if I have to then copy files to this dir).
                            -p  (--publish)
                            -P  (--publish-all)  port mappings between the container and host
                                                (ports defined in an image’s Dockerfile or by using option, --expose)
                                                . The option --publish, -p publishes a container’s port(s) to the host, while --publish-all , -P publishes all exposed ports.
                            -t  (--tty)      runs the container in the background of the terminal.
                            --entrypoint     specifies an executable to run when the container starts      ex. --entrypoint "/bin/ls -al /root"
                                             nb. any args to this executable must be added after
                                                 the container name                                                        container name
                                                                                                                          /
                                                                      ex.   docker run --entrypoint "/bin/ls -al /root" debian     (wrong)
                                                                      ex.   docker run --entrypoint "/bin/ls" debian -al /root     (good)

    docker exec         to run a command in an existing container
    docker start        to restart a stopped container with all its previous changes intact










































