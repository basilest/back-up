
   REQUIRED
       1 AWS Cloud Compute
       2 AWS Operations
       3 AWS - Application Development

   OPTIONAL
       4 AWS Networking
       5 AWS Cloud Security
---------------------------------------------------------   1

       1 AWS Cloud Compute
         (https://app.pluralsight.com/paths/skill/aws-compute)


-------------------------  1/1-4
Beginner·1h 17m·Apr 6, 2020
       Managing AWS EC2 Instances
       Armen Avanesi

    _____________________________
    . Introduction  (1m 9s)
    _____________________________


     EC2 : - types
           - pricing
           - use cases

     AMI : Amazon Machine Images
           (ex. Amazon Linux 2 ....)
           They are templates containing the SW config.
           (OS + application server + applications)
           required to launch your EC2

     Placement Groups


    _____________________________
    . On-demand Instances  (4m 44s)
    _____________________________

     Pay as you go model

     No contracts  (I can start at any time
                    and I will be billed only for that)

     Use cases   Experiment
                 Workload not sure/unknown

     This flexibility comes at a higher cost

     KEY CONCEPTS:

        . Availability Zones  [AZ] = (1 or more data center in 1 region)
          ^^^^^^^^^^^^^^^^^^

                   (region)                    (region)
                  us-east-1                   eu-west-2
              .---------------.           .---------------.
              |               |           |               |
              |   AZ --- AZ   |           |   AZ --- AZ   |
              |    \    /     |           |    \    /     |
              |     \  /      |           |     \  /      |
              |      AZ       |           |      AZ       |
              '---------------'           '---------------'

                   . regions are completely ISOLATED from each other
                       - fault tolerant: any happening in 1 region
                         doesn't affect the others

                   . AZ are completely ISOLATED from each other too

                   . EC2 belongs to 1 region, so I can only see them
                     in the AWS console if I'm logged in that region



        . Instance Types:  specify the Hardware type that hosts my application
          ^^^^^^^^^^^^^^

                    . 5 Instance Families     . General Purpose
                      ^^^^^^^^^^^^^^^^^^^     . Compute Optimized
                                              . Memory  Optimized
                                              . Storage Optimized
                                              . Accelerated Computing


                    . Instance Sizes             Model     vCPU CPU  Mem  Network Performance
                      ^^^^^^^^^^^^^^                           /hour GiB
                                              ------------------------------------------------
                                              . t2.nano      1   3   0.5  Low
                                              . t2.micro     1   6   1    Low/Moderate
                        Note that this        . t2.small     1  12   2    Low/Moderate
                        data change           . t2.medium    2  24   4    Low/Moderate
                        over time             . t2.large     2  36   8    Low/Moderate
                                              . t2.xlarge    4  54  16    Moderate
                                              . t2.2xlarge   8  81  32    Moderate



    _____________________________
    . Launching an On-Demand Instance (3m 13s)
    _____________________________

     1. Go in EC2 console
     2. Click "Launch Instance"
     3. Choose AMI                      ex. Amazon Linux 2
     4. Chose Instance Type             ex. t2.micro
     -----------  REVIEW & LAUNCH
     (Optional steps:)
     5. Configure                       to customize some params (Networks-VPC / Subnets / Roles ...)
     6. Add Storage                     ex. Volume Type:           root
                                            Device:                /dev/xvda
                                            Snapshot:              snap-094c46c973eaf91f8
                                            Size GiB:              8
                                            Volum Type:            General Purpose
                                            IOPS:                  100/3000
                                            Throughput:            N/A
                                            Delete on Termination: Y
                                            Encryption:            N

     7. Add Tags                        they are KEY=VALUE pairs    (ex. environment = development)
     8. Security Group                  ex. Name  .....
                                                  Rule1   Type        SSH
                                                          Protocol    TCP
                                                          Port Range  22
                                                          Source      Custom 0.0.0.0/0  (*)
                                                          Description ....
                                                  [ADD RULE]

                                                   (*) Warning: Rules with source of 0.0.0.0/0 allow all IPs
                                                                to access the EC2, so it's recommended to select
                                                                known IP only.
     -----------  REVIEW & LAUNCH
     9.The Launch will:
                 - allow me to chose a previous PEM key file to use
                 - create a new PEM key file to download and use.
                 - Proceed without a PEM file

    10.I can see my new running instance in the usual AWS Console "Instances"
                                    Name:               ....
                                    Instance ID:        i-029b4c05e7
                                    Instance Type       t2.micro
                                    Availability Zone:  eu-west-2
                                    Instance State:     pending
                                    Status Check:       Initializing
                                    Alarm Satus:        None

    _____________________________
    . Reserved Instances   (9m 33s)
    _____________________________

     Like choosing a phone plan

     The plan is 1 or 3 years

     Less flexible but cheaper (ex. Up to 75% cheaper than on-Demand)

                       - EC2 type               ex. t2.micro
                       - OS                     ex. Linux / Windows
                       - Tenancy                . Default / . Dedicated
                       - Payment                . All Upfront / . Partial Upfront / . No Upfront
                       - Term                   . 1-12 months / . 12-36 months
                       - Availability Zone      If I don't specify an AZ there is a discount
                                                If I pay to reserve an AZ then when that AZ runs
                                                out of resources I'll have the precedence over
                                                other EC2s

     There are 3 types:
                       . Standard     (I can later change between only some EC2 types)
                       . Convertible  (I can change with any other EC2 type)
                       . Scheduled     I can reserve capacity on a
                                                      Daily
                                                      Weekly
                                                      Monthly
                                       basis
                                       (Good for predictable workload, ex. running maintenance
                                        overnight at AM 5:00)

     Used cases:       in general Reserved Instances are ok for regular workloads, not for ex ecommerce
                       where it doesn't run probably at night.

     Amazon Reserved Marketplace:  it's where people sell their Reserved Instances because
                                   they don't need them anymore and they want to sell to someone
                                   the time left on the contract.
                                   If buyers are ok with that specific EC2 configuration, then
                                   they can buy it, so in some cases thay can have Reserved Inst.
                                   with contracts of < 1 year
                                   All the buy & sell is managed by Amazon.
    _____________________________
    . Launching a Reserved Instance  (1m 41s)
    _____________________________


     1. from EC2 Console -> Purchase Reserved Instances
     2. I specify:
                    . Patform:       ex  Linux/UNIX
                    . Tenancy            . Default / . Dedicated
                    . Offering Class     . Convertible / . Standard
                    . Instance Type  ex t2.micro
                    . Term               . 1-12 months / . 12-36 months
                    . Payment Option     . No Upfront  / . Partial Upfront / . All Upfront

                    V. If I select the check-box: "Only show offerings that reserve capacity"
                       I can choose an Availability Zone

     3. Click SEARCH:    I have a table with the offers  (i.e. 1 t2.micro 12 montsh $80 All Upfront)


    _____________________________
    . Spot Instances  (5m 45s)
    _____________________________


     Unused EC2s in Amazon farm which are offered with up to 90% discount

     2 min warning before it will be shutdown (Interruption notice)
     which can happen for 3 reasons:

      1 Price:  the hourly price is called SPOT Price
                as it varies upon demand trends
                When I purchase a Spot EC2 I define the max SPOT Price
                so that if it goes beyond, Amazon will send me the 2 min Interruption notice.

                SPOT BLOCK is a time between 1 and 6 hours
                           that I can be guaranteed that I will not be terminated

      2 Capacity: If there are needs in Capacity for other customers, Spot EC2s can be terminated

      3 Constraints:  If my Spot EC2 constraint (e.g. I specified an AZ which becomes now full)
                      are not satisfied anymore.

     Use Cases:  . proc which needs to be run sometimes and can be suspended
                   (ex. some maintenance jobs)
                 . When adding resources in busy times

    _____________________________
    . Launching a Spot Instance   (3m 21s)
    _____________________________

     1. from EC2 Console -> Spot Requests
     2. I can choose between pre-configured use cases:
                                                 . Load Balancing workloads (ex. good for web services)
                                                 . Flexible       workloads (ex. good for batch and CI/CD jobs)
                                                 . Big data       workloads (ex. MapReduce jobs)
                                                 . Defined duration  "      (spot block 1-6 hours)

     3. I configure:    . AMI:       ex. Linux
                        . type       ex. t2.micro
                        . vCPU:      ex. 2
                        . Mem:       ex. 3 GiB
                        . AZ         . no preference / eu-west-2
                        . KEY=VALUE  pairs

     4. Select one among the offered ones (with listed discounts ex. 70%)

    _____________________________
    . Dedicated Instances   (4m 1s)
    _____________________________

     They don't share HW with any other AWS customers
                . Usually EC2s among different customers run through a Hypervisor
                  on the same (shared) HW

     Dedicated Instances / Dedicated Hosts:
                . Dedicated Instances   on HW-1 I'm the only AWS customer who can spin up EC2s
                                        anyhow when 1 EC2 is stopped and restarted it can be restarted
                                        onto another AWS HW-2 where I'll be still the only AWS customer
                                        even though HW-1 and HW-2 are 2 different HW in the AWS farm
                . Dedicated Hosts       In this case I rent a strict HW in the AWS farm and my EC2s
                                        will be started only in that.
                                        The only constraint is that ALL the EC2s on a Dedicated Host
                                        must be of the same type (ex. I cannot mix 1 t2.micro
                                        1 t3.micro and 1 4xlarge)

     More expensive, as this privacy comes at a cost (included a $2/hour fee)

     Use cases:    . some businesses have strict regulatory requirememts (ex. Finance)

    _____________________________
    . Launching a Dedicated Host  (1m 31s)
    _____________________________

     1. from EC2 Console -> Dedicated Hosts
     2. I select an Instance family:     a1 / c3 / c4 / c5 / c5d / c5n / d2 / g2 / g3 / ...
                                                 .

     3. Instance auto-placement      Enable / Disable      (If Disable I must specify the EC2s which will be deployed)

     4. Host Recovery                Enable / Disable      (If Enable it will automatically restart EC2s onto a new
                                                            replacement Host if a failure is detected).

    _____________________________
    . Amazon Machine Images (AMIs)   (4m 33s)
    _____________________________

     Templates where the OS + frameworks + applications are bundled

     Components inside AMIs are:
                                  . Root Volume Template:   it's like the Hard Drive (Root Partition)
                                                            it store OS / SW (ex Nginx) / Source Code

                                  . Launch Permissions      specify WHO can use this AMI

                                  . Block Device Mapping    EC2s are not limited to 1 Root Volume
                                                            (they can have other Partitions, eg. for data logs)
                                                            "Block Device Mapping" specify which of these other
                                                            Volumes must be attached to my EC2


     AMI Management:   . I create 1 AMI (which 'registers' it in AWS)
                       . I can customize it furtherly creating/saving subsequent AMIs
                       . I can organize them with tags  (e.g. "version = 1.0" / "stack = development")
                       . I can de-register unused ones
                       . AMIs:  . I can created my own AMIs
                                . I can choose among AWS ready ones (e.g. some Linuxes)
                                              - they come shipped with included useful tools
                                              - they are updated regularly
                                              - high performance environment
                                              - free of charge
                                . I can choose among AWS ready 3rd-party ones (not free of charge)
                                . I can buy and sell my own AMIs

    _____________________________
    . Creating 1 AMI  (1m 6s)
    _____________________________

     1. from EC2 Console -> I select 1 running EC2 --> Actions --> Image --> Create Image
                                          This will create/clone an Image from a running EC2
     2. I specify the Volumes
     3. After I Click CREATE, I will see it in the panel after INSTANCES, which after a while will turn into 'Status=AVAILABLE'

    _____________________________
    . Placement Groups   (3m 30s)
    _____________________________

     The specify how EC2s are placed on the underlying HW

     Ex Grouping / Separating EC2   (if on different HW and 1 fail the others will still run)

     Placement Groups settings are FREE of charge

     3 Placement Groups:
                           . Cluster      use cases which require that EC2s work connected together
                                          (more important that connection with the outside) so they are
                                          groupped into the same AZ.
                           . Spread       HW isolation. It guarantes that EC2s do not run on the same HW
                                          so they cannot fail at the same time if the HW fails.
                           . Partition    it's a mix of the above. I have small sets of EC2s, each
                                          strictly intraconnected (the EC2s can quickly communicate
                                          to each other) but they stay on different HW:

                                             EC2s can communicate inside each partiion
                                             but not across partitions

                                          7 is the limit of EC2s per partition

    _____________________________
    . Launching into a Placement Group  (26s)
    _____________________________

     1. Create Placement Group from panel below Instances
     2. Give a Name and a strategy (Cluster / Spread / Partition)

    =============================
    . Using AWS EC2 Instances      (30m 45s)
    =============================

     ssh --> EC2

     scp files --> EC2

     change EC2 type

     creating / attaching Volumes

     creating snapshots

    _____________________________
    . Connecting to an EC2    (4m 31)
    _____________________________

     ssh -i  ./my-key-pair.pm  ec2-user@xxx.amazonaws.com
              ^^^^^^^^^^^^^^^  ^^^^^^^^ ^^^^^^^^^^^^^^^^
                    |             |                 |
        private key obtained   'DEFAULT' user       I can see this in the DNS field
        when creating the EC2  of the AMI chose     of the EC2 Description
        (must have chmod 400)  to create the EC2

    _____________________________
    . Transfering files to EC2    (3m 12s)
    _____________________________

     scp  -i ./my-key-pair.pm    local.file  ec2-user@xxx.amazonaws.com

    _____________________________
    . Storage Volumes   (4m 12s)
    _____________________________

     Grant more storage capacity

     Choose between types  Store or EBS

     Created via AWS Console or CLI

     Attached & Mounted to be used


     EBS Volumes:        Network-attached storage

                         Automatically replicated with an available zone (for recovery)

                         Can be attached to only 1 EC2 at a time

                         Monitoring in CloudWatch (free of charge)

                         Can be Encrypted (using EBS encryption)

                         Only pay for the storage I use

                         Use cases:  . All critical/required data
                                     . Data that need persistence
                                     . When Volume needs to be resized


     Instance Volumes:   Physically attached disks

                         The above point gives an idea of why
                         they depend on the EC2 type (ex. t2.micro different from 4x.large)
                         They came shipped as 1 per EC2 or more, solid state or hard drive ...
                         Not all EC2 support them.

                         No costs if it's the ROOT volume

                         Data persist till EC2 is not terminated.
                         (If terminated or HW failure all data are lost)

                         Use cases:  . Caches
                                     . Non critical logs
                                     . Temporary computation data


    _____________________________
    . Add Storage Volume   (3m 13s)
    _____________________________

     1. from EC2 Console --> "Volumes"
     2. I see the list and I can "Create" new ones:
                                                       . ARN
                                                       . Volume Type    ex. SSD
                                                       . Size GiB       min 1 GiB  Max 16386 GiB
                                                       . Availab. Z
                                                       . Throughput
                                                       . Snapshot ID    optional to backup/restore
                                                       . Encryption

     3. Once created, I see it listed as vol-xxxx in status "available"
     4. I can then select it and "Actions"-->"Attach" to link it to 1 EC2  (i-yyyy)
     5. To use I need to FORMAT it as it comes as a raw data block
                                    . ssh into the EC2
                                    . lsblk        to see the current list (I'll see the attached Volume in this list ex. 'xvdf' 1G)
                                    . sudo file -s /dev/xvdf    to see what filesystem is on it
                                                                being still raw data it will say:   /dev/xvdf: data
                                    . sudo mkfs -t xfs /dev/xvdf   to format it as filesystem xfs
                                    . sudo file -s /dev/xvdf    to check that now it says:          /dev/xvdf: SGIXFS filesystem data (blksz 4096, inosz 512, v2 dirs)
                                    . mkdir my-mount-point      to create a dir to mount it
                                    . sudo mount /dev/xvdf  ./my-mount-point    to mount it


    _____________________________
    . EBS Snapshots    (3m 42s)
    _____________________________

     EBS Snapshots are point in time

     Subsequent snapshots will only store the blocks that changed

     Pay on GiB-month

     Best Practices:   . Snapshots are done with the EC2 in use
                         they are in status="Pending" till they are flushed to S3
                       . It's better to LOCK the Filesystem and flush to S3
                         as if I don't lock, then reads & writes still go, while
                         the snapshot-in-time is taken, leaving something out.

                         - Stop my EC2  (eliminate source of writes)
                         - Unmount the Volume  (completely isolated)


    EBS snapshot                 /   AMI
    -----------------------------------------------------------
    back-up 1 Volume (root | data)   can back-up more Volumes (root & data)
    must be attached to 1 EC2        can be used to launch 1 EC2
    more general purpose             tightly coupled to EC2


    Extra features:
            . Encrypted Volumes --> Encrypted Snapshots
            . assig KEY=values tag to organize them
            . EBS Snapshots can be shared with other AWS accounts

    _____________________________
    . Restoring Volumes from 1 Snapshot  (1m 28s)
    _____________________________

     I need the Volume ID (and the rights to access it)

     It's downloaded 'lazily' from S3, which means that if it's not fully downloaded
     and I access data not yet available, the Volume will retrieve that first from S3
     and then it will continue from where suspended.


     Use cases: test environment
                (ex. I can load no regression data ready each time I need them)

    _____________________________
    . Backing up a Storage Volume   (1m 3s)
    _____________________________

     1. AWS Console EC2 --> Volumes
     2. select 1 from the list,  Actions --> Create Snapshot
     3. Give a Description / KEY=VALUE Tags
     4. I can now see it in the AWS Console EC2  --> Snapshots    snap-xxx      (status=pending --> complete)

     5. To restore put that snap-xxxx in the field Snapshot-ID when creating a Volume


    _____________________________
    . Managing the EC2 type   (2m 20s)
    _____________________________

     Change the EC2:   type
                       size

     Not all AMIs are compatible with any EC2
     So as my EC2 is running a specific AMI it's not possible
     to change in any desired way.

     Linux AMIs in particular has 2 possible virtualizations:   . PV (Paravirtual) / . HVM (HW virtual machine)
     and I can move 1 EC2 PV --> EC2 HVM only


     Note that
                changing the EC2 it will go on a new HW
                               BUT
                   i-xxxx     EC2 ids do not change
                   private IP4 IP6    do not change


    _____________________________
    . Navigating the EC2 Lifecycle   (4m 29s)
    _____________________________

     1. AMI
     1. Pending   (booting up / not accessible)
     1. Running   (ssh ...)  ... and start the billing $$

         Reboot      (brings EC2 back on the same host)
         Start       (new host)
         Hibernate   (sends a suspend-to-disk signal to OS) (very quick to resume)(new host)
         Stop
         Terminate   (there is Termination Protection flag to avoid an accidentally Delete)



------------------------- 1/2-4
Beginner·1h 8m·June 4, 2019
       Managing Docker Container on AWS with the GUI
       Jean Francois Landry

    _____________________________
    . Introduction to Conatiners with Amazon ECS   (39s)
    _____________________________

     What is a Docker container

     Lab Setup & Install Docker in a Linux EC2

     Run a Docker container

     Overview of ECS  (Elastic Container Service)

    _____________________________
    . Docker and a bit of history   (3m 6s)
    _____________________________

     Once:   . Physical Servers
             . Resources non fully optimal
             . HW fault
             . Updates HW (memory / cpu / ...)  downtime window

     Then:   . Virtual Machines (Hypervisor)
             . Resources close to optimal
             . Updates no downtime  (I can move the Hypervisor on another HW)
             . Can still be expensive (requires at least 2 servers to manage HW failures)

     Docker  . Software
             . Contains only what required
             . Can be run from anywhere (Windows / Linux / Freebsd)
    _____________________________
    . Demo: Set up Launching a Linux Instance  (1m 30s)
    _____________________________

     Launch 1 EC2 (t2.micro) with Linux (AMI: with specified that this image, contains AWS CLI)

    _____________________________
    . Dockerfile Overview   (0m 36s)
    _____________________________

     FROM ubuntu: 16.04
     RUN apt-get update
     RUN apt-get -y install apache2
     RUN echo "Welcome to Globomatics"           > /var/www/html.html
     RUN echo '. /etc/apache2/envvars'           > /root/run_apache.sh
     RUN echo 'mkdir -p /var/run/apache2'       >> /root/run_apache.sh
     RUN echo 'mkdir -p /var/lock/apache2'      >> /root/run_apache.sh
     RUN echo '/usr/sbin/apache2 -D FOREGROUND' >> /root/run_apache.sh
     RUN chmod 775 /root/run_apache.sh
     EXPOSE 80
     CMD /root/run_apache.sh

    _____________________________
    . Demo Docker Installation   (4m 52s)
    _____________________________

     1. ssh into my EC2 (Linux with aws cli)
     2. sudo yum install -y docker
     3. sudo service docker start  <-------------- start docker daemon
     4. vi dockerfile       # with the above content
     5. docker build /home/ec2-user/  -t  welcome-globomantics
     6. docker images
     7. docker run -p 80:80 welcome-globomantics
     8. go in AWS Console EC2, select the instance which is running this docker
        look into its security groups:
                           It has only 1 inbound rule:  Type:SSH Protocol:TCP  Port Range:22
                           I must ADD another "   "  :  Type:HTTP     "             "    :80


    _____________________________
    . ECS  (Elastic Container Service)   (2m 30s)
    _____________________________

     It's a Container management service
         . Scalable     # I can add & remove containers/resources
         . Secure       # uses AWS roles
         . Reliable
         . Fast

     2 Cluster types to launch:
         . Serverless - Fargate : there is no server. I supply only the instruction/tasks
                                  to a service running in my containers
         . EC2 : The EC2 is my server and I'm the admin/rsponsible of docker and the
                 containers running there.

     ECS Cluster steps
         1. Image
         2. Push/Pull to repository
         3. Task definition
         4. Serivce (APP) start
    _____________________________
    . Demo Create a Cluster   (1m 21s)
    _____________________________

     1. select AWS Console ECS
     2. Click CLUSTERS --> CREATE
     3. Select Template   (I choose "Powered by AWS Fargate) --> Choose a name & CREATE
     4. It's done quickly, I can view it (usual AWS Table layout, with first 2 colums: SERVICES - TASKS)

    _____________________________
    . Demo: Create a Cluster using ECS   (1m 21s)
    _____________________________

     1. from AWS, select service ECS
     2. from the left menu, select CLUSTERS
        (they are listed the ones already created if any,
         or --> "Create Cluster" da Add a new one)
     3. I choose the type  (ex. Powered by AWS Fargate
                                EC2 Linux
                                EC2 Windows)
     4. I give a NAME="..." and clic: CREATE
     5. In a few sec I can see it listed in the CLUSTERS table
        with the colums
                   SERVICES  |   TASKS
        where I can see / add


    _____________________________
    . Managing Containers with ECS  (1m 8s)
    _____________________________

     We'll create a task definition with both
                 - Fargate
                 - EC2

     We'll create services

     We'll manage the worlflow of a container

     We'll see scheduled tasks

    _____________________________
    . Creating a TASK in Fargate   (2m 58s)
    _____________________________

     Fargate runs in AWS without any EC2 required  (with permissions / patches or other maintenance)

     It's Scalable (add / remove containers in seconds)

     Nothing is shared between tasks (ex. shared memory or others), they are isolated

     At Task level I can specify the varibale of CPU / Memeory values
                                           0.25 vCPU    0.5, 1, 2     GB
                                           0.5          1,   2, 3, 4  GB
                                           1            2 .....    8  GB
                                           2            4 ....... 16  GB
                                           4            8         30  GB

     Currently Fargate is not available in all the regions  (Ireland / London : ok)
    _____________________________
    . Demo of Fargate    (9m 27s)
    _____________________________

     1. from CLUSTERS, still left menu: TASK DEFINITIONS
     2. Create, and choose Fargate or EC2  (we choose Fargate now)
     3. give a NAME="..."
     4. Specify the Task Role (defined in IAM) which has the right to pull down the docker image
     5. Specify Network mode:  (defualt VPC is ok)
     6. specify the Task Execution Role
     7. specify Task CPU & Mem size
     8. ADD container (to specify the image to pull down)
     ---------------------
     9. CREATE TASK

       ------- ONCE the task is created, I can run it in 1 Cluster so

     1. I select 1 Cluster, and I see its table with the task Column
     2. I add a Task
     3. I select in the drop-down menu from the Tasks list (maybe only 1, which I created before)
     4. I specify the number of instance to run for this task (default 1)
     5. I specify the task Group
     6. I specify Cluster VPC & Subnets
     7. I specfy Security Groups
     8. I choose if AUTO-assing-Public-IP is ENABLE

       ------- In a matter of seconds I'll see the task as running in the Cluster's table

       . I can see it's Public IP  (put in a browser and (as usual) see what the code running in that image
                                    is giving back)
       . I can see the eni-...  (its network interface id, like in a PC)

    1. STOP a task  (selecting from the Cluster's table)
       to stop the billing

    _____________________________
    . Creating and Managing Services   (1m 22s)
    _____________________________

     ECS Service SCHEDULER
           . strategy 1: REPLICA
                         this strategy maintains the number of tasks running at all time.

           . strategy 2: DAEMON
                         places 1 task per container (used in EC2)

    _____________________________
    . Demo of Creating and Managing a Service   (7m 29s)
    _____________________________

     1. from the CLUSTERS tab, select 1st column (SERVICE) and clic "CREATE"
     2. launch type (FARGATE or EC2)
     3. Task definition
     4. Service type "REPLICA"   # only strategy for FARGATE
     5. Number of tasks   (like in Marathon/Mesos)
     6. Deployment type "Rolling Update"
     7. specify Network mode:  (defualt VPC is ok)
     6. specify subnets & security groups
     8. specify if AUTO-assing-Public-IP is ENABLE
     9. specify if we want an optional ELB in front to distribute traffci/load
    10. uncheck "Enable service discovery integration" as we don't want our service to be discovefed from internet
    11. specify optionally auto scaling  (click on "Do not adjust the service's desired count")
     --------------------
    12. CREATE SERVICE

        I can see it now in the usual Cluster table.

     I can now from the table instead of "CREATE" select "UPDATE"
     and I change the number of instances from 1 to 4
     (which like Marathon / Mesos will deploy other 3
      which I'll see in the cluster Table)

     In the Cluster Table (Task section) there is also the colum "Desired..."
     If I select 1 of the 4 task and I STOP it, I'll see that the scheduler
     will deploy another to keep the number to 4.
     (Again like the kill & scale in Mesos)

     If I really want 3, then I "update" the service
     and I set '3' at the point 5 above.


    _____________________________
    . Workflow of a Container   (1m 38s)
    _____________________________

     EC2 : - types

    _____________________________
    . Scheduling Tasks   (1m 0s)
    _____________________________

     EC2 : - types

    _____________________________
    . Demo of EC2   (5m 1s)
    _____________________________

     EC2 : - types

    _____________________________
    . Navigting the Container Agent   (0m 49s)
    _____________________________

     EC2 : - types

    _____________________________
    . Summary   (0m 42s)
    _____________________________

     EC2 : - types

    _____________________________
    . Managing Repos with ECR
    _____________________________

     EC2 : - types

    _____________________________
    . Authenticate to ECR   (2m 56s)
    _____________________________

     EC2 : - types

    _____________________________
    . Demo Creating 1 Repo  (3m 4s)
    _____________________________

     EC2 : - types

    _____________________________
    . Pushing / Pulling / Tagging with ECR  (7m 59s)
    _____________________________

     EC2 : - types

    _____________________________
    . Publishing Images using the Release Pipeline  (1m 48s)
    _____________________________

     EC2 : - types

    _____________________________
    . Summary   (1m 7s)
    _____________________________

     EC2 : - types


------------------------- 1/3-4
Beginner·1h 24m·June 12, 2019
        Using Docker on AWS with the Command Line
        David Clinton

------------------------- 1/4-4
Advanced·2h 15m·June 26, 2019
        Managing Applications in AWS
        Jasenko Krejic

---------------------------------------------------------

       2 Managing AWS Operations
         Andru Estes


       AWS Systems Manager

           - Group user resources ----> into Resource-GROUPS

       AWS Systems Manager is a suite of more tools:

         Operations Management:
                     - Explorer: allows customizable dashboards for reports of resources
                     - OpsCenter: centralised place for viewing / investigating / fixing
                                   (I can create my own events associated to instances (e.g. EC2 id))
                     - CloudWatch / metrics:   I can create my Dashboard
                     - Trusted Advisor: AWS Health EVENTS

         Application Management:
                     - Resource Groups: I can create my resources based on TAG (ex 'XML') or CloudFormation stack ids.
                                        Once the group is created (with its name), all the resources grouped
                                        can be seen all together (and so automatic actions will be possible
                                        specifing that resource-GROUP-name)
                     - AppConfig: allows to create / deploy app configs
                     - Parameter Store  (for secrets & data)










    _____________________________
    . 1/4 Course Review
    _____________________________


    _____________________________
    . 2/4 Planning & Configuring AWS System Manager
    _____________________________


    _____________________________
    . 3/4 Monitoring Compliance
    _____________________________


    _____________________________
    . 4/4 Using Additional Monitoring Service
    _____________________________



---------------------------------------------------------

       3 AWS - Application Development
---------------------------------------------------------

       4 AWS Networking
---------------------------------------------------------

       5 AWS Cloud Security
---------------------------------------------------------














AWS Cloud Practitioner Learning Path:
    4 courses:
              1/4   Foundamental Cloud Concepts for AWS
              2/4   Understand AWS Core Services
              3/4   Introduction to Security & Architecture on AWS
              4/4   AWS Ceryified Cloud Practitioner Exam Prep

_________________________________________________________
              1/4   Foundamental Cloud Concepts for AWS

                _________________________________________________________
                    - set AWS account (personal)/  credit card - free tier
                    - activate
                    - set budget alarm
                                              from my name in the corner --> Billing Dashboard
                                              Then "Create a Budget" and set an amount
                                              email or phone num

                    - Traditional Data Center
                                             Large up-front investment
                                             Forecast demand is difficult
                                             Slow to deploy servers
                                             Maintaining expensive
                                             Security

                    - Benefit Cloud (Computing)
                                             Variable costs
                                             Massive economy of scale (without maintenance)
                                             Stop guessing capacity --> more agility & speed
                                             Global (America or Asia) in minutes

                                    Which are defined in these 3 AWS concepts:

                                    "ELASTICITY":  "ability to ACQUIRE resources as I need them
                                                    and to RELEASE when no longer needed.
                                                    I also want to do this AUTOMATICALLY"

                                    "RELIABILITY": "ability to provide FUNCTIONALITY (to users) when needed"

                                    "AGILITY":     " - reduce costs for trying new ideas
                                                     - reduce maintenance
                                                     - improve security
                                                     - access to emerging technologies"


                _________________________________________________________
                    - TYPES of Cloud (Computing)  / (MODELS)

                      first an AWS definition of
                      "Cloud (Computing)":  "on-demand delivery of
                                                       - computer power
                                                       - DB storage
                                                       - applications
                                                       - other IT resources
                                             through a cloud services platform
                                             via the internet with
                                             PAY-AS-YOU-GO
                                             pricing"

                                      Here 3 "MODELS":


                         MAXIMUM                                                              MINIMUM
                         CONTROL  <|===========================|===========================|> MAINTENANCE
                                 (IaaS)                     (PaaS)                       (Saas)
                              Infrastructure              Platform                        Software
                              AS A SERVICE                AS A SERVICE                    AS A SERVICE


                              they are computers         I have both the HW               I pay for a service
                              in the cloud               and some MIDDLEWAREs             in the cloud (ex Microsoft Office/ gmail/ slack)
                              where I deploy             (dev envs, ex Kubernetes)        without bothering of any
                              my service                  so SW that I use without        underlying
                              (I can control the OS      bothering of the licences        CONFIGURATION
                               stop/start ....)



                                      Different Cloud DEPLOYMENT Models:
                                                Plublic Cloud:   ex AWS
                                                On-Prem:         the Cloud-like platform is on on-prem servers
                                                Hybrid:          mix of both



                _________________________________________________________
                    - AWS Global Infrastructure       (https://aws.amazon.com/about-aws/global-infrastructure/  for visually see the Global infrastructure)

                        it's built of 3 elements:


                         REGIONS                each region --> specific geographic location  (currently 22 regions. USA: 7)

                                                each region has a CLUSTER of data centers (2+)

                                                Some REGIONS are public,  some are not (ex governments)


                         AVAILABILITY ZONES     These are the CLUSTERS,
                                                1 AVAILANILITY zone = 1+ data center

                                                So 1 REGION = 2+ AVAILANILITY zones    (<---- NB. at least 2)
                                                                                       Ex REGION WEST VIRGINIA = 6 AZ

                                                69 = total of AVAILANILITY zones worldwide


                                       us-east-2a              u   s    -    e   a   s   t    -    2   a
                                                              High level         Sub-area      Region  AZ      <---- NB. the AZ is a 'letter'
                                                              AREA                             Number
                                                              |=====================================|
                                                                          REGON NAME
                                                              |=========================================|
                                                                          AZ    NAME



                         EDGE LOCATIONS         They are cache nodes                (currently > 200 worldwide, and expanding at ~ 10/13 each year)
                                                stored in AWS data centers or 3rd party data center.
                                                They store a copy of the info (origin)
                                                in order to serve it quickly.
                                                Ex If a copy of a S3 doc stored in India is asked in USA and it's avilable in 1 edge location
                                                   closer than in India, it will be served from there (decreases the latency)
                                                   Note also that 1 read from S3 is billed 1
                                                   Edge location reads aren't billed, so 100 USA users reading from 1 edge location
                                                   wouldn't cause a 100 billing from S3 to the AWS customers owning that S3.

                                                Used in :
                                                               CDN  (CloudFront)
                                                               DNS  (Route 53)
                _________________________________________________________
                    - Economics (of the Cloud)

                         CapEx (Capitalized Expenditure)    is the up-front (usually big) cost of fixed assets (building/servers/other equipments)
                         OpEx  (Operating   Expenditure)    day to day costs

                      Key is handling Demand:  decrease Unused Capacity / avoid Demand over Capacity
                      2 tools in AWS:

                            o AWS Cost Explorer  (Console or cli-API)
                                                  - provides breakdown by service or by cost tag
                                                  - provides forecast for the next 3 months (based on the previous trend)
                                                  - gives recommendations for cost optimization

                            o AWS Budgets (uses data from AWS Cost Explorer)

                      Other tools:
                            o AWS TCO Calculator: (TCO = Total Cost Ownership) to determine costs saved when moving a project to the Cloud (https://calculator.aws/#/addService)
                            o AWS Pricing Calculator:  to calculate the cost of running a specific AWS infrastructure


                      AWS Resource Tags:  they are Metadata that I can assign to any AWS resource to help modelling the costs.
                                          because cost reports (ex AWS Cost Explorer) can be groupped by tags.

                      AWS Organisations:  AWS allows to create a 'master' account (AWS Organisation) which can manage
                                          multiple nested different accounts.

                _________________________________________________________
                    - Support (AWS Infrastructure)

                         o AWS Support                      provided in different tiers (based on need & scope)
                         o AWS Personal Health Dashboard    provides alerts & remediation guidance when AWS is experiencing events which may impact my infrastructure
                         o AWS Trusted Advisor              automated tool to check my AWS usage against best practices
                                                                       - Cost Optimisation
                                                                       - Performance
                                                                       - Security
                                                                       - Fault Tolerance
                                                                       - Service Limits


                         o AWS Support Plam Tiers vary in:
                              - Communication Method (email or phone call)
                              - Response Time
                              - Cost
                              - Type of Guidance Offered

                           BASIC SUPPORT   - No Monthly Cost: access to Tusted Advisor (7 core checks) & Personal Health Dashboard
                           AWS DEVELOPER  SUPPORT    Business hours email support   ($29/month)   (1 max email contact (the one registered))
                           AWS BUSINESS   SUPPORR    24x7 phone & email support     ($100/month)    Tusted Advisor full set of checks | 24x7 phone/chat/email to support Engineer | unlimited contacts | support 3rd party SW
                           AWS ENTERPRICE SUPPORR    designed Technical Account Manager (TAM) / concierge support team ($15.000/month)


                                                                               S U P P O R T    R E S P O N S E     T I M E

                                                                                 DEVELOPER            BUSINESS            ENTERPRICE
            General question              ---> General Guidance                   24 Business h        24 h                  24 h
            System with some problems     ---> System Impaired                    12    "     h        12 h                  12 h
            Live system with some problems---> Production System Impaired                               4 h                   4 h
            Live system down completely   ---> Production system down                                   1 h                   1 h
                                               Business-Critical System Down                                                 15 min



                         o Helps for AWS from
                                 AWS Quick Starts
                                 AWS Partner Network Consulting Partners   (3rd party contractors certified)
                                 AWS Professional Services


_________________________________________________________
              2/4   Understand AWS Core Services
                _________________________________________________________
                    - Interacting with AWS

                        - AWS Console
                        - AWS Cli
                        - AWS SDK  (available for different programming languages)

                        Currently there are 150+ AWS services

                        . I login as (root) or (iam) <-- better
                        . I select a region
                        . I select the service I want       NB. for some services (ex Route 53) the region DOESN'T matter
                                                                (it's specified as 'Global')
                                                                as they are GLOBAL services


                        . From "my user" in the right-up menu, I select "My credentials"
                          to create 1 Access Key:
                                     Access Key ID:       AKAIAJ.....2TA
                                     Secret Access Key:   sNah1Chlr1Q......................T4A/F

                          which I can use to configure 1 profile:

                                  $ aws configure --profile test1

                                   AWS Access KEY ID [None]: AKAIAJ.....2TA
                                   AWS Secret Access Key [None]: sNah1Chlr1Q......................T4A/F
                                   Defult region name [None]: us-east-1
                                   Default output format [None]: json
                _________________________________________________________
                    - Compute Services

                        - They are the Virtual Machines (EC2) to manage workloads  (ex. web FE / DB / ....)

                        o EC2
                        o Elastic Beanstalk     (platform for scaling and deploying web services)
                        o Lambda

                            ________________
                            o EC2
                                   - Instance Types
                                                                processor / memory / storage type     (cannot be changes without downtime)

                                                                . General purpose
                                                                . Compute, memory, storage optimised
                                                                . Accelerated computing

                                   - Root Device Type
                                                                . Instance Store (ephemeral storage that is physically attached to the host where the VM is running)
                                                                . Elastic Block Store (EBS) (persistent storage, separate from the host/VM) <--- to always prefer
                                   - Amazon Machine Image (AMI)
                                                                . Template for EC2 instance including (os/ config/ data)
                                                                . Can be shared among AWS accounts
                                   - Purchase Options
                                                                . On Demand    expensive, I buy now to use now
                                                                . Reserved     discount over on-demand if I commit to a specific period of time
                                                                                     - Standard       (all upfront / partial up-front / No upfront)
                                                                                     - Convertible    (allows to change during the contract (years) period)
                                                                                     - Scheduled      (contract in specific period of time)
                                                                . Saving Plans   Similar to Reserved, but I cannot reserve Capacitay
                                                                                 (useful to run Lambda or Fargate)
                                                                . Spot           Spot-price like stock exchange values.
                                                                . Dedicated Host
                            ________________
                            o Elastic Beanstalk     (platform for scaling and deploying web services)
                                                    It allows to deploy an app on EC2s
                                                    without needing to go step by step.
                                                    It has less customisation than managing the EC2 directly
                                                    but with its set of main default config, can let me forget about this level.

                                                    - automate the process of deploying and scaling workloads on EC2 (PaaS)

                                                    - Handles
                                                              provisioning (deployment)
                                                              load balancing/
                                                              scaling/
                                                              monitoring/
                                                              EC2 Customisation/

                                                    - Support specific set of technologies
                                                               Java
                                                               .Net
                                                               PHP
                                                               Node
                                                               Python
                                                               Ruby
                                                               Go
                                                               Docker  <---- via Doker I can extned to more stuff (than the above)

                                                    - Only pay for the services that I leverage

                                o Ex to deploy a prepared Node.js app (an artefact .zip)
                                  form AWS console/Elastic Beanstalk, I just "Upload" the app and it will be running in seconds
                                  with a link to access is publically, menu to see the logs, the monitoring, to add alarmrs ....
                            ________________
                            o Lambda
                                   - I can run code wihout povisioning infrastructure
                                   - it's the considered the PRIMARY service when thinking of SERVERLESS architecture
                                   - I'm charged for the execution time
                                   - I can chose to have 128 MB  or up to 3.008 MB of ram
                                   - it's integrated inside AWS (so I can call S3 or other services without issues)
                                   - it's possible to write event-driven code (according to events received from AWS)


                _________________________________________________________
                    - Content and Network Delivery Services

                        o Amazon VPC & Direct Connect
                        o Riute 53
                        o Elastic Load Balancer (ELB)
                        o Cloud Frond & API Gateway
                        o AWS Global Accelerator

                            ________________
                            o Amazon VPC & Direct Connect
                                   - Virtual Private Cloud (VPC)   it's my private slice of the cloud
                                                                   my private network.

                                                                        - Enable virtual networks in AWS  (both IPv4/6)
                                                                          (this means:
                                                                              IP address range
                                                                              Subnets
                                                                                    - public
                                                                                    - private (NAT)
                                                                              Route table
                                                                              Network Gateways)

                                                                   NB. I can have more VPC connected together

                                   - AWS Direct Connect   it allows to establish a dedicated network connection from my data center to AWS
                            ________________
                            o Riute 53
                                   - Domain name Service  (DNS)
                                               as per DNS, a change might take hours to propagate
                                   - Global (among any region)
                                   - Highly available
                                               I can configure a fail-over route, so that if my server X in America
                                               goes down, traffic will be routed to server Y in Argentina
                                               (again, R.53 is global)
                            ________________
                            o Elastic Load Balancer (ELB)

                                   - distributes traffic across more servers
                                   - Integrates with (EC2/ ECS/ Lambda)
                                   - Supportis + AZ in a region
                                   - Classic LB / Application (ALB) or Network (NLB)

                                         Vertical Scaling       I move to a bigger EC2 (ex micro --> xlarge)
                                                                the problem is that I have downtime (shutting down and booting)

                                         Horizontal Scaling     I use the ELB to distribute the load

                            ________________
                            o Cloud Frond & API Gateway
                                   - Cloud Frond          Content Delivery Network (CDN)

                                                        . relies on the edge locations
                                                        . includes security features:
                                                                    AWS Shield (for DDoS)
                                                                    WAF
                                   - API Gateway        . Fully managed API-management service
                                                        . provides monitoring and metrics on API calls
                                                        . support both VPC and on-prem private application

                            ________________
                            o AWS Global Accelerator
                                   - network service that sends my user's traffic through AWS
                                     improving performance by up to 60%

                                     Utilises IP that route to edge locations  (which are nearer --> less latency)
                                     Can route to many AWS resources:
                                                 Load Balancers  (NLB / ALB)
                                                 EC2
                                     It's useful when:
                                                 traffic is not HTTP (ex UDP/ VOIP/ ...)
                                                 static IP (not via DNS)
                                                 Instant fail-over

                _________________________________________________________
                    - File Storage Services
                            ________________
                            o AWS S3  (Simple Storage Service)

                                      - in S3 files are objects in buckets
                                      - S3 stores data across multiple AZ
                                      - S3 enables URL access to files
                                                            When I create the bucket I set it as public (and I confirm that it's ok to the warning)
                                                            I turn on the read permission of every file that I want to be publicaly accessible
                                      - S3 can serve a statis website
                                                            As above, I create the bucket as public
                                                            I provide an index.html (whose read permission I open );
                                      - provides more storage CLASSES for my data:
                                                            S3-Standard:   the default. It's for frequent accessed data
                                                            S3-Intelligent-tiering: automatically moves the data to the correct class based on usage
                                                            S3-Standard-IA: (Infrequent Access) for data not accessed frequently (still accessible across + AZ)
                                                                            (less cost with same resilience)
                                                            S3-One-Zone-IA: (Infrequent Access) stored/accessible in 1 AZ only   (even less cost (but less resilience))

                                    S3 Transfer Acceleration:  feature that can be enabled PER BUCKET
                                                               to otimise the upload using Edge locat. (Cloudfront)
                            ________________
                            o AWS S3 Glacier
                                    for storing data which don't require frequent access
                                    (ex receipts from customers. Doc that I mjst keep for example 1 year
                                        but usually I don't need to access frequently).

                                    I pay for num of GB retrieved

                                    To access these data I can opt for quick access or
                                    for access at specified "retrieval times" (so not immediately but cheaper)

                                                             S3 Glacier            S3 Galcier Deep Archive
                                                          __________________________________________________
                                   minimum keep time           3 months                   6 months
                                   retrieve time               min or hours                hours
                                   cheaper than S3             5 times                    23 times


                            ________________
                            o AWS Elastic Block Store  (EBS)

                                  - it's a storage block designed to be connected to 1 EC2
                                  - it can scale up to petabites of data
                                  - support different volume types
                                                . General purpose SSD           general workload
                                                . Provisioned IOPS SSD          high performance volumes
                                                . Throughuput optimized HDD     frequently accessed data
                                                . Cold HHD                      non frequently accessed
                                  - can have encryption
                                  - spans + AZ
                                  - supports tacking spashot of my data.

                            ________________
                            o AWS Elastic File System  (EFS)
                                    It's a fully managed NETWORK file system with
                                    most of the features of EBS (+ AZ/ petabite)

                                    While EBS can be connected to only 1 EC2
                                    EFS, as a NETWORK file system, can be mounted on + EC2 ( and even across + AZ)

                                    EBS supports only Linux

                                    FSX is the solution for Windows:
                                             - Fully managed native Windos File System:
                                                          . SMB support
                                                          . Acrive Directory
                                                          . Windows NTFS
                            ________________
                            o AWS Snowball
                                    Service to physically migrate petabyte of data to AWS

                                    A device is delivered by AWS.
                                    I connect the device to my network and I copy data onto it
                                    The device is returned by local carrier
                                    AWS receives and loads my data into S3
                            ________________
                            o AWS Snowmobile
                                    Service to physically migrate exabyte of data to AWS

                                    Same of Snowball, but a ruggedised shipping container
                                    is delivered to my address.

                _________________________________________________________
                    - DB Seervices and Utilities
                            ________________
                            o Amazon RDS   (Relational Database Service)

                                   . Fully managed RDS (patch / backup / recovery)
                                   . + AZ
                                   . inside 1 VPC
                                   . supports SSD & IOPS SSD
                                   . MySQL / PostgresSQL / MariaDB / Oracle / Amazon Aurora

                            ________________
                            o Amazon Aurora
                                   . (MySQL & PostgresSQL)-compatible RDS built for the cloud
                            ________________
                            o Amazon DynamoDB
                                   . Fully managed NoSQL DB
                                   . provides both key-value and document DB
                                   . enables extremely low tanecy and virtually any scale
                                   . auto scaled based on configuration
                                   . Offers in-memory cache (DynamoDB Accelerator (DAX))
                                   . Can handle
                                             - 10 trillion requests/day
                                             - 20 millions requests/sec
                            ________________
                            o Amazon Elasticach
                                   . Fully managed in-memory DB
                                   . supports both Redis & Memcached

                                Common use cases:
                                        . manage a DB layer cache
                                        . manage sessions
                            ________________
                            o Amazon Redshift
                                   . Scalable data warehouse service
                                   . Support petabyte warehousing of data
                                   . offers encryption
                                   . with 'Redshift Spectrum' I can query exabite of data from S3
                            ________________
                            o AWS Database Migration Service  (DMS)
                                   . I can move my onprem DB to AWS
                                   . it supports 1-time and continual migration of data
                                   . I only pay for the actual compute leverage used in the process
                _________________________________________________________
                    - App Integration Services
                            ________________
                            o Amazon SNS    (Simple Notification Service)

                                   . Fully managed messaging service
                                   . It works like kafka: I can organise my info per topics
                                     and I can have pub/sub  (publishers-producers / subscribers-consumers)
                                   . support SMS/email

                            ________________
                            o Amazon SQS
                                   . Fully managed message queue service
                                   . up to 256 KB payload
                                   . messages stored up to 14 days (2 weeks)
                            ________________
                            o AWS Step Functions
                                   . supports serverless architecture
                                   . charged per state transition
                                   . Workflow is defined using "Amazon States Language"


                _________________________________________________________
                    - Management and Governance Services
                            ________________
                           o AWS CloudTrail                                                                      |
                                  . it tracks ALL the actions I do in AWS                                        |
                                    (in the console, via CLI or SDK)                                             |
                                  . These logs are in the region they occur                                      | audit trail
                                  . These logs are stored in S3                                                  |
                                  . So if it's turned on it costs money                                          |
                           ________________
                           o Amazon CloudWatch                                                                   |
                                  . monitoring and management service                                            |
                                  . collects logs, metrcics, events from AWS services                            |
                                  . enables ALARMS based on metrics                                              |
                                  . provides visualtsation for metrcis                                           |
                                  . I can create my custom dashboards                                            | track
                           ________________                                                                      |
                           o AWS Config                                                                          |
                                  . keeps monitored my AWS config                                                |
                                  . keeps an history of these configurations                                     |
                                  . works against rules that I can customise                                     |
                                  . this means it can act remediation steps if a config becomes out of my rules  |
                                  . works with AWS Organisations, so cross-account/cross-region                  |
                           ________________
                           o AWS Systems Manager                                                                 |
                                  . I can view operational data of multiple AWS services                         |
                                  . I can automate operational tasks across my AWS resources                     | operational insights
                                  . I has multiple tools which I can use                                         |
                                  . it can store parameters securely                                             |
                           ________________
                           o AWS CloudFormation                                                                  |
                                  . it allows to provision my infrastructure via TEMPLATES (YAML or JSON)        |
                                    (infrastructure as code)                                                     | Automation
                                  . this allows to skip both the AWS console or CLI scripts                      |
                                  . manages the dependency between resources                                     |
                           ________________                                                                      |
                           o AWS OpsWorks
                                  . it provides managed instances of Chef and Puppet                             |
                                  . they can manage the configuration that I want on my servers                  |
                                  . it can work in a Hybrid architecture (both cloud & on-prem)                  |
                                  . it gives 3 services:                                                         |
                                               AWS OpsWorks for Chef Automate                                    |
                                               AWS OpsWorks for Puppet Enterprise                                |
                                               AWS OpsWorks Stacks                                               |
                           ________________                                                                      |
                           o AWS Control Tower
                                  . to create a multi-account environment (used by AWS Organisations)            |
                                  . centralises users across all AWS accounts                                    |
                                  . allows to create accounts based on templates                                 | AWS Organisations leveraging
                                  . allows 'Guardrails' on accounts to keep track that there are                 |
                                    no exception in all the accounts|                                            |
                                  . provides a unified dashboard                                                 |

_________________________________________________________
              3/4   Introduction to Security & Architecture on AWS
_________________________________________________________
              4/4   AWS Ceryified Cloud Practitioner Exam Prep
_________________________________________________________











