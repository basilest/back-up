             INFRASTRUCTE AS CODE = IAC

             binary: $ terraform        it comes as a single zip (to put in a dir found by $PATH)



             |  Usage: terraform [-version] [-help] <command> [args]
             |
             |  The available commands for execution are listed below.
             |  The most common, useful commands are shown first, followed by
             |  less common or more advanced commands. If you're just getting
             |  started with Terraform, stick with the common commands. For the
             |  other commands, please read the help and docs before usage.
             |
             |  Common commands:
           1 |      apply              Builds or changes infrastructure
           2 |      console            Interactive console for Terraform interpolations
           3 |      destroy            Destroy Terraform-managed infrastructure
           4 |      env                Workspace management
           5 |      fmt                Rewrites config files to canonical format
           6 |      get                Download and install modules for the configuration
           7 |      graph              Create a visual graph of Terraform resources
           8 |      import             Import existing infrastructure into Terraform
           9 |      init               Initialize a Terraform working directory
          10 |      output             Read an output from a state file
          11 |      plan               Generate and show an execution plan
          12 |      providers          Prints a tree of the providers used in the configuration
          13 |      refresh            Update local state file against real resources
          14 |      show               Inspect Terraform state or plan
          15 |      taint              Manually mark a resource for recreation
          16 |      untaint            Manually unmark a resource as tainted
          17 |      validate           Validates the Terraform files
          18 |      version            Prints the Terraform version
          19 |      workspace          Workspace management
             |
             |  All other commands:
             |      0.12upgrade        Rewrites pre-0.12 module source code for v0.12
             |      debug              Debug output management (experimental)
             |      force-unlock       Manually unlock the terraform state
             |      push               Obsolete command for Terraform Enterprise legacy (v1)
             |      state              Advanced state management


  chtf                               (Homebrew Casks) Terraform version switcher
                                     to install/switch multiple Terraform versions (since 0.6.6) at the same time,
                                     [chtf installs the specified version automatically if needed].

                                     chtf                 with no args shows all the versions
                                     chtf -V --version
                                     chtf system          switch to OS versio (no

  execution plan
  Infrastructure as code             high-level configuration syntax
  graph                              Terraform builds a graph of all your resources
                                     This means that when running 'terraform apply'
                                     terraform takes care of usual problem of finding the

                                             1. dependencies between resources
                                             2. order to execute


  automates changes                  avoiding many possible human errors.


  Configuration files                extension: *.tf   (or .tf.json when using JSON)
                                     structure: tree of modules.
                                                A root module, where evaluation begins,
                                                Child modules created when one module calls another.

                                          - module: ALL .tf/.tf.json files in a dir
                                          - a ROOT module: all .tf/.tf.json files in the CURRENT dir

                                          SIMPLEST CONFIG: 1 .tf file in cur dir

                                     format: its own configuration language (default)  or JSON.
                                             (Infrastructure as code: the proprietary language
                                                                      is then more powerful than JSON)
                                     format specs:

                                       <BLOCK TYPE> "<BLOCK LABEL>"... "<BLOCK LABEL>" {    like     int i  <--"TYPE" & "name" var
                                         # Block body
                                         <IDENTIFIER> = <EXPRESSION> # Argument
                                       }
                                                        _________________________________________.
                                     example:          /                                         |
                                            provider "aws" {                                     |
             ~/.aws/credentials  ------->     profile    = "default"              # BLOCK 1      |
                                              region     = "us-east-1"                           |
                                            }                                                    |
                                                        ____ format xxx _ nnnn  (xxx name of provider)
                                                       /
                                            resource "aws_instance" "example" {   # BLOCK 2
                                              ami           = "ami-2757f631"
                                              instance_type = "t2.micro"
                                            }


                                            The "name" is used to refer to this resource from elsewhere in the same Terraform module,
                                            but has no significance outside of the module.


terraform init                       the 1st command to run
                                     . will automatically download and install all the required providers.





terraform.tfstate                   This state file is extremely important;
                                    it keeps track of the IDs of created resources so that
                                    Terraform knows.
                                    This file must be saved and distributed to anyone who might run Terraform.


terraform show                      to see current state.


terraform apply                     to apply changes   (I must type 'yes') so if I don't type yes
                                    the apply doesn't change

terraform destroy


PROVIDER "aws"
                      . ~/.aws/credentials          stores the profiles

                      . aws cli                     (needs Python)

                      . aws configure


Provisioners
                      resource "aws_instance" "example" {
                          ami           = "ami-b374d5a5"
                          instance_type = "t2.micro"

                          provisioner "local-exec" {   # local-exec  is the provisioner to run cmds on local host
                            command = "echo ${aws_instance.example.public_ip} > ip_address.txt"
                          }
                      }


                      Provisioners are mainly run when a resource is CREATED.
                      They are not a replacement for configuration management
                      and are instead just meant as a way to bootstrap a server.

                      Other Provisioners are run when a resource is DESTROYED
                      to clean up.



TAINTED resources     Are the resources failed during the provisioning.
                      Terraform detroys/removes these resources
                      but it doesn't rollback (as it will be against the PLAN
                      where there isn't written anything about DESTROYing)


VARIABLES                 ________ 'variable' is a keyword
                         /
                      variable "region" {
                         default = "us-east-1"                file  variables.tf
                      }

                      ------------------------------
                      provider "aws" {
                         region     = var.region       <--- usage
                      }



          - file terraform.tfvars      ex. region = "us-east-2"
                 (default name)

          - Command-line flags         ex. terraform apply  -var 'region=us-east-2'
                                                            ^^^^
                                       ex. terraform apply  -var-file=dddd/dddd/fff.tf
                                                            ^^^^^^^^^
                                                                    (when using not a default terraform.tfvars)

          - ENV vars                   ex. TF_VAR_nnnnn   TF_VAR_ +  name of the ENV var
                                           (ex. TF_VAR_HOME)


          - UI on apply                running 'apply' with missing variables, they will be asked intercatively.

                                       Only supported for STRING variables.
                                       LIST and MAP vars must be populated via one of the other mechanisms.


          LIST VARs                    variable "cidrs" { default = [] }     # implicit assign.  ex   cidrs = [ "10.0.0.0/16", "10.1.0.0/16" ]
                                       variable "cidrs" { type = list }      # explicit


          MAP VARs                     hash (like a normal json with '=' instead of ':')
                                       variable "amis" {                                resource "aws_instance" "example" {
                                          type = "map"                                    ami        = var.amis[var.region]
                                          default = {                                     inst_type  = "t2.micro" ^^^^^^^^
                                            "us-east-1" = "ami-b374d5a5"                }
                                            "us-west-2" = "ami-4b32be2b"
                                          }
                                       }

                                      I can use MAP also on the command line style:
                                      ex.    terraform apply -var 'amis={ us-east-1 = "foo", us-west-2 = "bar" }'




          OUTPUT VARs                  I can decide what to log (OUTPUT vars) of the hundreds I have.
                                       These values are logged when running "terraform apply"

                                       They can also be QUERIED with the command

                                       "terraform output"

                                       they are defined in the shape:

                                                    ______ "output" is a keyword
                                                   /
                                                output "ip" {
                                                  value = aws_eip.ip.public_ip     # also "value" is expected.
                                                }                                    which is usually in the 'interpolation' format
                                                                                     being a value known at runtime





Terraform Cloud           Is the commercial solution to store my 'Terraform state' file in a remote space (called "backend")
                          sharable with other team's members. (to do, versioning, audit, peer review....)


                          terraform {                                        when running  "terraform init"
                                  backend "remote" {                ----->   and answering "yes"
                                    organization = "Cloud-Org"               the state is copied to Terraform Cloud

                                    workspaces {                             "terraform apply"  will check (like git pull)
                                      name = "Dev-QA"                        the remote and if there is nothing to do
                                    }                                        will output
                                  }                                              No changes. Infrastructure is up-to-date.
                                }
                                }                                            REMOVING THE "backend" BLOCK FROM THE CONFIG FILE
                                                                             AND RUNNING "terraform init" IT WILL BE
                                                                             MOVED BACK LOCALLY FROM Terraform Cloud









-------------------------------------------------------------------

      PROVISION INFRASTRUCTURE THROUGH CODE

                       - benefit:
                                 . predictable envs
                                   (they are PREDICTABLE on what I'll get)
                                 . automate deployment  (manual processes are the enemy)
                                 . repeatable process
                                 . reusable components (don't repeat yourself)
                                 . document architecture



      CORE CONCEPTS:
                        1. Defined in CODE
                        2. Stored in Source Code:   (gitHub) / contribute in parallel
                        3. Declarative (not  Imperative)


          Imperative:                                  Declarative

          #make me a taco                               #make me a taco

          #retrieve 1st what you need                   I case use a CONFIGURATION language
             get shell
             get beans                                     ____ of type 'food'____ I give the name "bean-taco"
             get chees                                    /                  /
             get lettuce                                food  taco  "bean-taco"    {
             get salsa                                          \___ of subtype taco

          #2nd instruct how to proceed                       ingredients = [
                                                                "beans", "cheese", "lettuce", "salsa"
             put beans in shell                              ]
             put cheese on beans
             put lettuce on cheese                      }
             put salsa on lettuce

                                                                In the Declarative I don't specify
                                                                the procedures to
                                                                           - get
                                                                           - and assemble
                                                                because I rely on a provisioner
                                                                which knows how to do through a default way.
                                                                I can change/customise the default
                                                                adding more parameters in the configuration

                        4. Idempotent + Consistent : Idempotent: every time I do something the result will be the same
                                                     Consistent: if I already have what I wanted Terraform to do
                                                                 then Terraform will not change/do

                                                                 ex. I ask "make me a taco" a 2nd time
                                                                     Terraform will answer: no change you already have 1.



                        5. Push vs Pull  :
                                           - Terraform is a PUSH type: I push the configuration down to the target

                                           - PULL ways: the target pulls down from me the configuration
                                             (ex. an agent on a server pulls down the configuration on a regular basis)
-------------------------------------------------------------------


   4 componenets of terraform

       - terraform is an exacutable (written in go). 1 single file with no other libraries to put around

       - terraform files (.cfg) they contain the variables/configuration to deploy

       - terraform providers/plugins: they extend/implement the different features of terraform

       - terraform state: it contains the current state of my target



-------------------------------------------------------------------
    1  variables
                             variable "aws_access_key" {}
                             variable "aws_secret_key" {}       ___________________.
                                                                                   |
                             variable "aws_region" {                               |
                                     default = "us-east-1"                         |
                             }                                                     |
                                                                                   |
-------------------------------------------------------------------                |
    2  providers/plugins                                                           |
                             provider "aws" {                                      |
                                   access_key = "var.access_key"   <---------I use them here
                                   access_key = "var.secret_key"
                                   region = "var.aws_region"
                             }


             . here I'm using the provider/plugin "aws"
             . to use a certain provider/plugin  I must set its parameters

-------------------------------------------------------------------
    3  Data source                                          I retrieved data out of my module (?)
                             data "aws_ami" "alx"  {                                   target (?)
                                most_recent = true
                                owners = ["amazon"]
                                filter  {
                                         name = "name"
                                         values = ["amzn-ami-hvm*"]
                                }

                                filter  {
                                         name = "virtualization-type"
                                         values = ["hvm"]
                                }
                             }


-------------------------------------------------------------------
    4  Resource
                             resource "aws_instance" "ex" {
                                ami = "data.aws_ami.alx.id"
                                instance_type = "t2.micro"
                             }

-------------------------------------------------------------------
    5  Output
                             output "aws_public_ip" {
                                value =
                                "aws_instance.ex.public_dns"
                             }



-------------------------------------------------------------------
    TERRAFORM STATE

         . a file which stores the state
                         . Local file (by default)
                         . Remote (AWS / Azure/ NFS/ Terraform Cloud)
         . the format is JSON  (to not edit.)
         . It can be 'Locked' by Terraform while an operation is ongoing


    . Workspaces:  every Workspace has its own STATE file



    TERRAFORM STATE JSON FORMAT:

    {
        "version": 4,                          # of the state file
        "terraform_version": "0.12.5",         # to not use with older versions
        "serial":30,                           # incremented on every change of the STATE file
        "lineage":"",
        "outputs:{},                           # info when apply completed
        "resouces":[]
    }
-------------------------------------------------------------------
    1st RULE OF TERRAFORM

           manage always with Terraform

           (never change manually)
-------------------------------------------------------------------
    TERRAFORM PLANNING

           1. Inspect state
           2. Dependency graph
           3. Addition / Updates / Deletions
           4. Parallel execution
           5. Save the plan
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
    TERRAFORM STATE
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------
-------------------------------------------------------------------





