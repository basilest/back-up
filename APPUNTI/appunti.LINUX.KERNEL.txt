   ftp://ftp.ora.com/pub/examples/linux/drivers/



--------------------------------------------------  compile another the kernel in a free dir

   1. goto:   https://www.kernel.org/pub/linux/kernel/v3.0/

   2. downloaded : 
                 linux-3.18.9.tar.gz     07-Mar-2015 13:23  117M  

   3. make a clean dir: ~/kernel    + ~/kernel/build  

   4. unzip linux-3.18.9.tar.gz inside ~/kernel

   5. write this funct in .bashrc
             function kb {
                 mkdir -p ~/kernel/build/$(basename $(pwd))
                 echo     ~/kernel/build/$(basename $(pwd))
             }
   6. cd linux-3.18.9
      make distclean
      make defconfig O=`kb`
      make O=`kb`

   7. here the kernel image:   ~/kernel/linux-3.18.9/arch/x86/boot/bzImage
      the size is 5,6M 

-------------------------------------------------- the kernel

    kernel space:   the space in RAM where only kernel can do untill the shutdown
    user   space:   the space in RAM shared by the applications and different users. 



-------------------------------------------------- devices in linux

   /dev   the are special files in /dev
          /dev/bus/usb...            ex. USB are
          /dev/disk/by-label.        HD partitions      
                 ex: BIOS_RVY  Data  OS_Install  SYSTEM  WinRE\x20tools

   /boot  where is stored the kernel which boots at startup
          file vmlinux   
               vmlinuxz (z is compressed) 
               bzImage  (also compressed)

    
   /kernel dirs:
                   1)   187M  arch/                : contains all the architectures and 1 file Kconfig to configure the make
                   2)   3,8M  block/               : block device drivers
                   3)   20K   COPYING              : GPL2 licence
                   4)   96K   CREDITS              :
                   5)   4,8M  crypto/              : code for encryption algorithms
                   6)   29M   Documentation/       :
                   7)   390M  drivers/             : code for the driver
                                                     The xen folder contains code for the Xen hypervisor
                                                     the two OS are managing the hardware together and the same time
                   8)   6,2M  firmware/            : code to  understand signals from devices.
                   9)   58M   fs/                  : each filesystem's code is in its own folder (ext4)
                  10)   34M   include/             : *.h
                  11)   764K  init/                : main.c file is the core of the kernel.
                  12)   980K  ipc/                 : Inter-Process Communication. (manage kill)
                                                     Pipes used the IPC. They tell the kernel to place the output data on 
                                                     a physical page on in memory. The program or command receiving the data 
                                                     is given a pointer to the page on memory.
                  13)   4,0K  Kbuild               :
                  14)   4,0K  Kconfig              :
                  15)   20M   kernel/              : code  of the kernel itself
                  16)   7,2M  lib/                 : code for the kernel's library
                  17)   288K  MAINTAINERS          :
                  18)   56K   Makefile             : to compile
                  19)   7,1M  mm/                  : code for Memory Management:  Memory is not randomly placed on the RAM. 
                                                     kernel places the data on the RAM carefully. 
                                                     does not overwrite any memory that is being used or 
                                                     that holds important data.
                  20)   12K   modules.builtin      :
                  21)   4,0K  modules.order        :
                  22)   424K  Module.symvers       :
                  23)   60M   net/                 : code for all the protocols IPv6 Ethernet, wifi, bluetooth, bridges and DNS
                  24)   20K   README               : how to compile
                  25)   8,0K  REPORTING-BUGS       :
                  26)   248K  samples/             : if you want to contibute
                  27)   3,9M  scripts/             : the script to compile
                  28)   5,5M  security/            : the code for the security of the kernel
                  29)   35M   sound/               : code for sound drivers
                  30)   3,0M  System.map           :
                  31)   8,3M  tools/               : code for tools used by the kernel
                  32)   88K   usr/                 : where bzImage or vmlinuz
                  33)   328K  virt/                : code for virtualization: Linux is Host others are Guest Os
                  34)   17M   vmlinux*             :
                  35)   25M   vmlinux.o            :


   drives
32K     accessibility/       72K     fmc/                2,7M    mfd/                68K     reset/         1,5M    watchdog/
14M     acpi/                1,3M    gpio/               3,1M    misc/               44K     rpmsg/         788K    xen/
40K     amba/                38M     gpu/                2,3M    mmc/                2,1M    rtc/           68K     zorro/
4,3M    ata/                 4,0M    hid/                8,0K    modules.builtin     3,7M    s390/
1,3M    atm/                 228K    hsi/                4,0K    modules.order       148K    sbus/
48K     auxdisplay/          240K    hv/                 3,8M    mtd/                29M     scsi/
2,8M    base/                3,8M    hwmon/              77M     net/                40K     sfi/
216K    bcma/                52K     hwspinlock/         524K    nfc/                184K    sh/
3,8M    block/               2,2M    i2c/                128K    ntb/                32K     sn/
388K    bluetooth/           1,3M    ide/                44K     nubus/              260K    soc/
8,5M    built                64K     idle/               312K    of/                 1,5M    spi/
192K    bus/                 2,1M    iio/                104K    oprofile/           52K     spmi/
272K    cdrom/               8,1M    infiniband/         400K    parisc/             284K    ssb/
3,9M    char/                6,3M    input/              404K    parport/            30M     staging/
3,7M    clk/                 1,7M    iommu/              4,5M    pci/                1,8M    target/
564K    clocksource/         112K    ipack/              1,7M    pcmcia/             20K     tc/
236K    connector/           468K    irqchip/            384K    phy/                1,1M    thermal/
1,5M    cpufreq/             6,0M    isdn/               4,9M    pinctrl/            144K    thunderbolt/
508K    cpuidle/             4,0K    Kconfig             1,6M    platform/           8,1M    tty/
2,3M    crypto/              812K    leds/               956K    pnp/                104K    uio/
28K     dca/                 208K    lguest/             1,6M    power/              18M     usb/
128K    devfreq/             812K    macintosh/          72K     powercap/           444K    uwb/
28K     dio/                 56K     mailbox/            280K    pps/                212K    vfio/
2,4M    dma/                 8,0K    Makefile            168K    ps3/                196K    vhost/
328K    dma                  36K     mcb/                276K    ptp/                14M     video/
1,3M    edac/                4,5M    md/                 344K    pwm/                36K     virt/
92K     eisa/                33M     media/              328K    rapidio/            112K    virtio/
260K    extcon/              168K    memory/             128K    ras/                32K     vlynq/
484K    firewire/            280K    memstick/           1,7M    regulator/          292K    vme/
944K    firmware/            1,6M    message/            120K    remoteproc/         356K    w1/
  













   Kernel:  2.6.10

   1/18  Introduction to Device Drivers
   ===========================================

  modularity:   each devide driver can be "plugged in” at runtime
  policy-free:  split into two parts: 
                   “what capabilities are to be provided” (the mechanism) : the driver
                   “how those capabilities can be used”   (the policy): un upper layer

  If a code is written insie the kernel, it goes in the same block of kernel space is RAM
  it's faster, but kernel requires more RAM and more boot time.
  It the code is a separate module, it can be loaded in RAM only if needed: less boot time,
  less RAM space, but kernel and module are in different space in RAM, so it suffers more on
  performance

       Process management:    - create / detrsy processes
                              - make them communicate: signals, pipes, or interprocess communication
                              - abstarct on 1 CPU, more processes

       Memory management:     - set of function calls, ranging from the simple malloc/free 
                                to much more comple

       Filesystems:           - everything is 1 file
                                multiple filesystem TYPES, different ways of organizing data
                                on the physical medium (formatted ext3, FAT, ...)

       Device control:        - The kernel must have embedded specific CODE for any device

       Networking:            - all the routing and address resolution issues are implemented within the kernel


  Loadable Modules:  can attach and unmount at RUNTIME (through a syscall 'init_module' which only supeuser can call
                                                        or techincally one who has 'CAP_SYS_MODULE')
                     A module is a piece of code
                     (not linked into a complete executable) that can be dynamically linked to the running kernel 
                     by the 
                                 insmod  (or better: modprobe)
                     program and can be unlinked by the 
                                 rmmod 
                     program.
                     To see the running module: lsmod

                     For SECURITY resons, it is:
                        - possible to compile the lernel itself with 'CLOSE' the possibility to load new modules
                        - disable loading of modules at runtime also for normal compiled kernel.


  3 Classes of Modules: 
                    Character devices:   a stream of bytes like a normal file:
                                         They implement at least the sys call: 
                                                    open, 
                                                    close, 
                                                    read, 
                                                    write
                                         The only diff respect a normal file, is that seldom there is
                                         something like a 'seek' (to go to and fro), but access is most
                                         ofetn sequentially.

                                                    examples: /dev/console   
                                                              /dev/ttyS0
                                                              /dev/lp0

                    Block devices:       Block drivers have a completely different interface TO THE KERNEL 
                                         than char drivers. But not to the user/application that sees them as a char device.
                                         Block devices can only handle I/O operations that transfer one or more whole 
                                         blockblocks, which are usually 512 bytes (or a larger).

                                                    they also stay in /dev

                    Network devices:    is in charge of sending and receiving data packets.
                                        Many network connections
                                        (especially those using TCP) are stream-oriented, but network devices are, usu-
                                        ally, designed around the transmission and receipt of packets. A network driver 
                                        knows nothing about individual connections; it only handles packets.

     ---------------------------------- Kernel numbers
     2.6.x   (the even versions) are STABLE
     2.7.x   (the odd  versions) NOT   (under development, they expire in some days)

   2/18  Building and Running Modules
   ===========================================
   linked to kernel obj: 2.6 modules are linked against object files found in the kernel source tree; 
                         the result is a more robust module loader, but also the requirement that those object file
                         are availble.

   Compiling the kernel: The build process for modules differs significantly from that used for user-space applications; 
                         the kernel is a large, standalone program with detailed and explicit requirements on how
                         its pieces are put together.
   
   
   
   
   
   
    ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   3/18  Char Drivers
   ===========================================


     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------


   4/18  Debugging Techniques
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   5/18  Concurrency and Race Conditions
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   6/18  Advanced Char Driver Operations
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   7/18  Time, Delays, and Deferred Work
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   8/18  Allocating Memory
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   9/18  Communicating with Hardware
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   10/18  Interrupt Handling
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   11/18  Data Types in the Kernel
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   12/18  PCI Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   13/18  USB Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   14/18  The Linux Device Model
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   15/18  Memory Mapping and DMA
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   16/18  Block Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   17/18  Network Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------



   18/18  TTY Drivers
   ===========================================

     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------
     ----------------------------------


