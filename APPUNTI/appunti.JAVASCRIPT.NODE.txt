------------------------------ WHAT IS NODE

    Node.js is a RUNTIME ENV (like Java Virtual Machine) which allows to run JS on the server.
            (it's built on Google Chrome's V8 JavaScript Engine)


    so node files are  .js      because node is not a LANGUAGE but a RUNTIME ENV. The Language is JS

    node     is the cmd on the command line to run the RUNTIME ENV executing the passed  .js:
             (the same exact thing that I do for "java MyClass"
              with the difference that java requires a compiled class (produced by javac)
              while node env uses the JIT compiler (Just-in-time) which, like for an interpreted language,
              compiles on the fly small portions of code that are just about to be executed)

        .--------------------
        |   > node   file.js
        '--------------------      or also:
                                        node <<< "a=1+3; console.log(a);"
                                        4


                          Example of a web-server listening on 8080 and serving a static page:


                          1. write   this ex1.js  file:

                              var http = require('http');

                              http.createServer(function (req, res) {
                                res.writeHead(200, {'Content-Type': 'text/html'});
                                res.end('Hello World!');
                              }).listen(8080);


                          2. node ex1.js

                          3. open the browser at   http://localhost:8080


------------------------------ MODULES   (require / exports) old     vs     'import'  ECMAScript 6 (ES6)

    require()       it's the node keyword to specify which modules to import

                    ex:
                          var http = require('http');
                                     ^^^^^^^

                    . "require" is a SYNCHRONOUS operation and will block the execution of the script
                      until the module is loaded and ready to be used.

                    . On the bright side - require() uses a caching system to ensure that modules are only loaded once,
                      With a require(), Node.js first checks to see if the module has already been loaded and cached.
                      If it has, it will return the cached version of the module rather than loading and parsing it again.

                    . require sources the entire module:          const myModule   = require('myModule');
                      To import only a specific export:           const myFunction = require('myModule').myFunction;



    require(./my-module)       I can include my own modules      (I have a file  my-module.js in the same dir where I want to use it)





    exports         to specify what is exported and so other modules can use



             ex.
                   my-module.js:                                ex1.js  which uses it:

                   exports.myDateTime = function () {            var dt = require('./my-module');  <------ not .js
                   ^^^^^^^                                                ^^^^^^^
                      return Date();                             var d = dt.myDateTime()
                   };



    import:         import is a new keyword from ES6

                    import * as myModule from 'my_module';      // import all
                    import {myFunction}  from 'my_module';      // import something only
                    import { x, y }      from './moduleA'       //   "        "      "


                    . "import" is an ASYNCHRONOUS operation, so the script will not be blocked while the module is loading.

                    . In general, "import" is preferred over "require" because it is a more modern and flexible syntax, and
                      it will eventually replace "require" in the language.




------------------------------ MODULE HTTP

        var http = require('http');

        http.createServer(function (req, res) {      <--------------- call method: 'createServer' passing a function
          res.write('Hello World!'); //write a response to the client                                       this function is a callback
          res.end(); //end the response                                                                     which will be called any time
        }).listen(8080); //the server object listens on port 8080                                           the server receives something on 8080



        http.createServer(function (req, res) {
          res.writeHead(200, {'Content-Type': 'text/html'});  <-------- add 1 header
          res.write('Hello World!');
          res.end();
        }).listen(8080);



       req         the request 1st argument passed to my callback is of type:  'http.IncomingMessage"
                   This 'http.IncomingMessage' has a field 'url'  which contains the asked url
                   so I can access it as req.url



------------------------------ MODULE URL

        var http = require('http');
        var url = require('url');     <----------------- module URL to manage the requested URL

        http.createServer(function (req, res) {
          res.writeHead(200, {'Content-Type': 'text/html'});
          var q = url.parse(req.url, true).query; <------------- it returns the URL args (ex. http://localhost:8080/?year=2017&month=July)
          var txt = q.year + " " + q.month;   // 2017 July
          res.end(txt);
        }).listen(8080);




------------------------------ MODULE File System

        var fs = require('fs')       # I can now manage the files on the file system



--------- READ

               sync / blocking example                                       async / non-blocking example
       ________________________________________________________________________________________________________________

        var data = fs.readFileSync('input.txt');                   fs.readFile('input.txt', function (err, data) {
                                                                      if (err) return console.error(err);
        console.log(data.toString());  // <-- printed 1st             console.log(data.toString());  <------- printed 2nd
        console.log("Program Ended");  // <-- printed 2nd          });

                                                                   console.log("Program Ended");  <---- printed 1st
       ________________________________________________________________________________________________________________






        http.createServer(function (req, res) {
          fs.readFile('demofile1.html', function(err, data) {
                       ^^^^^^^^^^^^^                  ^^^^
            res.writeHead(200, {'Content-Type': 'text/html'});
            res.write(data);   <------------------------------------- here used
            return res.end();
          });
        }).listen(8080);



==================  CREATE / UPDATE
          the following  functions
                        open / write / append
          can be used both for UPDATING existing files
          of for CREATING if they don't exist yet

--------- OPEN  (for writing)

        // ex.  Create a new, empty file:

        fs.open('mynewfile2.txt', 'w', function (err, file) {      2nd arg="w" for "writing".
          if (err) throw err;                                      If the file does not exist, an empty file is created.
          console.log('Saved!');
        });


--------- APPEND

        fs.appendFile('mynewfile1.txt', 'Hello content!', function (err) {
          if (err) throw err;
          console.log('Saved!');
        });



--------- WRITE

        fs.writeFile('mynewfile3.txt', 'Hello content!', function (err) {
          if (err) throw err;
          console.log('Saved!');
        });



--------- DELETE

        fs.unlink('mynewfile2.txt', function (err) {
          if (err) throw err;
          console.log('File deleted!');
        });



--------- RENAME

        fs.rename('mynewfile1.txt', 'myrenamedfile.txt', function (err) {
          if (err) throw err;
          console.log('File Renamed!');
        });




------------------------------ npm


        NPM is node's package manager


        .--------------------
        |   > npm  install xxxx          install in this dir  (ex. npm install axios)
        '--------------------
                                         . it installs module xxxx in the current dir
                                           (so
                                             - a dir tree rooted as ./node_modules/xxxx
                                             - the package.json      is updated
                                             - the package-lock.json is updated

        npm install -g npm               install globally


        -------- local vs global

                 . by default 'npm' installs in the local/current dir
                 . the modules goes into ./node_modules
                 . I can see the installed modules of ./node_modules with a simple shell 'ls | find'
                   or I can use
                              > npm ls
                 .  > npm -g ls    // to see the same by for globally installed modules
                 .  global modules in Mac OS are in /usr/local/lib/node_modules  and not in home ~

                    3 ways to know where is the "global" dir called 'prefix':

                            > npm config get prefix
                   1)         /usr/local


                   2)       ‚ùØ npm config get
                            ; "builtin" config from /usr/local/lib/node_modules/npm/npmrc

                            prefix = "/usr/local"

                            ; node bin location = /usr/local/Cellar/node/20.2.0/bin/node
                            ; node version = v20.2.0
                            ; npm local prefix = /Users/sbasile/TEST/JS/cinema-tickets/cinema-tickets-javascript
                            ; npm version = 9.6.6
                            ; cwd = /Users/sbasile/TEST/JS/cinema-tickets/cinema-tickets-javascript
                            ; HOME = /Users/sbasile
                            ; Run `npm config ls -l` to show all defaults.


                   3)       ‚ùØ npm config ls -l | grep prefix <--------------------- this is the most verbose possible output. COOL

                   node_modules will be "inside" that "prefix" dir
                   ex. in Mac OS down 1 level: /usr/local/lib/node_modules
                                                          ^^^
                   4)  probably the best way is then
                       > npm config ls -l | grep node_modules
                         ; "builtin" config from /usr/local/lib/node_modules/npm/npmrc
                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^

-------- UPDATE npm itself

    npm install npm -g
    npm install -g npm@8.19.2


-------- package.json

         . it's the metadata of my project.
         . it's always required
         . it's a json with these basic fields:  (note: "npm init" creates this)


                            {
                     1        "name": "cinema-tickets-javascript",
                     2        "description": "This is my coding implementation.",
                     3        "version": "1.0.0",
                     4        "main": "run.js",                                             // entry point of the package
                              "engines": {
                                "node": ">=16.15.1"
                              },
                              "type": "module",
                              "scripts": {
                                "test": "jest"
                              },
                              "transform": {},
                     5        "repository": {                                               // repository type and URL of the package
                                "type": "git",
                                "url": "git+https://github.com/sbasile-ch/cinema-tickets.git"
                              },
                              "author": "sbasile",
                              "license": "ISC",
                              "bugs": {
                                "url": "https://github.com/sbasile-ch/cinema-tickets/issues"
                              },
                     6        "devDependencies": {         // npm automatically installs all these dependencies in folder node_modules
                                "jest": "^29.3.1",
                                "mocha": "^10.0.0"
                              }
                            }

-------- npm init

         . it creates a first package.json
           asking interactively the values to fill in.

                 > cd && take rrr && npm init

                        package name: (rrr) stef
                        version: (1.0.0)
                        description: my description here
                        entry point: (index.js)
                        test command:
                        git repository: https://github.com/sbasile-ch/cinema-tickets.git
                        keywords:
                        author: sbasile
                        license: (ISC)
                        About to write to /Users/sbasile/rrr/package.json:

                        {
                          "name": "stef",
                          "version": "1.0.0",
                          "description": "my description here",
                          "main": "index.js",
                          "scripts": {
                            "test": "echo \"Error: no test specified\" && exit 1"
                          },
                          "repository": {
                            "type": "git",
                            "url": "git+https://github.com/sbasile-ch/cinema-tickets.git"
                          },
                          "author": "sbasile",
                          "license": "ISC",
                          "bugs": {
                            "url": "https://github.com/sbasile-ch/cinema-tickets/issues"
                          },
                          "homepage": "https://github.com/sbasile-ch/cinema-tickets#readme"
                        }


                        Is this OK? (yes) yes

-------- npm (other commands)

         . npm istall   a            install module
         . npm unistall a            uninstall
         . npm init                  create module (package.json)
         . npm update   a            update
         . npm search   a            search package name in https://search.nodejs.org/
         . npm adduser               I can create my user on npm, providing my email address and a password
         . npm publish               I publish my module


         ex:
         ‚ùØ npm search cinema
                    NAME                      | DESCRIPTION          | AUTHOR          | DATE       | VERSION  | KEYWORDS
                    cinema                    | A library to look‚Ä¶   | =kristjanmik    | 2014-01-04 | 0.1.0    |
                    tw.funique.cinema         | The video play‚Ä¶      | =zhuelly        | 2023-04-10 | 1.0.8    | player cinema funique xr vr
                    vr-cinema                 | Viewzavr-based‚Ä¶      | =pavelvasev     | 2021-11-30 | 1.0.33   |
                    tw.funique.integration.se | The video play‚Ä¶      | =zhuelly        | 2023-03-31 | 1.0.8    | player cinema funique xr vr
                    rver                      |                      |                 |            |          |
                    popular-movie-quotes      | A simple NPM‚Ä¶        | =nikhil_namal17 | 2020-02-03 | 1.2.4    | word words list array random rand movies quote quotes cinema popular movie-quot
                    LightCinematic            | Small library for‚Ä¶   | =victorga       | 2016-06-19 | 1.0.1    | animation cinematic spritesheet image sequence
                    com.nickmaltbie.openkcc.c | Open Source‚Ä¶         | =nickmaltbie    | 2023-04-02 | 1.3.4    | character controller kinematic physics cinemachine
                    inemachine                |                      |                 |            |          |
                    cinemanight               | API with access to‚Ä¶  | =chris5855      | 2019-10-01 | 1.2.7    | movies series videos series api movies api
                    emoji-cinema              | returns the cinema‚Ä¶  | =joshhunt       | 2017-06-08 | 1.3.0    |
                    cinemajs                  | A video editing‚Ä¶     | =aunyks         | 2016-09-03 | 0.1.1    | cinema Cinema CinemaJS cinema.js Cinema.js
                    gollum-nocinema           | Gollum is‚Ä¶           | =fguedes        | 2017-05-17 | 0.3.0    | crawler nocinema gollum cinema schedules
                    yelmocin                  | Node package to get‚Ä¶ | =agm-dev        | 2022-06-08 | 0.0.2    | Yelmocines movies cinemas
                    projection                | Fast acquisition of‚Ä¶ | =popmotion      | 2016-05-19 | 1.1.0    | projection cinema showtimes movie api scraper
                    ice-cinema-fetcher        | Fetches data about‚Ä¶  | =hugihlynsson   | 2014-03-26 | 0.0.2    |
                    cinematic-effect          | Generates a dynamic‚Ä¶ | =simonwep       | 2022-11-21 | 1.1.0    | video dynamic background cinematics cinematic
                    react-cinemagraph         | Generic Cinemagraph‚Ä¶ | =jac21          | 2022-05-05 | 1.2.11   | react react-component cinemagraph
                    aragorn-nocinema          | Aragorn is a‚Ä¶        | =fguedes        | 2016-07-26 | 0.0.1    | aragorn nocinema api cinema schedules
                    cinejsa                   | Node package to get‚Ä¶ | =agm-dev        | 2022-06-10 | 0.0.1    | Cinesa movies cinemas
                    @cinematix/reactor        | useReactor hook for‚Ä¶ | =davidbarratt   | 2023-03-12 | 2.1.1    | react-component
                    lib-cinema                |                      | =qkthrmary      | 2023-03-10 | 3.10.0   |



------------------------------ Events

        node has a built-in module, called "events",
        where I can create-, fire-, and listen for- my own events.


            var events = require('events');


--------- EventEmitter  obj

        all event properties and methods (ex method 'emit()  to fire an event)
        are an instance of an EventEmitter object.


            var eventEmitter = new events.EventEmitter();
                   |                      ^^^^^^^^^^^
                   |      I assign to it a listener/handler on event 'scream'
                   |
                   |
            eventEmitter.on('scream', myEventHandler);    //Assign the event handler to an event
            ^^^^^^^^^^^                    |                where the handler is any function I've defined
                  |                        |
                  |                        |
                  |          var myEventHandler = function () {            // Create an event handler
                  |            console.log('I hear a scream!');
                  |          }
                  |
                  |
            eventEmitter.emit('scream');             //I can decide when to fire the 'scream' event.
            ^^^^^^^^^^^

     NOTE: All objects (eg xx) which emit events are instances of events.EventEmitter whose methods are:

              xx.addListener (event, listener)      . 'on' is an alias for 'addListener'.
              xx.on          (event, listener)      . They add a listenerat the END of the listeners array
                                                    .  No checks are made to see if the listener has already been added.
                                                       Multiple calls will result in the listener being added multiple times.
                                                    . Returns emitter, so calls can be chained.

                                                    NOTE: as it's an ARRAY, the order/indexes are preserved, so first added will be first executed (and so on)

              xx.setMaxListeners (n)                . By default, EventEmitters will print a warning if more than 10 listeners are added for a particular event.
                 ^^^^^^^^^^^^^^^                    . This function allows that to be increased.
                                                    . Set 0 (zero) for unlimited.

              xx.once (event, listener)             . Adds a one time listener to the event.
                 ^^^^                               . This listener is invoked only the next time the event is fired, after which it is removed.
                                                    . Returns emitter, so calls can be chained.


              xx.removeListener (event, listener)   . Removes 1 listener from the array.
                 ^^^^^^^^^^^^^^                     . If a listener has been added multiple times, then removeListener must be called multiple times.
                                                    . Returns emitter, so calls can be chained.


              xx.removeAllListeners ([event])       . Removes all listeners.
                 ^^^^^^^^^^^^^^^^^^                 . Returns emitter, so calls can be chained.

              xx.listeners (event)                  . Returns an array of listeners for the specified event.
                 ^^^^^^^^^

              xx.emit (event, [arg1], [arg2], [..]) . Execute each of the listeners in order with the supplied arguments.
                 ^^^^                               . Returns true if the event had listeners, false otherwise.



       -------  1 CLASS METHOD
            listenerCount (emitter, event)          . Returns the number of listeners for a given event.   (it's a syntactic sugar for   xx.listeners(event).length )
                                                      ex
                                                          i = require('events').EventEmitter.listenerCount ( xx, event)

                                                          var events = require('events');
                                                          i = events.EventEmitter.listenerCount ( xx, event)

       -------  EVENTS (STRING) FIRED:

          . "newListener"        event fired when a listener is added
          . "removeListener"       "                  "         removed








--------- bult-in Node-async-APIs / callbacks

       the above events logic is built-in in any Node API which is an async funtion.

       Node.js is a single-threaded application, with an Event loop at its core.
             It can support concurrency via events and callbacks.

       Any async Node bult-in function (ex ffff) has as the LAST arg a CALLBACK function
       which has:
                    - as 1st arg 'err'
                    - as following args any content

       here the pattern:            ____________________________ the LAST arg is a callback function ...
                                   /
                   ffff (...., function (err, ...) {
                         if (err) {       \_____________________ ... whose 1st arg is err
                             ---
                         }
                         else {
                             ---
                         }


------------------------------ REPL


        Like in LISP, I can enter the interactive Read Eval Print Loop
        just with
               > node

        I can submit js code. Ex:

        $ node
                > 1 + 3
                4
                > 1 + ( 2 * 3 ) - 4
                3
                > var x = 0
                undefined
                > do {
                   ... x++;
                   ... console.log("x: " + x);
                   ... }
                while ( x < 5 );
                x: 1
                x: 2
                x: 3
                x: 4
                x: 5
                undefined
                >
                > 15 + 15
                30
                > var sum = _         <---------- the 'underscore' gives the last returned value (so sum is 30)

        Note. There are the '.'(dot) commands which I can see with the dot-command  .help

                > .help

                    .break    Sometimes you get stuck, this gets you out
                    .clear    Alias for .break
                    .editor   Enter editor mode
                    .exit     Exit the REPL
                    .help     Print this help message
                    .load     Load JS from a file into the REPL session                      <----  these 2
                    .save     Save all evaluated commands in this REPL session to a file     <----     are interesting



------------------------------ BUFFER

      'Buffer' is the class to manage bytes arrays (i.e. for binary data manipulation)

           CREATION:           var buf = new Buffer(10);
                               var buf = new Buffer([10, 20, 30, 40, 50]);
                               var buf = new Buffer("Simply Easy Learning", "utf-8");   // other econdings:  "ascii", "utf8", "utf16le", "ucs2", "base64" or "hex".

           LEN                 var buffer = new Buffer('TutorialsPoint');
                               buffer.length        // 14

           WRITE               buf.write(string [, offset]  [, length]    [, encoding])
                                                  default:0    how many    default: utf8

                                   ex. len = buf.write("Simply Easy Learning");

           READ                buf.toString([encoding][, start][, end])

                                   ex. buf.toString('ascii',0,5)     // 'Simpl'



           CONCAT              var buffer1 = new Buffer('TutorialsPoint ');
                               var buffer2 = new Buffer('Simply Easy Learning');
                               var buffer3 = Buffer.concat([buffer1,buffer2]);  // TutorialsPoint Simply Easy Learning


           COPY                buf.copy(targetBuffer[, targetStart][, sourceStart][, sourceEnd])

                               var buffer1 = new Buffer('ABC');
                               var buffer2 = new Buffer(3);
                               buffer1.copy(buffer2);


           SLICE               buf.slice([start][, end])

                               var buffer1 = new Buffer('TutorialsPoint');
                               var buffer2 = buffer1.slice(0,9);


           COMPARE             returns the usual   < 0   = 0     > 0

                               var buffer1 = new Buffer('ABC');
                               var buffer2 = new Buffer('ABCD');
                               var result = buffer1.compare(buffer2);        < 0


           TO JSON             buf.toJSON(buf);

                                    { type: 'Buffer',
                                       data:
                                       [
                                          83,
                                          105,
                                          109,
                                          112,
                                          ..
                                          103
                                       ]
                                    }



------------------------------ STREAM

      from the 'fs' module I can create 'Streams'
      ex. fs.createReadStream('input.txt');

      which can connect a source and a destination, piping anc chaining.

      They are instances of 'EventEmitter'
      and driven mainly by these events:
          o  data    ‚àí fired when there is data available to read.
          o  end     ‚àí fired when there is no more data to read.
          o  error   ‚àí fired on errors
          o  finish  ‚àí fired when all the data has been flushed


      ______________________________________________________________________________________ READ EXAMPLE
      var readerStream = fs.createReadStream('input.txt');

        readerStream.setEncoding('UTF8');
        readerStream.on('data',  function(chunk) { data += chunk; });
        readerStream.on('end',   function()      { console.log(data); });
        readerStream.on('error', function(err)   { console.log(err.stack); });


      ______________________________________________________________________________________ WRITE EXAMPLE
      var writerStream = fs.createWriteStream('output.txt');

        writerStream.write(data,'UTF8');
        writerStream.end();     // Mark the end of file
        writerStream.on('finish', function()    { console.log("Write completed."); });
        writerStream.on('error',  function(err) { console.log(err.stack); });

      ______________________________________________________________________________________ PIPE EXAMPLE
      var readerStream = fs.createReadStream(  'input.txt');
      var writerStream = fs.createWriteStream('output.txt');

        readerStream.pipe(writerStream);

      ______________________________________________________________________________________ CHAINING EXAMPLE
      var fs = require("fs");
      var zlib = require('zlib');

        __________________________________________ EX COMPRESS
        fs.createReadStream('input.txt')
           .pipe(zlib.createGzip())
           .pipe(fs.createWriteStream('input.txt.gz'));


        __________________________________________ EX DE-COMPRESS
        fs.createReadStream('input.txt.gz')
           .pipe(zlib.createGunzip())
           .pipe(fs.createWriteStream('input.txt'));





------------------------------ GLOBAL OBJECTS / METHODS


          __filename                        console.log( __filename );
          __dirname                         console.log( __dirname );
          t = setTimeout(cb, ms)         // call back function 'cb' after 'ms'
                                            function printHello() { console.log( "Hello, World!"); }
                                            setTimeout(printHello, 2000);

          clearTimeout(t)                // to stop/cancel a setTimeout()
          setInterval(cb, ms)            // loop calling 'cb' every 'ms'


          console
                                console.log       ([data][, ...])
                                console.info      ([data][, ...])
                                console.error     ([data][, ...])
                                console.warn      ([data][, ...])
                                console.dir       (obj[, options])
                                console.time      (label)
                                console.timeEnd   (label)
                                console.trace     (message[, ...]) <--------------- stack-trace on stderr
                                console.assert    (value[, message][, ...])



          process
                e v e n t s     exit         // ex   process.on('exit', function(code) { ...
                                beforeExit

                p r o p e r.    stdout         a Writable Stream to stdout.
                                stderr         a Writable Stream to stderr.
                                stdin          a Writable Stream to stdin.
                                argv           usual array, where 1st el = 'node', 2nd = name of the JavaScript file
                                execPath       absolute pathname of the executable that started the process.
                                execArgv       the set of node-specific command line options from the executable that started the process.
                                env            the user environment.
                                exitCode       the process exit code
                                version        A compiled-in property that exposes NODE_VERSION.
                                versions       the version strings of node and its dependencies.
                                config         the JavaScript representation of the configure options that were used to compile the current node executable (same as file "config.gypi" produced when running ./configure script)
                                pid            The PID of the process.
                                title          Getter/setter to set what is displayed in 'ps'.
                                arch           What processor architecture you're running on: 'arm', 'ia32', or 'x64'.
                                platform       What platform you're running on: 'darwin', 'freebsd', 'linux', 'sunos' or 'win32'
                                mainModule     Alternate way to retrieve require.main. The difference is that if the main module changes at runtime, require.main might still refer to
                                              the original main module in modules that were required before the change occurred. Generally it's safe to assume that the two refer to the same module.


                m e t h o d s   abort  ()                       emit an abort. causes node to exit and generate a core file.
                                chdir (directory)              cd current working directory of the process or throws an exception if that fails.
                                cwd ()                         returns current working directory of the process.
                                exit ([code])                  Ends the process with the specified code. If omitted, exit uses the 'success' code 0.
                                getgid ()                      the numerical group id (available on POSIX platforms (i.e. not Windows, Android))
                                setgid (id)                    Set group id
                                getuid ()                      the numerical id (available on POSIX platforms (i.e. not Windows, Android))
                                setuid (id)                    Sets id
                                getgroups ()                   Returns an array with the supplementary group IDs.
                                setgroups (groups)             Sets the supplementary group IDs.
                                initgroups (user, extra_group) Reads /etc/group and initializes the group access list, using all the groups of which the user is a member.
                                kill (pid[, signal])           Send a signal to a process. strings like 'SIGINT' or 'SIGHUP'. If omitted, the signal will be 'SIGTERM'.
                                memoryUsage ()                 Returns the memory usage in bytes.
                                nextTick (callback)            Once the current event loop turn runs to completion, call the callback function.
                                umask ([mask])                 Sets or reads the process's file umask
                                uptime ()                      Number of seconds Node has been running.
                                hrtime ()                      Returns the current high-resolution real time in a [seconds, nanoseconds] tuple Array.
