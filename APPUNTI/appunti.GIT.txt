 GENERAL NODES
                           TAG --->     (C)    COMMIT (author, message, 1 TREE-SHA1)
                                         |
                                        /T\    TREE   (filename, 1/+ BLOB-SHA1 and/or 1/+ TREE-SHA1-s)
                                       -----
                                         |
                                       [ B ]   BLOB   (flat bytes content)


                ex. of 1 TREE:  (git cat-file -p 454b0ec96eed4260bcd4ef9a00d6a8a1b8cb226f)

                       100644 blob 543f5231095e941f10cd8d40687a350fa43442cb	.gitignore
                       040000 tree 69f0ce57831bdb70cad42a47c271498b90057015	CHD
                       100644 blob 39589801c625e730c5f2ad9fdab8510af16fcabd	Makefile
                       100644 blob dae7deaf1248d2775fc51dfbfacb820c7e9cbd1e	README.md
                       040000 tree b8058a43a33c64fa194755a4ff3d4a2ad6447f97	feature-notes
                       040000 tree 8bf9cd921034befc59127d4342bb7a532b9a4637	rdist
                       040000 tree a0c22543e4943c8ffa48f18fe3185113c578f515	services
                       040000 tree 5afdb45a5a8c0abd735820e52b15d1c4bb82121d	tools
                       040000 tree d32706103d89d0e557320bbe0426589af2d777de	websystems



                ex. of 1 COMMIT:  (git cat-file -p 8fb1db6a)

                       tree 8190f3311019df5756b1e341ec3d4a35f8e21743
                       parent 3d3f47406efd7b52e2d3f5da9d3a1820251a73eb
                       author sbasile-ch <sbasile@companieshouse.gov.uk> 1523006712 +0100
                       committer sbasile-ch <sbasile@companieshouse.gov.uk> 1523006712 +0100

                       [SCRS-3511] - tidied up





   git --version



HELP:

   git help -a
   git help --all                     # long form
   git help -g                        # the guide form

   git   help commit
   git --help commit
   git commit --help




REPO:
   git init    # create an empty repo ( the dir .git/  )
                a normal active git repo has this ./git content:
                        total 72
                              1) -rw-r--r--    1 sbasile  staff    27  5 Apr 17:25 COMMIT_EDITMSG
                              2) -rw-r--r--    1 sbasile  staff    97 27 Feb 15:21 FETCH_HEAD
                              3) -rw-r--r--    1 sbasile  staff    23  5 Apr  2016 HEAD
                              4) -rw-r--r--    1 sbasile  staff    41 27 Feb 15:21 ORIG_HEAD
                              5) drwxr-xr-x    2 sbasile  staff    68  5 Apr  2016 branches
                              6) -rw-r--r--    1 sbasile  staff   309  5 Apr  2016 config
                              7) -rw-r--r--    1 sbasile  staff    73  5 Apr  2016 description
                              8) drwxr-xr-x   11 sbasile  staff   374  5 Apr  2016 hooks
                              9) -rw-r--r--    1 sbasile  staff  5225  5 Apr 17:24 index
                             10) drwxr-xr-x    3 sbasile  staff   102  5 Apr  2016 info
                             11) drwxr-xr-x    4 sbasile  staff   136  5 Apr  2016 logs
                             12) drwxr-xr-x  241 sbasile  staff  8194 12 Feb 18:43 objects           the 'object store'
                             13) -rw-r--r--    1 sbasile  staff   107  5 Apr  2016 packed-refs
                             14) drwxr-xr-x    5 sbasile  staff   170  5 Apr  2016 refs




OBJECT STORE:

   git hash-object pippo.txt          # calculates the SHA1 of pippo.txt
   git rev-parse 3b18e512d            # displays full long hash: 3b18e512dba79e4c8300dd08aeb37f8e728b8dad

   git cat-file -t 3b18e512d          # displays type of node (ex. "commit" )
   git cat-file -p 3b18e512d          # displays node content (tag blob tree commit)
   git cat-file -s 3b18e...           # size (bytes) (ex. 443))
   git cat-file -e 3b18e...           # 0 if node is 0K (echo $?)

   git fsck                           # check consistency of the pack (ex. dangling nodes)




INDEX:

   git ls-files -s                    # to see which files are in the index
   git ls-files --stage               # long form
   git rev-parse 3b18e512d            # displays full long hash: 3b18e512dba79e4c8300dd08aeb37f8e728b8dad

   git cat-file -t 3b18e512d          # displays type of node (ex. "commit" )


STAGING AREA:

   git add a.txt           # add file a.txt  (not yet committed: it's staged) (regex: git add *.p[lm])
   git add .               # add this dir and any sub-dir   (more general: git add dirA    add all the tree rooted by dirA)
   git add --interactive   # useful to check one by one



LOGGING:

   git log --pretty="%h %t %p %s"          %p: parent hash
   git .
   git .



REFERENCES:

             they are BRANCHES(local/remote) and TAGS.
             They are stored in:

              $GIT_DIR/refs/heads/ref              < branches >   local
              $GIT_DIR/refs/remotes/ref            < branches >   remote
              $GIT_DIR/refs/tags/ref               < tags >
              $GIT_DIR/packed-refs                 if refs are packed by git gc

              ex:   find .git/refs/  :

                     .git/refs/
                     .git/refs/remotes
                     .git/refs/remotes/origin
                     .git/refs/remotes/origin/master
                     .git/refs/remotes/origin/HEAD
                     .git/refs/tags
                     .git/refs/heads
                     .git/refs/heads/master

                ______________________
               |  special references :
               |______________________

                                HEAD:         LAST COMMIT (NOT always "current branch", as some operations 'detach' HEAD')
                                              (since git 1.8.5,  '@' alias for HEAD):  git log @
                                FETCH_HEAD    Git stores in FILE:.git/FETCH_HEAD all HEADS of the remote branches fetched.
                                              (valid only immediately after a 'git fetch').
                                ORIG_HEAD     (on a merge) prev  val of HEAD
                                MERGE_HEAD    (on a merge) after val "   "  (the value HEAD is going to take)


   git show-ref            # lists all references
   git symbolic-ref        # plumbing command to manage ref





NOTATIONS:

         if C is a COMMIT then:
                                    C~1 parent     abbreviated C~
                                    C~2, C~3, ...

                                    C^1 parent in 1st branch     abbreviated C^
                                    C^2    "      2nd   "

                                                           note: when no merge  C~1 = C^1
                                                                 C^1^1 (abbr. C^^) = C~2   (abbr. C~~)


         A .. B      think of 'take the last 2 commits' --> this + this~1,   (so this: INCLUDED & this~2 EXCLUDED)
         ^    ^
         |    newer & included  (if omitted HEAD assumed: A.. = A..@)
         older &
         excluded



         ^C          'exclusion' group (like in regex [^a-z])
                     it means: not C + not all commits reachable backward from C (all its parents)
                     nb.   X..Y   =  ^X Y



         A...B       Sum of C NOT COMMON between A and B (reachable from 1 but not the other)



  _________________________________________________________________________________________________________________________________________
  | $GIT_DIR
  | $GIT_EDITOR
  | $GIT_AUTHOR_NAME
  | $GIT_AUTHOR_EMAIL
  _________________________________________________________________________________________________________________________________________
  | git --version
  | git init                                                   # create an empty repo ( the dir .git/  )
  | git clone <url>  [dir_name]
  | git clone https://github.com/A
  | git clone https://github.com/A  B                          # if I want a dir named B instead of the REPO dir name
  | git clone dir1  dir2                                       # copy the repository full path dir1 into the path dir2.
  | git ls-files -s                                            # to see which files are in the index
  | git ls-files --stage                                       #      "       "   (long form)
  | git show-ref                                               # lists all references
  | git symbolic-ref                                           # plumbing command to manage ref
  | git hash-object pippo.txt                                  # calculates the SHA1 of file pippo.txt
  | git rev-parse   3b18e512d                                  # to get all the hash (ex. obtaining 3b18e512dba79e4c8300dd08aeb37f8e728b8dad)
  | git add a.txt                                              # add file a.txt  (not yet committed: it's staged) (regex: git add *.p[lm])
  | git add .                                                  # add this dir and any sub-dir   (more general: git add dirA    add all the tree rooted by dirA)
  | git add --interactive                                      # useful to check one by one
  | git rm                                                     # rm is the opposite of add.
  | git show HEAD~2                                            # to see a Commit
  | git show master:Makefile                                   # to see a Blob  (here file Makefile)
  | git show        HEAD~2:APPUNTI/appunti.GIT.txt  <-------      "   "    "
  | git cat-file -p HEAD~2:APPUNTI/appunti.GIT.txt  <-------      "   "    "
  | git cat-file -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dad   # to see the content of any node (blob tree or commit)
  | git cat-file -t 3b18e...                                   # shows type (ex. commit)
  | git cat-file -s 3b18e...                                   #   "   size (bytes) (ex. 443))
  | git cat-file -e 3b18e...                                   #   "   0 if node is 0K (echo $?)
  | git status                                                 # SHOW INDEX: shows what is staged and is going to be committed.
  |                                                                         to see which files are in which state
  | git status -s    or --short                                # (for less verbose output)
  | git log --pretty=short --abbrev-commit master~12..master~10        range ~12 ~10
  | git help --all                                             # to list all sub-commands
  | git help -a                                                # to list all sub-commands (short form)
  | git help -g                                                # the guide form
  | git config -l                                              # to list the settings   (almost like a simple cat  .gitconfig)
  | git config --help
  | git config --global user.name "Dan"
  | git config --global user.name "Jon Loeliger"
  | git config --global user.email "uuuuu@ddddd.com"
  | git config --global alias.show-graph \                     # to define alias
  |            'log --graph --abbrev-commit --pretty=oneline'
  | git config --edit                                          #    open the file ex in vim
  | git config --unset --global user.email
  | git reset HEAD a.txt
  | git fetch  origin --prune                                  # to remove, all old branches, deleted on remote but still present on my local env.
  | git remote prune origin
  | git branch -d $(git branch --merged)                       # <--- git branch --merged    all branches that have been merged.
  |                                                            #  after that cmd, if there are still some local branches not
  |                                                            #  deleted, it can be, because the merge has been done on the server
  |                                                            #  and then the branch deleted on the server, so the local branch
  |                                                            #  still results, non fully merged, and not listed
  |                                                            #  by "git branch --merged".
  |                                                            #  To delete them use a direct "git branch -D" with the
  |                                                            #  list of those unmerged branches
  | git fsck                                                   # to check integrity (of the pack)
  | git reflog                                                 # commands to recover from accidentally removing a branch or
  | git gc                                                     # manual repack
  | git gc --prune                                             # to remove garbaged collection
  | gc.reflogExpire
  | gc.pruneExpire
  | git push -u origin master
  |
  |
  |
  |
  |
  |
  |
  |
  |
  |
  | git cherry-pick 62ecb3            'cherry-pick' allows to pick up 1 commit (from everywhere / any branch) and insert
  |                                   the change after the HEAD of the branch checked-out.
  |                                   A commit usually is a diff + other info (ex. references to ancestor). cherry-pick removes
  |                                   the 'admin' info and keeping only the 'diff' section applies that to my HEAD.
  |
  |                                   If there are no conflicts, everything is done automatically
  |                                   If there are conflits:
  |                                                         usual way: change the files + git add
  |                                                       + git cherry-pick --continue
  |                                   If there are conflits and I want to exit: git cherry-pick --abort
  |
  | git rebase --onto master 111AAA^  'rebase' is a way to cherry-pick a range of commit in a branch from 111AAA^ ---> ...
  |
  |                                   git rebase -i C       interactive way to change commit C (maybe remove it completely)
  |                                                         'interactive' because it opens the editor where the 'rebase commands' (p,r,e,s,f,x)
  |                                                         can be submitted (as soon as the editor is saved & closed)
  |
  |                                                         ex. g rebase -i d9465bb
  |
  |                                                                               1 pick d9465bb second C
  |                                                                               2 pick 62c11d1 third C
  |                                                                               3 pick 862a23c fourth C
  |                                                                               4 pick a0459b6 5th C
  |                                                                               5 pick 87148f2 6th C
  |                                                                               6
  |                                                                               7 # Rebase 11389fd..87148f2 onto 11389fd
  |                                                                               8 #
  |                                                                               9 # Commands:
  |                                                                              10 #  p, pick = use commit
  |                                                                              11 #  r, reword = use commit, but edit the commit message
  |                                                                              12 #  e, edit = use commit, but stop for amending
  |                                                                              13 #  s, squash = use commit, but meld into previous commit
  |                                                                              14 #  f, fixup = like "squash", but discard this commit's log message
  |                                                                              15 #  x, exec = run command (the rest of the line) using shell
  |                                                                              16 #
  |                                                                              17 # These lines can be re-ordered; they are executed from top to bottom.
  |                                                                              18 #
  |                                                                              19 # If you remove a line here THAT COMMIT WILL BE LOST.
  |                                                                              20 #
  |                                                                              21 # However, if you remove everything, the rebase will be aborted.
  |                                                                              22 #
  |                                                                              23 # Note that empty commits are commented out
  |
  |
  |                   _________________________________________
  |                   cut a release:
  |                   _________________________________________
  |
  |                    1. git co develop && g pull
  |                    2. git branch -a | rg -i release    -----> ex: remotes/origin/release/1.45.0
  |                    3. git co -b release/1.46.0
  |                    4. g tag -a -m 'cut for release/1.46.0' v1.46.0-rc1
  |
  |                    5. git push --set-upstream origin release/1.46.0
  |                    6. git push --follow-tags origin release/1.46.0
  |
  |                    7. available on gitHub at https://github.com/companieshouse/chl-perl/releases/tag/v1.46.0-rc1
  |
  |                   _________________________________________
  |                   HOT FIX ON A RELEASE:
  |                   _________________________________________
  |                              1. git checkout release/1.52.0      <--- the release you want to patch
  |                              2. git pull
  |                              3. git checkout -b release/1.52.1   <--- create a branch from here (the name is not important)
  |                              4. add all fixing commits then push to gitHub
  |                              5. create a PR on the perl channel to have the fixing branch merged into release/1.52.0
  |                              6. merge and delete the branch 1.51.1 (that's why the name was not important)
  |                              7. git checkout release/1.52.0 && git pull
  |                              8. g tag -a -m 'Fix:.......' v1.52.0-rc2   <---- rc2 is the incremental number with respect to
  |                                                                               the last available on https://github.com/companieshouse/chl-perl/releases)
  |                              9. git push --follow-tags
  |
  |
  |
  |
  |
  |
  |
  |
  |
  |________________________________________________________________________________________________________________________________________

1. Getting Started                          | git --version
                                            |
    1.1 About Version Control               |
                                            |        ______________________________________________
                                            |        VERSION CONTROL SYSTEMS HISTORY
                                            |        ______________________________________________
                                            |        Local Version Control Systems:   (RCS)
                                            |                                         each programmer manages his project and files
                                            |                                         This is usefull for 1 person only and suffers
                                            |                                         for single point of failure (if that PC goes wrong)
                                            |
                                            |        Centralized Version Control Systems:   (CVS, Subversion, and Perforce)
                                            |                                         A server stores the project.
                                            |                                         More than 1 developer can work together.
                                            |                                         Still the server is a single point of failure (if
                                            |                                         goes down 1 hour or destroyed with no back-up)
                                            |
                                            |        Distributed Version Control Systems:   (Git, Mercurial, Bazaar or Darcs)
                                            |                                         The database is distributed.
                                            |                                         With Git each programmer downloads the ALL copy
                                            |                                         so it would be also used as back-up
                                            |
                                            |
                                            |        ______________________________________________
                                            |        Snapshots, Not Differences
                                            |        ______________________________________________
                                            |
                                            |        Other systems (CVS, Subversion, Perforce, Bazaar, and so on) think of
                                            |                   . a set of files (to start)
                                            |                   . only changes made over time.
                                            |
                                            |        In Git: data = a set of snapshots of a miniature filesystem.
                                            |
                                            |        1 commit = 1 snapshot   (If a file has no changes,
                                            |                                 Git stores just a link to the previous identical file).
                                            |
                                            |        ______________________________________________
                                            |        Nearly Every Operation Is Local
                                            |        ______________________________________________
                                            |
                                            |        Most operations in Git only need local files.
                                            |        Git doesn’t need to go out to the server to get data.
                                            |
                                            |        In Perforce, for example, you can’t do much when you aren’t connected to the server;
                                            |        and in Subversion and CVS, you can edit files, but you can’t commit changes to your database
                                            |        (because your database is offline).
                                            |
    1.2 A Short History of Git              |
                                            |
    1.3 Git Basics                          |
                                            | 'GIT'    has been built as a set of small, stand-alone, commands.
                                            |          Now they can be executed as stand-alone or, identically, as
                                            |          subcommands of 1 single main command 'git'
                                            |
                                            |          so    git-commit      1 command (0 args)
                                            |                git commit      1 command + 1 arg
                                            |
                                            |
                                            |
                                            |            GIT works as
                                            |
                                            |               1. a file is just a CONTENT (a stream of bytes), not its FILENAME
                                            |               2. that bunch of bytes is stored as a flat BLOB  (nb. GIT stores so the whole file, not just the diffs)
                                            |               3. from the CONTENT is calculated a SHA1
                                            |                  40-hex [0–9A–F] --> 20 bytes --> 160 bit number (2^160)
                                            |               4. the CONTENT is 'indexed' by its SHA1 (its a list of dirs under .git/objects/)
                                            |
                                            |               NB: so 2 or more identical files (spread around in the repo dirs)
                                            |                   will be 1 single BLOB and SHA1 index
                                            |                   (they will have a separate TREE node each)
                                            |
                                            |
                                            | git hash-object pippo.txt      # calculates the SHA1 of file pippo.txt
                                            | git rev-parse 3b18e512d        # to get all the hash (ex. obtaining 3b18e512dba79e4c8300dd08aeb37f8e728b8dad)
                                            |
                                            |
                                            |               .git/objects/   this dir (called "object store"),
                                            |                               stores as a subdirs-strcture all the SHA1.
                                            |                               A generic SHA1 (ex. 3b18e512dba79e4c8300dd08aeb37f8e728b8dad)
                                            |                               is stored as
                                            |                                      .git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad
                                            |                               so    a dir named with the first 2 hex
                                            |                               and   a file named with the rest.
                                            |                               This file is the content of that SHA1 (can be a TREE a BLOB a COMMIT or a TAG)
                                            |                               They are mainly binary and not text files. (use  git cat-file   to see the content:
                                            |
                                            |                                                                            ok: git cat-file -t fea0f6d1aaa19bf9cd79b7545906a79053c27c63
                                            |                                                                           not: git cat-file -t .git/objects/fe/a0f6d1aaa19bf9cd79b7545906a79053c27c63 )
                                            |
                                            |                               The reason for not having directly all the SHA1 files (ex 3b18e....ad)
                                            |                               inside .git/objects, but splitting with an intermediate dir
                                            |                               is an optimization.
                                            |                               NB. As the dirs inside .git/objects are named as 2 hex chars (1st byte)
                                            |                                   they cannot be more than 256.
                                            |
                                            |
                                            |                               The "object store" dir is where the actual repository is stored
                                            |                               (BLOB,      files_CONTENT
                                            |                                TREE,      the dirs (the structure with files_NAME)
                                            |                                COMMIT,    the HISTORY
                                            |                                TAG        any human alias
                                            |
                                            |                               NB. also PACK files are stored here.
                                            |
                                            |
                                            |               .git/index      Is the 'local' temporary area that GIT uses to work on the repo.
                                            |                               As its meaning is local, a clone transmits only the "object store" .git/objects/
                                            |                               among the dirs inside .git, not .git/index
                                            | ______________________________________________
                                            |             PACKs
                                            | ______________________________________________
                                            |
                                            |               Even if GIT stores normally the WHOLE content of a file
                                            |               anyhow there is an internal optimization.
                                            |               So when 2 or more contents are ENOUGH similar, regardless
                                            |               what they come from (2 or more files, or revisions of files)
                                            |               GIT stores 1 WHOLE content, and DIFFs to rebuild similar
                                            |               CONTENTs.
                                            |
                                            |               .git/objects/pack/          This dir contains any pack file
                                            |
                                            | git fsck           # to check integrity (of the pack)
                                            |
                                            | The 3 States
                                            | ______________________________________________
                                            | Committed: means that the data is safely stored in your local DB.
                                            | Modified:  means that you have changed the file but have not committed it to your DB yet.
                                            | Staged:    means that you have marked a modified file in its current version to go into your next commit snapshot.
                                            |
                                            | The [Git directory] is where Git stores the files and
                                            | where it is cloned a repository (from another computer (remotely) or even (locally))
                                            |
                                            | The wd [working directory] is where you modify files.
                                            |
                                            | The [staging area or "index"] is a 'file'  (binary file)  in .git/
                                            | that stores information about what will go into your next commit.
                                            | (the index contains also other info on the repository,
                                            |  like the dirs structure, or info during a merge.    use git ls-files    to see the index)
                                            |
                                            |
                                            |
                                            |          -------    add        -------           commit  --------
                                            |            WD     ------>    index/ stage        ----->    REPO
                                            |          -------               -------                   --------
                                            |
                                            |                   3 types of files:
                                            | tracked           # files already in repository or staged
                                            | ignored           # files to not consider (compiler output, scratch files...) Git as a default list
                                            |                     but you can add a file to be ignored  ( echo main.o > .gitignore )
                                            | untracked         # all the working-dir files which remain after subtracting the above
                                            |                     (they can thought as files not in any previous shapshot)
                                            |
                                            | git add a.txt           # add file a.txt  (not yet committed: it's staged) (regex: git add *.p[lm])
                                            | git add .               # add this dir and any sub-dir   (more general: git add dirA    add all the tree rooted by dirA)
                                            | git add --interactive   # useful to check one by one
                                            |
                                            | The basic Git workflow is:
                                            |
                                            |     You modify/edit files in your wd.
                                            |
                                            |     You stage the files, adding snapshots of them to your staging area.
                                            |     (accumulate changes in your index)
                                            |
                                            |     You do 1 commit, which takes the files as they are in the staging area and
                                            |     stores that snapshot permanently to your Git directory.
                                            |     (commit whatever has amassed in the index as a single changeset)
                                            |
                                            |
                                            | >>>>>>N.B.  EACH COMMIT INTRODUCES A TREE OBJECT THAT REPRESENTS THE ENTIRE REPOSITORY.
                                            |
                                            |                            TAG --->     (C)    COMMIT (TREE_SHA1, author, message)
                                            |                                          |
                                            |                                         /T\    TREE   (BLOB_SHA1, filename)
                                            |                                        -----
                                            |                                          |
                                            |                                        [ B ]   BLOB   (flat bytes content)
                                            |
                                            | BLOBS          - Binary Large Object:  the content of a file,
                                            |                                        (no other metadata (ex no file-name !))
                                            |                - 1 file change -->  1 new BLOB created (oterwise it's reused the old one).
                                            |
                                            | TREES          - store  [Blob-id (the SHA1), file path, link to other trees ]
                                            |                - are the BLOB of a dir'.
                                            |                - 1 dir change (ex. new files, less files
                                            |                  file rename) --> different SHA1 for any of its file --> 1 new TREE created.
                                            |
                                            | COMMITS        - store [author, reason of change... and a link to the most root TREE node].
                                            |                - Normally 1 Commit has 1 other 'parent'-Commit but can have more 'parents'
                                            |
                                            | TAGS           - add a human readbale identification to a Commit to avoid using Commit-SHA1-id
                                            |   ______________________________
                                            |
                                            |   this is the COMMIT            this is the TREE                this is the BLOB
                                            |                                 n.b. file names                 n.b. file content
                                            |              |                       are stored here                 is stored here
                                            |              |
                                            |              |                            |                                   5b1d3
                                            |              |                            |                          _____________________
                                            |              |                            |                          |     blob   size    |
                                            |              |                            |                          |  a b c .....       |
                                            |              |                            |                   ______ |  d e f .....       |
                                            |              |                            |                  /       |  g h i .....       |
                                            |              v                            v                 /        |____________________|
                                            |                                                            /
                                            |             98ca9                        92ec2            /                  911e7
                                            |    _____________________        ______________________   /           _____________________
                                            |    |   commit   size    |       |  tree   size        | /            |     blob   size    |
                                            |    |     tree   92ec2   |______ |  blob   5b1d3 README|/             |  x y z .....       |
                                            |    |   parent           |       |  blob   911e7 A.txt | ____________ |  w j k .....       |
                                            |    |   author   ste     |       |  blob   cba0a B.c   |              |  q 7 v .....       |
                                            |    |committer   ste     |       |                     |\             |____________________|
                                            |    |____________________|       |_____________________| \
                                            |                                                          \                 cba0a
                                            |                                                           \          _____________________
                                            |                                                            \________ |     blob   size    |
                                            |                                                                      |  #include ...      |
                                            |                                                                      |  int a = 1;        |
                                            |                                                                      |                    |
                                            |                                                                      |____________________|
                                            |
                                            | COMMITs are chained (to 1 or more parents) in a COMMIT history
                                            |     --------
                                            |     DAG
                                            |     --------
                                            |
                                            |     DAG (Directed Acyclic Graph) is the type of graph built by the GIT Commits chain.
                                            |                                  where there are no LOOPs
                                            |                                  and arrows are only in 1 (forward) direction
                                            |
                                            |
                                            |           98ca9                     ac77b                     6f37a
                                            |  _____________________     _____________________     _____________________
                                            |  |   commit   size    |    |   commit   size    |    |   commit   size    |
                                            |  |     tree   92ec2   |    |     tree   0b11f   |    |     tree   505fe   |
                                            |  |   parent          <-------- parent          <-------- parent           |  ...
                                            |  |   author   ste     |    |   author   ste     |    |   author   ste     |
                                            |  |committer   ste     |    |committer   ste     |    |committer   ste     |
                                            |  |____________________|    |____________________|    |____________________|
                                            |
                                            |
                                            |      a way to see that CHAIN could be dump hash (%h)  tree (%t) and parent (%p):
                                            |
                                            |                             git log --pretty="%h %t %p %s" :
                                            |
                                            |                              6f37a   505fe   ac77b commit 3
                                            |                              ac77b   0b11f   98ca9 commit 2
                                            |                              98ca9   92ec2    ...  commit 1
                                            | ______________________________
                                            |
                                            |
                                            | git cat-file -p 3b18e512dba79e4c8300dd08aeb37f8e728b8dad   to see the content of any node (blob tree or commit)
                                            | git cat-file -t 3b18e...        type (ex. commit)
                                            | git cat-file -s 3b18e...        size (bytes) (ex. 443))
                                            | git cat-file -e 3b18e...        0 if node is 0K (echo $?)
                                            |
                                            |
                                            |
                                            | git ls-files -s            to see which files are in the index:
                                            | git ls-files --stage       # long form
                                            |
                                            |                 100644 dc4585950891df37f52acf704c2eb04601e132f9 0   appunti.BASH.txt
                                            |                 100644 24a65083c61d897527c3d3d91aa69cda57eab34c 0   appunti.GNU_MAKE.txt
                                            |                 100644 4378abc02314dfe8d3a8d68da690653e97adb271 0   appunti.JAVA.txt
                                            |                 100644 b9d5550ae3abf6e926919dec66edc3cdb50d2066 0   appunti.LINUX.txt
                                            |                 100644 5b7c04044eccdbb524ad91caffe65fc4cbe2d753 0   appunti.MYSQL.txt
                                            |                 100644 646e1edc389d5c08999a55dfb7366fd7bd5a193c 0   appunti.SQL.txt
                                            |                 100644 9e5f5f8a47c87dbb466a2b42a1756de8aae09e78 0   appunti.VIM.txt
                                            |                 100644 e987d6a668160ef14d2a00c0be6136ba2ab817b1 0   appunti.XML.txt
                                            |
                                            |                 100644 are file permission bits (chmod)
                                            |
                                            |                 when a file is a directory the cat presents the ouput above with some informaton
                                            |                 like (blob or tree) to say if it's a file or a dir:
                                            |
                                            | git cat-file -p bedd
                                            |                 100644 blob dc4585950891df37f52acf704c2eb04601e132f9   appunti.BASH.txt
                                            |                 100644 blob 24a65083c61d897527c3d3d91aa69cda57eab34c   appunti.GNU_MAKE.txt
                                            |                 100644 blob 4378abc02314dfe8d3a8d68da690653e97adb271   appunti.JAVA.txt
                                            |                 100644 blob b9d5550ae3abf6e926919dec66edc3cdb50d2066   appunti.LINUX.txt
                                            |                 100644 blob 5b7c04044eccdbb524ad91caffe65fc4cbe2d753   appunti.MYSQL.txt
                                            |                 100644 blob 646e1edc389d5c08999a55dfb7366fd7bd5a193c   appunti.SQL.txt
                                            |                 100644 blob 9e5f5f8a47c87dbb466a2b42a1756de8aae09e78   appunti.VIM.txt
                                            |                 100644 blob e987d6a668160ef14d2a00c0be6136ba2ab817b1   appunti.XML.txt
                                            |
                                            |
                                            |     -----------------------
                                            |        REFERENCES
                                            |     -----------------------
                                            |     A ref is used in Git to specify BRANCHES(local/remote) and TAGS. They are stored in:
                                            |
                                            |                       $GIT_DIR/refs/heads/ref              local  br.
                                            |                       $GIT_DIR/refs/remotes/ref            remote br.
                                            |                       $GIT_DIR/refs/tags/ref               tags.
                                            |                       $GIT_DIR/packed-refs                 if refs are packed by git gc
                                            |
                                            |                       ex:   find .git/refs/  :
                                            |
                                            |                              .git/refs/
                                            |                              .git/refs/remotes
                                            |                              .git/refs/remotes/origin
                                            |                              .git/refs/remotes/origin/master
                                            |                              .git/refs/remotes/origin/HEAD
                                            |                              .git/refs/tags
                                            |                              .git/refs/heads
                                            |                              .git/refs/heads/master
                                            |
                                            | git symbolic-ref      # plumbing command to manage ref
                                            | git show-ref          # lists all references
                                            |
                                            |
                                            |      special references:
                                            |
                                            |                       HEAD:         a symref to LAST COMMIT (it is NOT always a ref to "current branch",
                                            |                                     as some operations 'detach' HEAD')
                                            |                                     (since git 1.8.5,  '@' is an alias for HEAD):  git log @
                                            |                       ORIG_HEAD     stores prev val of HEAD (on a merge) (if a recovery is needed)
                                            |                       FETCH_HEAD    valid only immediately after a 'git fetch'. Git stores in the file:.git/FETCH_HEAD
                                            |                                     all the HEADS of the remote branches fetched.
                                            |                       MERGE_HEAD    is the value that HEAD is going to take (coming from ORIG_HEAD)
                                            |
                                            |
                                            |
                                            |
                                            |      If C refers to  a Commit, then:
                                            |                                    C~1 its parent                               usually abbreviated as C~
                                            |                                    C~2 its parent's parent and so on .... C~3
                                            |
                                            |                                    C^1 parent from 1st branch                      "         "         C^
                                            |                                    C^2 parent from 2 branch and so on ... C^3
                                            |
                                            |                                    C~1 and C^1 are always the same where there is no merge
                                            |                                    As C^1^1 = C~2
                                            |                                    C^^   abbr. of C^1^1
                                            |
                                            |                                    ex:  C~10^2~2^2
                                            |
                                            |
                                            |      So with the C ^ ~  we have a 'relative' way to link to a Commit going back. The final autority to translate
                                            |      into the 'absolute' still remains  git rev-parse:
                                            |                                           git rev-parse master~3^2^2^
                                            |                                           32efcd91c6505ae28f87c0e9a3e2b3c0115017d8
                                            |
                                            |                                           git rev-parse HEAD ~~~~~
                                            |                                           4fdd3b64a3807c13d03b473736c7d70faf6b3b17
                                            |
                                            |     --------
                                            |     RANGES:  2 symbols '..' (difference)  '...'  (symmetric difference)
                                            |     --------
                                            |     A..B     (A-B]     Range of Commit (going back, so the start is B, and A is older than B)
                                            |                        nb. the start (B)  is included, the end (A) is out
                                            |
                                            |     if missing A or B, HEAD is assumed
                                            |                           ..B      = HEAD..B
                                            |                           A..      = A..HEAD
                                            |
                                            |                           ex the last 2 Commits: HEAD~~..  (B itself and prev B~1)
                                            |
                                            |
                                            |     REACHABILITY:   the set of PARENTS (older Commits reachable from C)
                                            |
                                            |     ^C  (the ^ before C) means all the Commits starting from (and including) C that must be excluded
                                            |         said otherwise defines the REACHABILITY from C that must be EXCLUDED in a range
                                            |           ^ acts as the usual regex symbol: ex [^a-z]
                                            |
                                            |     X..Y   =  ^X Y
                                                              ^
                                                              nb. normal space here
                                            |
                                            | git log --pretty=short --abbrev-commit master~12..master~10        range ~12 ~10
                                            |                    |                                               12 is excluded(so 2 commits: 10, 11)
                                            |         (oneline short full fuller)
                                            |
                                            | git show HEAD~2             to see a Commit
                                            | git show master:Makefile    to see a Blob  (here file Makefile)
                                            |
                                            | git show        HEAD~2:APPUNTI/appunti.GIT.txt  <-------   they
                                            | git cat-file -p HEAD~2:APPUNTI/appunti.GIT.txt  <-------       do, the same
                                            |
                                            |
                                            |       A...B (using 3 '.')   set reachable from A or B but not from both
                                            |                             said otherwise is the sum of Commits not in common
                                            |                             (presented in one only)
                                            |
                                            |          A -- B -- C -- D -- E -- F -- G -- H -- I     ----- master
                                            |                      \               /
                                            |                       \             /
                                            |                         U -- V -- W -- X -- Y -- Z     ----- dev
                                            |
                                            |          master...dev = ?
                                            |                                  reachable from master:    I H G F E D C A B  U V W
                                            |                                  reachable from dev        Z Y X W V U        C B A
                                            |                                  reachable not from both   I H G   Z Y X  D E F   --> master...dev
                                            |
                                            |
    1.4 The Command Line                    | To use Git: the command line, or there are many GUIs.
                                            |             The command line is the only place you can run all Git commands
                                            |             gitk : great graphical tool
                                            |
    1.5 Installing Git                      |
                                            |
    1.6 First-Time Git Setup                |
                                            |
    1.7 Getting Help                        | git help --all             to list all sub-commands
                                            | git help -a                to list all sub-commands (short form)
                                            | git help -g                the guide form
                                            |
                                            |         help on a command (ex commit)      (On Ubuntu the following 3 are identical)
                                            |               % git   help commit
                                            |               % git --help commit
                                            |               % git commit --help
                                            |
    1.8 Summary                             |
                                            |
2. Git Basics                               |
                                            |
    2.0 Configuration                       |
                                            |  ------------- CONFIGURATION WITH command 'config'
                                            |
                                            | git config       the command to configure GIT
                                            |                 (the information are store in one of the 3 files .gitconfig:
                                            |
                                            |          1     /etc/gitconfig     # System-wide         manipulated with --system (lowest precedence).
                                            |                                     it might be somewhere else (perhaps in /usr/local/etc/gitconfig),
                                            |                                     or may be entirely absent.
                                            |          2     ~/.gitconfig       # User-specific       manipulated with --global
                                            |          3     .git/config        # Repository-specific manipulated with --local   (highest precedence)
                                            |                                     (NB is only named "config" not ".gitconfig")
                                            |
                                            | git config -l      to list the settings   (almost like a simple cat  .gitconfig)
                                            |
                                            |--------------------------------------------------------------------------------------------------
                                            |                    git config -l:                                                cat .git/config:
                                            |--------------------------------------------------------------------------------------------------
                                            |         user.rmail=basile.stef@gmail.com                                           [core]
                                            |         user.email=basile.stef@gmail.com                                                  repositoryformatversion = 0
                                            |         core.repositoryformatversion=0                                                    filemode = true
                                            |         core.filemode=true                                                                bare = false
                                            |         core.bare=false                                                                   logallrefupdates = true
                                            |         core.logallrefupdates=true                                                 [remote "origin"]
                                            |         remote.origin.url=https://github.com/basilest/back-up.git                         url = https://github.com/basilest/back-up.git
                                            |         remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*                           fetch = +refs/heads/*:refs/remotes/origin/*
                                            |         branch.master.remote=origin                                                [branch "master"]
                                            |         branch.master.merge=refs/heads/master                                             remote = origin
                                            |               ^                                                                    ^      merge = refs/heads/master
                                            |               this dot '.' notation is the long name of the sections structure here
                                            |
                                            |         to work as ssh instead of https (and so to avoid filling user/password each time) set the url type in config:
                                            |
                                            |                              ex. git config -l | grep -i url
                                            |                                  remote.origin.url=https://github.com/companieshouse/chl-database.git
                                            |                                                ^    ^
                                            |
                                            |                                  change to :
                                            |                                  remote.origin.url=git@github.com:companieshouse/chl-database.git
                                            |                                                ^    ^
                                            |
                                            |                                  git config --edit
                                            |                                  [remote "origin"]
                                            |                                        url = https://github.com/companieshouse/chl-database.git
                                            |                                        git config -l | grep -i url
                                            |
                                            | git config --global user.name "Dan"
                                            | git config --global user.name "Jon Loeliger"           # in $HOME/.gitconfig
                                            | git config --global user.email "uuuuu@ddddd.com"
                                            | git config --edit <----    open the file ex in vim
                                            | git config --help
                                            | git config --unset --global user.email
                                            | git config --global alias.show-graph \           # to define alias
                                            |                     'log --graph --abbrev-commit --pretty=oneline'
                                            |
                                            |              now [git show-graph] is equal to
                                            |                  [git log --graph --abbrev-commit --pretty=oneline]
                                            |
                                            |
                                            | ------------- CONFIGURATION WITH ENV vars
                                            | $GIT_DIR
                                            | .git             .git/  is the default name for the repo dir, but it's not fixed.
                                            |                   GIT reads var $GIT_DIR to do this.
                                            |                   n.b. EACH (yes nb. EACH !!) repository has its own .git dir
                                            |                        and so all the files in there (not only the index, but
                                            |                        the ref (ex. the remotes !!! names and protocol used hhtps/git/...))
                                            |                        are settings specific to only that repo.
                                            |                        Another repo can have complete different settings
                                            |
                                            |
                                            | $GIT_EDITOR      to set a preferred editor (ex.  export GIT_EDITOR=vim   # .bashrc)
                                            |
                                            |                  anyhow GIT uses these steps in order to define the editor
                                            |                     1. $GIT_EDITOR  (ENV var)
                                            |                     2. core.editor   configuration option in one of the .gitconfig
                                            |                     3. $VISUAL     (ENV var)
                                            |                     4. $EDITOR     (ENV var)
                                            |                     5. vi
                                            |
                                            |                         Git will not process an empty (no text) commit.
                                            |                         So if I omit the -m it will open the editor (ex vi)
                                            |                         if a I close without saving or save it empty  -->  no commit wil be processed.
                                            |
                                            |
                                            |
                                            | $GIT_AUTHOR_NAME        another way instead of setting
                                            | $GIT_AUTHOR_EMAIL       in .gitconfig
                                            |
                                            |
    2.1 Getting a Git Repository            |  1' way: create a new git repo
                                            |       git init         to create a repo from scratch
                                            |
                                            |           1. cd in any dir you want   (ex cd ~/my_repo)
                                            |           2.     % git init                   create an empty repo ( the dir .git/  )
                                            |                                               the path is: ~/my_repo/.git
                                            |                                               and   ~/my_repo/  (the dir where "git init" was executed
                                            |                                               is considered  the "WORKING DIR"  (wd)
                                            |          (after some 'git add + git commit' the repo starts to live)
                                            |
                                            |  2' way: git clone <url>  [dir_name]
                                            |          git clone https://github.com/A
                                            |          git clone https://github.com/A  B    # if I want a dir named B instead of the REPO dir name
                                            |
                                            |         <url> formats          https://
                                            |                                git://
                                            |                                user@server:path_to_repo.git  (<-- uses ssh)
                                            |
                                            |         git clone dir1  dir2     # copy the repository full path dir1 into the path dir2.
                                            |                                    all is local
                                            |
    2.2 Recording Changes to the Repository |
                                            | git add a.txt           # add file a.txt  (not yet committed: it's staged) (regex: git add *.p[lm])
                                            | git add .               # add this dir and any sub-dir   (more general: git add dirA    add all the tree rooted by dirA)
                                            | git add --interactive   # useful to check one by one
                                            |
                                            | git status              # SHOW INDEX: shows what is staged and is going to be committed.
                                            |                           to see which files are in which state
                                            | git status -s    or --short   (for less verbose output)
                                            |
                                            |                 git status                                    |   git status -s     (or --short)
                                            |                 On branch master                              |    M README               M = Modified
                                            |                 Changes to be committed:                      |    MM Rakefile
                                            |                   (use "git reset HEAD <file>..." to unstage) |    A  lib/git.rb          A = new files (just Added)
                                            |                                                               |    M  lib/simplegit.rb
                                            |                       new file:   README                      |    ?? LICENSE.txt         ?? = not tracked
                                            |                           modified:   CONTRIBUTING.md         |    ^^
                                            |                                                                    12  : column 1: the file is staged
                                            |                                                                          column 2: the file is modified
                                            |                                                                                    e.g. Rakefile has been modified
                                            |                                                                                         again since last stage.
                                            |                                                                                         A commit will miss wd changes.
                                            |
                                            | git rm                  rm is the opposite of add.
                                            |                         It removes from index.
                                            |                         It's not usually what you want, as removing from index, means it will be
                                            |                         no more tracked, so it will be added into repo again only with another add.
                                            |                         To unstage a file use
                                            |                               % git reset HEAD a.txt  <--------------------
                                            |
                                            | git rm --cached  a.txt  # remove a file from the INDEX (not wd )
                                            | git rm  a.txt           # remove a file from both the INDEX & wd
                                            |                           (not performed by GIT    if wd version != current stored in repo, to avoid loosing info)
                                            | git rm -f  a.txt        # to force the remove even if  "         "    "                 "
                                            |
                                            |
                                            | git mv 1.txt 2.txt      # to rename a file instead of 3 steps:
                                            |                           1.3   mv 1.txt   2.txt
                                            |                           2.3   git rm -f  1.txt
                                            |                           3.3   git add    2.txt
                                            |
                                            | git log  2.txt               # show the story of 2.txt, so I miss the story of 1.txt before the rename
                                            | git log --follow 2.tx        # can go back on 1.txt
                                            |
                                            | .gitignore                          a .gitignore can be in any dir (of the repo)
                                            |                                     EACH FILE AFFECTS ITS DIRECTORY AND ALL SUBDIRECTORIES.
                                            |                                     It contains a list of filenames to ignore.
                                            |
                                            |                  - blank or # lines --> ignored
                                            |                  - a directory is a path ending with /   (ex build/)
                                            |                  - a file starting with / refers to cur dir (doesn't recursively go in subtrees) (ex /TODO)
                                            |                  - normal globbing works (ex. *.a)  (exclude any file with extension 'a')
                                            |                  - negation is with !  (ex !lib.a)  (NOT exclude file lib.a)
                                            |                  - ** to match any subdir (ex a/**/z  matches a/z a/b/z a/b/c/z)
                                            |
                                            |                  ex:
                                            |                             $ cat .gitignore
                                            |                               *.[oa]
                                            |                               *~          <--- ex aaaaaa.txt~
                                            |
                                            |                   git config --global core.excludesfile ~/.gitignore      <---- to set a global gitignore for any REPO
                                            |
                                            |
                                            | git diff / git diff --cached [or synonym --staged]
                                            |
                                            |         Git is based mainly on the unix diff:
                                            |
                                            |                       diff -u a b    -u prints in this format (called 'unified'):
                                            |                                      file (a) is marked as +++, (b) as ---
                                            |                                      +  a line starting with + means added in a
                                            |                                      -    "              "   -       removed from a
                                            |                                     ' '   "              a space   is a context line (a=b)
                                            |                                      @@ marks line num
                                            |
                                            |                             is the format used by the 'patch' program (written in 1985
                                            |                                             by Larry Wall)
                                            |                                             diff a.txt  a2.txt  > p.txt
                                            |                                             patch < p.txt               (modifies a.txt in current dir
                                            |                                                                          generating a2.txt)
                                            |                                             patch -R < p.txt             reverts, modifies back a.txt)
                                            |
                                            |
                                            |                       diff -r     make diff between 2 dir
                                            |                       diff -w     ignore white spaces
                                            |
                                            |
                                            |                      -------    add     -------  commit  --------
                                            |                        WD     ------>    index   ----->    REPO
                                            |                      -------            -------          --------
                                            |                                diff           diff --cached
                                            |
                                            |
                                            | git diff            shows what I've not staged yet (is still in my WD, modified)
                                            | git diff --cached   shows how would be the commit if I write it in the REPO
                                            | git diff --stat     shows only filenames with ++++++++  -------  for add/remove
                                            |
                                            |                     Initially, git diff is a large set of all modifications, and --cached is empty.
                                            |                     As you stage, the former set will shrink and the latter set will grow.
                                            |                     If all your working changes are staged and ready for a commit,
                                            |                     the --cached will be full and git diff will show nothing.
                                            |
                                            |
                                            | git diff <commit>          # wd     / specified COMMIT  (or HEAD if not specified)
                                            | git diff --cached [commit] # INDEX  / specified COMMIT  (or HEAD if not specified)
                                            |                              from Git 1.6.1 --staged is synonym for --cached
                                            | git diff <c1> <c2>         # diff between 2 commits
                                            |                              git diff 9da581d910c9c4ac93557ca4859e767f5caf5169 \
                                            |                                       ec232cddfb94e0dfd5b5855af8ded7f5eb5c90d6   # show the diff between 2 commit
                                            |
                                            |                            nb. the above diff refers to a tree (a dir) so like diff -r
                                            |
                                            |                  options:
                                            |                  --M                       for renamed files, print a customize output (not the usual)
                                            |                  -w or --ignore-all-space  skip diff on blanks
                                            |                  --stat                    adds statistics  <------ GREAT : use it to have a short abstract
                                            |                  --color                   adds color
                                            |
                                            | git diff / git log:       git diff:  compares 2 snapshots: a start / an end
                                            |                           git log:   compares all the history of Commits that goes from  start to end.
                                            |
                                            |                           git diff s..x   all branch-x-commits + all branch-s-commits (EXCLUDED the common fork commit, as it's = for both)
                                            |                           git log  s..x   all branch-x-commits, back to the fork from s (and stop there)
                                            |
                                            |                  A -- B -- C -- D -- E -- F -- G -- H    ----- master
                                            |                         \                                                  git diff master..dev: H/Z (EXCLUDED B)
                                            |                          \                                                 git log  master..dev: V/Z
                                            |                            V -- W -- X -- Y -- Z         ----- dev
                                            |
                                            |
                                            |                 ...     git diff master...dev      difference with the fork commit (B): V/Z
                                            |                         git log   "        "       all commits reachable from either BUT NOT BOTH: C/H + V/Z
                                            |
                                            |
                                            |                        Thus, related to the set fo involved Commits its:
                                            |
                                            |                                  log  ..   =   diff ...
                                            |                                  log  ...  =   diff ..
                                            |
                                            | git diff --stat master~5 master dir_x           # if you specify a dir (here dir_x) diff limits on that dir
                                            | git diff --stat master~5 master dir_x/main.c    # or limits on a single file (here main.c inside dir_x)
                                            | git diff -S"octopus" master~50                  # lists only diff containing specified String
                                            |
                                            |
                                            | git difftool                 insted of .git diff vimdiff is usually one of the tools
                                            | git difftool  --tool=vimdiff
                                            | git difftool  -t vimdiff     (short form, only -t without '=')
                                            |
                                            | git difftool  --tool-help    to see the list of supported diff tools
                                            |                              (any prog can be used (vimdiff, kompare, diff...)  specifying as difftool.<tool>.cmd
                                            |                              if then that cmd is not found in  $PATH
                                            |                              Git searches the config entry difftool.<tool>.path
                                            |                                    'git difftool --tool=<tool>' may be set to one of the following:
                                            |                                          vimdiff
                                            |                                          vimdiff2
                                            |
                                            |                                    The following tools are valid, but not currently available:
                                            |                                          araxis
                                            |                                          bc3
                                            |                                          codecompare
                                            |                                          deltawalker
                                            |                                          diffmerge
                                            |                                          diffuse
                                            |                                          ecmerge
                                            |                                          emerge
                                            |                                          gvimdiff
                                            |                                          gvimdiff2
                                            |                                          kdiff3
                                            |                                          kompare
                                            |                                          meld
                                            |                                          opendiff
                                            |                                          p4merge
                                            |                                          tkdiff
                                            |                                          xxdiff
                                            |
                                            | --------------------------  COMMIT
                                            |
                                            |                    A commit is the ONLY method of introducing CHANGES to a repository.
                                            |                    Commits usually are introduced by a developer, Git itself can introduce commit on a merge.
                                            |                    Commit is a snapshot of your project at a certain time.
                                            |
                                            |                    Git handles small commits well, so there is no need to wait until the last minute
                                            |                    to commit large changes. Smaller commits and more frequent merge cycles reduce the pain of
                                            |                    conflict resolution.
                                            |
                                            | git commit      a commit adds:
                                            |                           - 1 author of file (who wrote the change)
                                            |                           - 1 name of who added into git (usually the same author)
                                            |                           - 1 message "bla bla bla for the change"  (it's mandatory. An Empty msg, doesn't generate any Commit)
                                            |                           - 1 link to a TREE
                                            |
                                            |                 root Commit:         1st Commit of a project. The only one to have no 'parent'
                                            |                 normal Commit        has 1 parent or many (merge: 1 for each merged branch)
                                            |
                                            |                 A commit can be indicated as:
                                            |                     -1 explicit:      the 40-hex SHA1
                                            |                                       it's the absolute way to globally identify a Commit.
                                            |                                       As the SHA1 is unique in the world, you can be sure that you and
                                            |                                       another developer are addressing the same Commit, but also the same project,
                                            |                                       and at the same history moment.
                                            |                     -2 implicit:      the HEAD  which always points to the most recent Commit
                                            |                     -3 other different mechanisms for naming a Commit
                                            |
                                            |
                                            | git commit --all              # or -a: commit everything also not staged (not work for new dirctories)
                                            | git commit --interactive      # to select one by one
                                            | git commit -m "bla bla bla reason to the change" \
                                            |               --author="Stefano Basile <basile.stef.gmail.com>"
                                            |
                                            | git commit -C xxx                  reuse message from Commit xxx  (ex -C HEAD: reuse last message)
                                            |            -c xxx                  lowercase '-c' is like -C but opens editor (vi)
                                            |                                    both reuse author and timestamp from xxx
                                            |                    --reset-author   to update author and timestamp
                                            |
                                            |
                                            |
                                            |
                                            | git blame -L 35, init/version.c      to tell who changed a specified line (here 35) of a specified file (here version.c)
                                            |
                                            |
                                            |
                                            |
                                            | ex.
                                            | git log  --pretty=oneline     #  I see COMMIT info
                                            |
                                            |                5291796474869579f151f7821410e3ef96d1fa7e keyutils historical version 0.1
                                            |
                                            | git cat-file -p 5291796474869579f151f7821410e3ef96d1fa7   # see TREE hash
                                            |
                                            |                tree 0b0fa1646e27a7403017dfcbb09c161ce77e22da
                                            |                author David Howells <dhowells@redhat.com> 1266853045 +0000
                                            |                committer David Howells <dhowells@redhat.com> 1266853045 +0000
                                            |
                                            |                keyutils historical version 0.1
                                            |
                                            | git cat-file -p 0b0fa1646e27a7403017dfcbb09c161ce77e22d  # TREE content
                                            |
                                            | 100644 blob a43ea2126fb6b114bff5f8e003ee118e045dacf1    LICENCE.GPL
                                            | 100644 blob 8add30ad590a65db7e5914f5417eac39a64402a3    LICENCE.LGPL
                                            | 100644 blob c5b874893398bfe6d96815a53692701add5a685e    Makefile
                                            | 100644 blob c3e4bc3ee8d3af3f5145a446f147330656dc7bdd    README
                                            | 100644 blob 1519f974c9d495efc0109af362a8acc1a002aced    keyctl.1
                                            | 100644 blob f3e54bc723de7a91faa92475ddadd2d2569d1581    keyctl.c   ----------------.
                                            | 100644 blob 4fdd3b64a3807c13d03b473736c7d70faf6b3b17    keyutil.c                  |
                                            | 100644 blob 610f331a336c6ff48116a0c2358871c257dbd8d8    keyutil.h                  |
                                            | 100644 blob 58378c288c757dd2dbcb4e480115828a4a81e9e3    keyutils.spec              |
                                            | 100755 blob ece42a44d3f237f5d6fc96a4b46147d2ac350608    request-key-debug.sh       |
                                            | 100644 blob d506da395fa30741b23bdb21ff235b79ab9834cf    request-key.8              |
                                            | 100644 blob ef66c055ba2269a20c7c524a5785b07a032b4427    request-key.c              |
                                            | 100644 blob c1b18a76388e79150fccbaaf33328305c479ffc4    request-key.conf           |
                                            | 100644 blob 97abbbe2338011c4e53c70ddf649d14d676a8634    request-key.conf.5         |
                                            |                                  __________________________________________________|
                                            |                                 |
                                            | git cat-file -p f3e54bc723de7a91fa   <---- I see file keyctl.c
                                            |
                                            |
                                            |
                                            |
                                            | git commit      open the editor defined by $EDITOR or
                                            |                                         by git config --global core.editor
                                            |
                                            | git commit -v  also puts the diff of the changes in the editor
                                            | git commit -m "bla bla bla"  to not open the editor (passing the reason of commit at commandline)
                                            | git commit -a   to skip the staging phase ('git add'). I can commit directly all the tracked files
                                            |
                                            | git rm  a.txt   to remove a.txt BOTH from the stage AND wd.
                                            |                 If I already removed it in wd, git only removes form the stage
                                            |                 Remove from the stage means it will be no more tracked
                                            |                 so from the next snapshot (next commit) it will be gone.
                                            | git rm -f       to force the rm. In cases where after I staged a.txt, I then modified again
                                            |                 so it's in the stage and wd but they diff. To confirm I'm going to
                                            |                 remove both version I add option -f
                                            | git rm --cached  to remove only the stage version and preserve the wd file.
                                            | git rm log/\*.log   I can use globbing. Anyhow git has it's own filename expansion
                                            |                 in addition to the shell's one. So note here the '\'
                                            | git mv A B      to track rename of file A into B. Instead of this single command
                                            |                 I can explicitly do the 3: [mv A B] + [git rm A] + [git add B]
    2.3 Viewing the Commit History          |
                                            | ex: git log -1 --pretty="%h - %an (%cd -T:%t)" --stat -p  --graph --all --decorate 8ae1aa
                                            |
                                            | git log                                    shows commits history (from most recent back)
                                            | git log master                             to see the story of a branch
                                            | git log -4                                 print only last 4 Commits
                                            | git log -1 --pretty=oneline HEAD           print only 1 line of log (for Commit HEAD)
                                            | git log -1 --pretty=oneline efbb58           "              "       (for Commit starting with efbb58)
                                            | git log -p                                 print the diff introduced in each commit
                                            | git log -p 4fe86488                          "        "   of that Commit
                                            | git log --stat                             very very very useful stat info
                                            |                                            shows mod (ex +++++++++----   + insertions  - deletions)
                                            | git log --stat=200                         print lines of 200 chars len (useful when pathnames are long)
                                            |
                                            | git log --shortstat
                                            | git log --name-only                        list modified files
                                            | git log --name-status                      list files +  what was done:  added(A) / modified(M) / deleted(D)
                                            | git log --abbrev-commit                    short SHA1
                                            | git log --relative-date                    '5 months ago'    instaed of   'Wed Sep 24 14:19:24 2014'
                                            | git log --since, --after                    after  that time   --since="2008-10-01"
                                            | git log --until, --before                   before that time   --before="2 years 1 day 3 minutes ago"
                                            |                                             ex. git log --until=2.weeks
                                            |                                             ex. git log --since=2.weeks
                                            |                                        dates expressed in absolute ex "2008-01-15"
                                            |                                                        in relative "2 years 1 day 3 minutes ago"
                                            | git log --author                            edited by
                                            | git log --committer                         committed by
                                            | git log --grep                              only commits where grep find somethig !!!!! very useful (ex --grep="added*"
                                            | git log --grep   -i                         ignore case   (ex --grep 'psc' -i)
                                            | git log --grep   --grep   --grep            if more --grep are specified then:
                                            |                                             default output is any Commit with at least 1 --grep matching
                                            | git log --grep   --grep   --all-match       adding --all-match flag only Commits matching ALL greps
                                            |
                                            | git log --decorate                          to see which branch is active
                                            | git log --graph            adds a nice little ASCII graph showing your branch and merge history.
                                            |                            ex:   git log --graph --pretty=oneline --abbrev-commit
                                            | git log -Sstring           to search back when in a specified file changes the count of lines for a specified string
                                            |                            Be careful. If one, changing the file lines (adding and subtracting lines), at the end
                                            |                            the file has the same number of lines again with that string, this comand gets no output
                                            |
                                            |                            git log -Sinclude --pretty=oneline --abbrev-commit init/version.c
                                            |
                                            | git log <path>             the last arg is for an optional path (file or dir) and limits
                                            |                            to only commits where that path was touched
                                            | git log --                 as usual they end options before an optional <path> arg.
                                            | git log --pretty        to customize output (
                                            |                               --pretty=oneline   (usefull with --graph)
                                            |                                       =short
                                            |                                       =full
                                            |                                       =fuller
                                            |                                       ="%h - %an, %ar : %s"   my own format ex
                                            |                                        ca82a6d - Scott Chacon, 6 years ago : changed the version number
                                            |
                                            |                                        %h     commit (short) hash
                                            |                                        %H     commit (long)  hash
                                            |                                        %T     tree   (long)  hash
                                            |                                        %t     tree   (short) hash
                                            |                                        %P     Parent (long)  hashes
                                            |                                        %p     Parent (short) hashes
                                            |                                        %an    Author name
                                            |                                        %ae    Author e-mail
                                            |                                        %ad    Author date (format respects the --date=option)   ex --date=short
                                            |                                        %ar    Author date, relative
                                            |                                        %cn    Committer name
                                            |                                        %ce    Committer email
                                            |                                        %cd    Committer date
                                            |                                        %cr    Committer date, relative
                                            |                                        %s     Subject
                                            |
                                            |                       COLORS: they can be added with the syntax %Cxxxxx %Creset     where xxxx are red
                                            |                                                                                                    green
                                            |                                                                                                    blue
                                            |                                                                                                    (Yellow)  <0--- yes put () and uppercase Y
                                            |                                                                                                    (cyan)
                                            |                                                                                                    (white)
                                            |                                                                                                    (magenta)
                                            |                       git log --date=short --pretty="%Cgreen%h%Creset ( %ad ) - %C(Yellow)%an%Creset   [%C(cyan)%s%Creset]"
                                            |
                                            |
                                            | git show                        # show more info for the LAST commit
                                            | git show 9da581d910c9c4acf516   # show more info for the commit identified
                                            | git show-branch                 # show even more info
                                            | git show --pretty=fuller        #to see additional details about a given commit.
                                            | git show branchName:a.c         #to see a file (a.c) from branch 'branchName' (ex git show master:a.c)
                                            |                                 git show origin/master:src/spec/ch/fe/web/ewf/E90Forms/appointments/AP03ErrorValidation.html
    2.4 Undoing Things                      |
                                            | git commit --amend         to overwrite previous Commit (and have 1 instead of 2 consecutives).
                                            |                            If I didn't "add" anything in the stage, the new Commit will only
                                            |                            change the message text.
                                            |
                                            | git reset HEAD <file>      to unstage a file from index and track again as modified but not staged.
                                            |                            with option --hard reset is a dangerous command
                                            |
                                            | git checkout -- <file>     to reset changes also in wd, where <file> will be overwritten taking
                                            |                            the previous version from the last committed shapshot
                                            |                            (as it is a cmd for branches, go there to see more info)
                                            |
    2.5 Working with Remotes                |
                                            | git remote add [shortname] [url]    to add (ex. git remote add pb https://github.com/paulboone/ticgit)
                                            |             pb  https://github.com/paulboone/ticgit (fetch)
                                            |             pb  https://github.com/paulboone/ticgit (push)
                                            |             ^
                                            |             I can now use 'pb' as alias (instead of the longer URL):
                                            |                           ex. git fetch pb
                                            |
                                            | origin      after a clone from url .....  a shortname 'origin' (alias for the long url)
                                            |             is created by default. If I want anothe name xxxxx instead of 'origin':
                                            |                                      git clone -o xxxxx
                                            |
                                            | origin/master          the default name of the commit on the remote server
                                            |                        when I downloaded with a clone
                                            |
                                            | git remote rename pb paul   to rename the alias
                                            |
                                            | git remote rm paulA       to remove that shortname from the server list
                                            |
                                            | git remote                to see wich remote servers are configured
                                            |                           "origin"  is the default name of the server I cloned from
                                            | git remote -v             to see the URLs
                                            |                            ex:
                                            |                            origin  git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/keyutils.git (fetch)
                                            |                            origin  git://git.kernel.org/pub/scm/linux/kernel/git/dhowells/keyutils.git (push)
                                            |
                                            | "Remote-tracking"-branches are LOCAL bookmark that remind you
                                            |                        where the branches in your remote repositories were
                                            |                        the last time you connected.
                                            |                        So even if there is no network connection,
                                            |                        I've a remind.
                                            | remote/branch          The syntax used by this bookmark is:
                                            |                        name of remote +  '/' +  branch name
                                            |                                                    ____ origin/master
                                            |                                                   /
                                            |                        C1 _____ C2 _____ C3 ____ C4
                                            |                                                  ^
                                            |                                                master
                                            |
                                            |                       After a clone, the local master pointer
                                            |                       refers to the same commit of origin/master.
                                            |                       If I commit (locally), master moves on,
                                            |                       but origin/master remains fixed on C4.
                                            |                       This allows to bookmark C4 the day I come back
                                            |                       to the server where others maybe have pushed other stuff.
                                            |
                                            | more servers          If I add another remote (git remote add xxxx), for the same
                                            |                       project, it could be with last commit Cy (with y any value
                                            |                       even 3, i.e. Cy < C4 < Cx). For instance it's a lot time
                                            |                       nobody had pushed to that server, so the last Cy is old.
                                            |                       Anyhow, git adds another 'bookmark' (xxxx/master (also for
                                            |                       this server)
                                            |                       A git fetch from this server, will not download anything.
                                            |
                                            | git fetch [remote-name]   download all the new data
                                            |                           NB. it doesn't merge!
                                            | git fetch origin      allow to resynchronize to the last commit Cx on the server
                                            |                       so:
                                            |                           1. moves origin/master
                                            |                           2. download the state from C4 to Cx
                                            |                       nb. local master remains where it is. With a merge it also
                                            |                           moves: git pull = git fetch + merge.
                                            | git fetch pb
                                            |            A clone automatically adds that remote under the name “origin”.
                                            |            So, 'git fetch origin' fetches any new work that has been pushed to that server since
                                            |            I cloned (or last fetched from) it.
                                            |            'fetch' doesn’t automatically merge. To merge use 'git pull'
                                            |
                                            | git pull                  = fetch+merge
                                            | git push [remote-name] [branch-name]            to public a branch on a remote. The syntax to use is:
                                            |                                                 ex.    git push origin
                                            |                                                 ex. git push origin master
                                            |                                                     push works only if:
                                            |                                                     1. I have write permissions onto the server
                                            |                                                     2. nobody else has  pushed since I cloned/pulled. If there are other recent push,
                                            |                                                        I must first pull align to the new code and push.
                                            |
                                            | git remote show [remote-name]            git remote show origin
                                            | git remote show                          Shows which branch is automatically pushed  when you run git push.
                                            |                                          It also shows:
                                            |                                               remote branches on the server I don't have
                                            |                                               branches I still have while nomore on the server
                                            |
                                            | git clone                 clones a complete repo (this means all the branches included)
                                            | git clone -b branch       doesn't what you are expecting probably. It doesn't clone
                                            |                           only 1 branch from the remote repo, but does:
                                            |                                 1. clone all (normal .git clone)
                                            |                                 2. check_out that branch from all you now have locally.
                                            |
                                            | git clone -b branch --single-branch  does what expected (option --single-branch)
                                            |
                                            |
    2.6 Tagging                             |
                                            | annotated / lightweight    the 2 possible types for tags
                                            |      ^           ^
                                            |      |           |_____    just a pointer to a Commit (doesn't contain any data)
                                            |      |
                                            |      |_________________    they are full git obj. Contain:
                                            |                                       - tha tag name
                                            |                                       - a message
                                            |                                       - a date
                                            |                                       - an email (field "Tagger:")
                                            |
                                            |                          tags can’t be moved (to point to a different Commit)
                                            |                          they must be deleted and recreated.
                                            |
                                            | git checkout -b [branchname] [tagname]    ex. git checkout -b version2 v2.0.0
                                            |                         I can create+checkout a branch, adding a tag, anyhow as tags can't be moved
                                            |                         the tag will remain at the beginning of the branch (first forking Commit)
                                            |                         while on each Commit the branch will go on pointing to the HEAD.
                                            |
                                            | git tag    v1.4             this creates a lightweight tag on last Commit (HEAD)
                                            |                             'Lightweight Tag' store almost nothing apart Commit SHA1
                                            |                             and they are created with git tag with no -m -a -s options
                                            |
                                            | git tag -a   v1.4   -m 'my version 1.4'     this creates an annotated tag
                                            |               ^             ^               on last Commit (HEAD)
                                            |             tag name      message
                                            |
                                            | git tag -a v1.2 9fceb02     to tag a specific Commit (not the last)
                                            |
                                            | git tag                  Lists the available tags (alphabetical order)
                                            | git tag -l 'v1.8.5*'     list only the specified series
                                            |                          I can reg-expr-search for tags with -l
                                            |
                                            | .git/refs/tags/  the dir where tags for that repo are stored
                                            |
                                            |
                                            | git show v1.4      For a lightweight, shows the pointed Commit data
                                            |                    For an annotated shows the tag data
                                            |
                                            | git push origin v1.4    By default, the git push command doesn’t transfer tags to remote server
                                            |                         so this is the explicit command to move 1 tag there
                                            | git push origin --tags  This will transfer all tags that are not already there.
                                            |
                                            | git tag -d v1.4                     to delete a tag fromm the local repo
                                            |                                     (it removes in .git/refs/)
                                            | git push origin :refs/tags/v1.4     to delete on the remote repo
                                            |
                                            | git tag -m "Tag version 1.0" V1.0 3ede462        to add tag ('V1.0') and message
                                            |                                                  to the commit 3ede462
                                            |
                                            | git rev-parse V1.0                               to find the SHA1 of the tag
                                            | 6b608c1093943939ae78348117dd18b1ba151c6a
                                            |
                                            | git cat-file -p 6b608c                           to cat the tag:
                                            |
                                            |                 object 3ede4622cc241bcb09683af36360e7413b9ddf6c
                                            |                 type commit
                                            |                 tag V1.0
                                            |                 tagger Jon Loeliger <jdl@example.com> Sun Oct 26 17:07:15 2008 -0500
                                            |                 Tag version 1.0
                                            |
                                            |
    2.7 Git Aliases                         | git config         use .git config to set up an alias.
                                            |
                                            |                    git config --global alias.co checkout  <--- now: git co = git checkout
                                            |                    git config --global alias.br branch
                                            |                    git config --global alias.ci commit
                                            |                    git config --global alias.st status
                                            |                    git config --global alias.unstage 'reset HEAD --'
                                            |
                                            | !                  to alias on an external cmd (like in vi)
                                            |                    git config --global alias.visual '!gitk'
                                            |
    2.8 Summary                             |
                                            |
3. Git Branching                            |
                                            |
    3.1 Branches in a Nutshell              |
                                            | A branch is :
                                            |    . a pointer to a Commit (a lightweight movable pointer,
                                            |                             on each "git commit" the pointer moves ahead)
                                            |
                                            |    . phisically a simple file
                                            |      that contains the 40 bytes SHA-1 of the commit it points to
                                            |      + a newline (so a file of 41 bytes)
                                            |
                                            |    . branch names:      Of course some special chars (- . .. ^ ~ )  cannot be used.
                                            |                         'git help check-ref-format'
                                            |
                                            |         NB. 'git branch' is the command to both LIST and CREATE branches.
                                            |              with no arguments --> LIST.
                                            |
                                            | git branch                  list only local branches
                                            | git branch -r               list remote
                                            | git branch -a               list ALL
                                            | git rev-parse --abbrev-ref HEAD        to see the name of the current branch
                                            |
                                            |              "master" branch.
                                            |                there is nothing special. It's created by default on a "git init"
                                            |                and people don’t bother to change it.
                                            |
                                            |              "HEAD" it's the special pointer Git uses to point to the current active branch
                                            |
                                            |              So all the branches inside a proj, are a set of POINTERS (to COMMITs) !
                                            |              HEAD indicates the current branch, and so the current COMMIT.
                                            |
                                            |
                                            |     create branch:  Must only specify from which commit to fork (the default is the HEAD of the active branch)
                                            |                     and a name:
                                            |
                                            | git branch name_here [starting-commit]
                                            |
                                            |                     git branch prs/pr-1138               (considered starting from HEAD)
                                            |                     git branch prs/pr-1138 rel-2.3       (fork at Commit with tag rel-2.3, (relative id))
                                            |                     git branch prs/pr-1138 db7de5feebef8bcd18c5356cb47c337236b50c13        (absolute id)
                                            |
                                            |                     Git simply creates a named branch forking from the given commit. You can’t actually start work on
                                            |                     the branch until you switch to it.
                                            |
                                            | git merge-base original-branch new-branch      to identify the original commit from which a branch was started.
                                            |
                                            |
                                            |                     checking out branch:   your wd can reflect 1 branch at a time (the active branch: '*')
                                            |
                                            | git checkout <name>                         I switch to branch <name>.
                                            |                                             nb. HEAD is changed!!!!
                                            |                                             nb. wd is changed!: It’s important to note that when
                                            |                                                 you switch branch, files in your wd will change.
                                            |                                                 For any case where you risk to overwrite some file not saved
                                            |                                                 Git stops without checking out.
                                            | git checkout -f <name>                          to force even when overwriting.
                                            | git checkout -b <name>                          creating & checking out with 1 only command
                                            | git checkout -b <name> [starting commit]     when COMMIT is not HEAD
                                            |                                              ex: git checkout -b <name>  ad567f
                                            |
                                            | git checkout HEAD -- a.txt
                                            |
                                            |                      uses checkout not in the form of switching  branch
                                            |                      but to extract a file from the REPO and write it in wd:
                                            | git checkout -- a.txt              to discard changes in wd, overwriting a.txt
                                            | git checkout .                     do the same for all files of current dir
                                            | git checkout dirx                  do the same for all files of  dirx
                                            |
                                            | git checkout -m dev       to undo a merge     (or to exit a running merge:   git merge --abort)
                                            | git fetch + git checkout xxxxxx a.txt   to get a specific file from the remote repo
                                            |
                                            |
                                            | git log --oneline --decorate                   to see where branches point to
                                            | git log --oneline --decorate --graph --all
                                            |
                                            |
                                            |
                                            |                     'show-branch' provides more detailed output than 'git branch'.
                                            |                     -r (remote)
                                            |                     -a (remote + topic)
                                            |                     --more=n           n>0 instead of stopping (as default behaviour) at 1st common
                                            |                                        parent Commit, go on for more n Commits.
                                            |                                        n<0 show only indicated branches, without parents tree.
                                            |
                                            | git show-branch
                                            |
                                            |       ! [bug/pr-1] Fix Problem Report 1       \   this first section lists each branch on 1 line, with * for
                                            |        * [dev] Improve the new development     |  active branch and ! for the others.  Each branch is shifted
                                            |         ! [master] Added Bob's fixes.         /   1 char right (preserving this proper column also in the 2 section)
                                            |       ---
                                            |        * [dev] Improve the new development   \   This 2 section lists all the branch commits. * active, - merge, + normal
                                            |        * [dev^] Start some new development.   |
                                            |       + [bug/pr-1] Fix Problem Report 1       |
                                            |       +*+ [master] Added Bob's fixes.        /  <--- this commit is present in all the branches. That it's the last line
                                            |                                                 always, as 'git show-branch' goes back through all the commits up to the 1st
                                            |                                                 common to all!
                                            |                                                 To go on, use --more=n
                                            |
                                            |                             nb the '*'  shows the checkout branch, ex   * master
                                            |
                                            | git show-branch bug/pr-1 bug/pr-2       to limit only to the specified listed branches
                                            | git show-branch 'bug/*'     supports wildcards
                                            |
                                            |
                                            | git branch -d xxxxx       to delete branch   xxxxx
                                            |                             - of course the branch cannot be the active one, because no clear rule how to leave wd.
                                            |                             - secondly, Git won’t allow you to delete a branch that contains commits
                                            |                               that are not also present on the current branch (as they could be lost)
                                            | git branch -D xxxxx       to force delete branch (also losing Commits)
                                            |
                                            |                  Git does not maintain any form of history for branch names being created,
                                            |                  merged, or deleted. Once a branch name has been removed, it is gone.
                                            |                  The Commits on that branch, however, are separated. Git will eventually
                                            |                  prune away commits that are no longer referenced (by a branch or tag name).
                                            |                  They are collected as garbage by the git gc tool.
                                            |
                                            | git push origin :feature/april_17/ci_pflp_indicator   <----- this syntax will remove the REMOTE branch
                                            |                 ^                                            keeping the LOCAL. The magic is the ':'
                                            |
                                            | git branch -m xxxxxxxx      to rename the branch I'm on. .... So to renamed <old> to <new>
                                            |                 ^                                                  1. git checkout <old>
                                            |                 ^                                                  2. git branch -m <new>
                                            |                 ^                                                  3. remove the remore <old> & push <new>
                                            |
    3.2 Basic Branching and Merging         |
                                            |                    Before merging,  tidy up wd + index.
                                            |
                                            |                    to merge branch OUT into branch IN    --------*------ IN
                                            |                    do:                                          /
                                            |                                                           -----' OUT
                                            | git checkout IN
                                            | git merge    OUT
                                            |
                                            |            diff acts between HEAD (of active branch) (called 'ours') and
                                            |            the HEAD of the merging branch called MERGE_HEAD or 'theirs'.
                                            |            these command can be performed explicitly
                                            |
                                            | git diff HEAD             or git diff --ours     : wd   / HEAD
                                            | git diff MERGE_HEAD       or git diff --theirs   : wd   / MERGE_HEAD
                                            | git diff HEAD MERGE_HEAD  or git diff --base     : HEAD / MERGE_HEAD
                                            |
                                            |                          .git/MERGE_HEAD     contains the SHA1 of MERGE_HEAD Commit merging from
                                            |                                              the versions are marked as stage  numbers:
                                            |                                                         1  :  base
                                            |                                                         2  :  ours
                                            |                                                         3  :  theirs
                                            |
                                            |            NOTE: in easy cases any merged file (ex A.txt) is already OK.
                                            |                  Git diff mechanism was able to left it merged with no
                                            |                  other user edit required.
                                            |                  Merge conflicts not resolved, change physically the text inside A.txt
                                            |                  with mixed text from the 2 branches.
                                            |                  I open this mixed A.txt file, and edit to merge as I want.
                                            |
                                            | git status              both these 2 commands
                                            | git ls-files -u -s      help to see the set of files under merge conflicts
                                            |                                              (-u : only file  under conflict)
                                            |                                              (-s : all  files with STAGE NUMBERS (1,2,3))
                                            |                                              ex.
                                            |                                              git ls-files -s
                                            |                                                  100644 ce013625030ba8dba906f756967f9e9ca394464a 1  A.txt
                                            |                                                  100644 e63164d9518b1e6caf28f455ac86c8246f78ab70 2  A.txt
                                            |                                                  100644 562080a4c6518e1bf67a9f58a32a67bff72d4f00 3  A.txt
                                            |
                                            |                                              N.B. normally a file (with no conflicts) has stage number 0
                                            |                                                  100644 562080a4c6518e1bf67a9f58a32a67bff72d4f00 0  A.txt
                                            |
                                            |                                              I can then look for ex at 2 A.txt :
                                            |                                              git cat-file -p e63164d951
                                            |
                                            | git diff :1:A.txt :3:A.txt     syntax to diff between STAGE NUMBERS.
                                            |
                                            |
                                            | git log --merge --left-right -p
                                            |             \          \      \_ shows the commit message and the patch associated
                                            |              \          \_______ marks with < the Commits from left ('ours' part)
                                            |               \                         and > the right ('theirs' part)
                                            |                \________________ shows only Commits that produced conflicts
                                            |
                                            | git log --merge --left-right -p  A.txt       if you only want to display for a single file A.txt
                                            |
                                            |
                                            |                undo a merge:          to go back at the point before the 'git merge'  (so having a clean wd)
                                            |
                                            | git reset --hard HEAD         # if 'git commit' not done yet
                                            | git reset --hard ORIG_HEAD    # if 'git commit' already done
                                            | git reset --hard @~5          removes the last 5 commits
                                            | git checkout -m               # from Git ver. 1.6.1
                                            |
                                            | merge modifications from branch B into master:
                                            |              1. git checkout master     (I first switch to the branch where I want to merge into)
                                            |              2. git merge    B          (then I use command "git merge")
                                            |
                                            | "fast-forward"    in the cases where the branch B (that is a COMMIT pointed by pointer B)
                                            |                   is an upstream (one commit that can be reached by following ahead
                                            |                   from master) of the commit you’re on, Git simply moves the pointer forward.
                                            |                             ____ C3 ___C4               ____ C3 ___C4
                                            |                            /           ^               /           ^
                                            |                   C1 -- C2             B      C1 -- C2             B/master
                                            |                         ^
                                            |                       master
                                            |
                                            | git branch -d <name>     to delete branch <name>
                                            |                          Once a branch is merged, I can decide to delete it.
                                            |
                                            | "three-way merge" in the cases where the 2 branches went both ahead from their
                                            |                   common ancestor (C2), the merge is a three-way merge
                                            |                   where the 3 means: C2, C5, C4.
                                            |
                                            |                             ____ C3 ___C4                 ____ C3 ___C4
                                            |                            /           ^                 /             \
                                            |                           /            B                /               \
                                            |                  C1 -- C2 -- C5                C1 -- C2 -- C5 -----------C6
                                            |                              ^                                           ^
                                            |                            master                                      B/master
                                            |
                                            |                   nb. while "fast-forward" only moves a pointer, here git creates
                                            |                       a new Commit (C6) and then moves both the pointers
                                            |
                                            | CONFLICTs         if some <k> files of total <N> involved in the merge
                                            |                   cannot be automatically merged then:
                                            |                        1. git didn't create COMMIT C6
                                            |                        2. N-k files are already automatically updated
                                            |                        3. k files are modified by git with lines like:
                                            |                             <<<<<<< HEAD:index.html  <--- this is the 'master' part
                                            |                                       ...
                                            |                             =======
                                            |                                       ...
                                            |                             >>>>>>> iss53:index.html
                                            |                        4. use git status the see the k files
                                            |                        5. edit each of the k files in the selected sections
                                            |                        6. use "git add" for all the k files
                                            |                        7. use "git commit" to create the C6 merged commit
                                            |
                                            | git mergetool          to use one of the possible tools to see graphically
                                            |                        the merge conflicts.
                                            |                        (use git mergetool --tool-help   to see the list)
                                            |
    3.3 Branch Management                   | git branch             to see the active branches (a * indicates the checkout (HEAD))
                                            | git branch -a          to see all the project branches
                                            | git branch -v          to see the last commit for each branch
                                            | git branch --merged    to see the list of branches already merged in the branch
                                            |                        where I'm on. All those branches are candidate to be deleted
                                            |                        with "git branch -d"
                                            | git branch --no-merged to see the list of branches not yet merged.
                                            |                        Because they contain work that isn’t merged yet,
                                            |                        trying to delete with "git branch -d" will fail.
                                            |                        To force use -D
    3.4 Branching Workflows                 |
                                            |
    3.5 Remote Branches                     |
                                            |
    3.6 Rebasing                            |
                                            | --------------------------  ALTERING COMMITS
                                            |                          Git allows to re-write Commit history.
                                            |
                                            | git reset            : it acts on Commits like checkout acts on branches. This means that I can
                                            |                        switch HEAD to point to a Commit different from the last one.
                                            |                        As a checkout changes both the Index and the files in wd, 'git reset'
                                            |                        can change also Index and wd. The behaviour is related to  with which of the
                                            |                        3 options it is executed:
                                            |                        HEAD is switched. The previous values is stored in ORIG_HEAD.
                                            |
                                            |                              # moves HEAD to point to that Commit:
                                            |                              #                         HEAD     wd       index
                                            | git reset --soft  commit     #                          Y       -         -
                                            | git reset --mixed commit     # [default]                Y       -         Y   <- = to reset index to the status = repo without losing changes in WD
                                            | git reset --hard  commit     # already seen above.      Y       Y         Y
                                            |
                                            |   ex 1 - remove a file from the index (leaving all unchanged)
                                            |         git add foo.c                    # I accidentally stage a file
                                            |         git ls-files -->  ... foo.c      # I see it among other
                                            |         git reset HEAD foo.c             # Remove from index (set HEAD as if it was before it was present)
                                            |         git ls-files -->  ...            # removed
                                            |
                                            |   ex 2 - remove the last commit (not changing wd) so that I can modify again what in wd and commit
                                            |             git reset HEAD^              # go 1 commit back (without change wd)
                                            |         .... edit in wd
                                            |         git commit
                                            |
                                            |   ex 3 - only change the message of last Commit
                                            |         git reset --soft HEAD^           # goes 1 commit back (without changing wd / index)
                                            |         git commit                       # you can add the new message
                                            |
                                            |   ex 4 - remove 2nd Commit
                                            |             git reset --hard HEAD^       # go 1 commit back (change wd !! and index)
                                            |             ls                           # I see as it was
                                            |
                                            | cherry-pick            : to copy a commit from another branch
                                            |                          Usually requires to manage some conflicts:
                                            |                          ex {here also the order of Commits between the 2 branches is altered}
                                            |
                                            |                          git   checkout master
                                            |                          git   cherry-pick my_dev^      copying commit last-1
                                            |                          git   cherry-pick my_dev~3                    last-3
                                            |                          git   cherry-pick my_dev~2                    last-2
                                            |                          git   cherry-pick my_dev                      last
                                            |
                                            |
                                            | git revert             : git revert master~3
                                            |                          is the revert of cherry-pick. It also adds a copy of a Commit
                                            |                          but adds the opposite of what the original Commit did.
                                            |                          It's normally used inside the same branch, to revert and old
                                            |                          Commit that was bugous.
                                            |
                                            | git commit --amend     : to change last Commit. If the last Commit was wrong somehow (in the message, in the number of files
                                            |                          in some typos in one or more of the committed files), you can prepare to do another fixing Commit
                                            |                          (so in the case with proper previous new 'git add ..')
                                            |                          Instead of the usual 'git commit' which will just add the fixing Commit (leaving also the wrong one)
                                            |                          you can execute 'git commit --amend' which will overwrite the previous one.
                                            |
                                            | git rebase             : move a sequence of Commits from a place to another (same or other branches)
                                            |                         ex the pair of commands
                                            |                            git checkout topic
                                            |                            git rebase master
                                            |                         can be  collapsed in 1 single command 'git rebase master topic'
                                            |                         and moves  branch topic ahead as it was forked from the HEAD of master
                                            |                         insted of a previous fork Commit
                                            |
                                            |               'git rebase master topic'
                                            |
                                            |                          --*--*--*--*  master      --*--*--*--*  master
                                            |                             \                                  \
                                            |                              \--*--*   topic                    \--*--*   topic
                                            |
                                            |               'git rebase --onto master topic^ dev'
                                            |
                                            |                          --*--*--*--*  master                   /--* dev
                                            |                             \                                  /
                                            |                              \--*--*   topic       --*--*--*--*  master
                                            |                                  \                    \
                                            |                                   \--* dev             \--*--*   topic
                                            |
                                            |
                                            |               git rebase usually requires to manage some conflicts.
                                            |               This will cause to stop for each commit and edit some file in the index.
                                            |               To resume
                                            |                               git rebase --continue
                                            |               To skip a Commit
                                            |                               git rebase --skip    (but it's never a good choice)
                                            |               To abort all
                                            |                               git rebase --abort
                                            |
                                            |
                                            | git bisect    To make Git narrow a search back from a range you specify and answering questions via via.
                                            |             1.   It is essential that you start the git bisect process from a clean working directory.
                                            |                  Starting with a dirty one is asking for trouble; it could easily be lost.
                                            |
                                            |             2.   git bisect start            to init the bisect.
                                            |                                              Git detaches HEAD to an anonymous branch and start working.
                                            |
                                            |             3.   git bisect bad              it's considering HEAD as a starting bad Commit to search back
                                            |
                                            |             4.   git bisect good v.2.6.27    set Commit tagged v.2.6.27 as a presumed good point where things were ok
                                            |             5.   git bisect bad     git bisect good  ...... git bisect  bad  <---- answering questions
                                            |             6.   git bisect log     to see a log of the process
                                            |
                                            |             -.   git bisect replay       to see again  (it uses the log file as input).
                                            |             -.   git bisect visualize    to see with gitk  (if var DISPLAY is set, othervise Git will use git log)
                                            |             -.   git bisect visualize --pretty=oneline
                                            |
                                            |             7.   when you are finished it is vital that you tell Git that you have finished.
                                            |                  So Git restablish the detached HEAD : $ git bisect reset      places back on your original branch
                                            |                                     $ git branch
                                            |                                     * (no branch)
                                            |                                     master
                                            |                                     $ git bisect reset
                                            |                                     Switched to branch "master"
                                            |                                     $ git branch
                                            |                                     * master
                                            |
                                            |
    3.7 Summary                             |
                                            |
4. Git on the Server                        | --------------------------  Git on the Server
                                            |   - 4 Protocols:
                                            |
                                            |       1. Local:    is a local filesystem (ex shared folders in the network through NFS), so a dir on a local disk.
                                            |
                                            |                    git clone /opt/git/project.git            filesystem path (will hardcopy on my disk)
                                            |                    git clone file:///opt/git/project.git     netpath (slower, as will operated remotely)
                                            |
                                            |                    git remote add local_proj /opt/git/project.git   (<-- used filesystem path reference)
                                            |
                                            |                    there are no real pros. Control access rights on that dir, is not secure, and NFS is
                                            |                    slower than SSH.
                                            |
                                            |       2. HTTP:    It's now better (Smart HTTP) similar to SSH, than some time ago (Dumb HTTP).
                                            |                   git clone https://example.com/gitproject.git
                                            |
                                            |       3. SSH:     git clone ssh://user@server/project.git
                                            |                   git clone user@server:project.git
                                            |
                                            |                   Pros: (Compact / Secure) transer + daemon usually available
                                            |                   Cons: generate SSH keys locally and upload their public key to the server. Good
                                            |                         in an office / corporate.network, not for  anonymous access / collaborative.
                                            |
                                            |       4. Git:     git clone git@github.com:whatever
                                            |
                                            |                   Daemon (included in GIT package) which listen on port 9418
                                            |                   Works as SSH but with no authentication. As lacks the encryption and authentication overhead
                                            |                   it's faster than SSH, but not secure.
                                            |                   It also requires a port that most firewalls have closed, and an 'xinetd' configuration , which
                                            |                   isn’t always a walk in the park.
                                            |
                                            |   - Download on your my_dir
                                            |                  git clone https://github.com/basilest/vim-stuf      download from server and create ./vim-stuf/.git
                                            |                  git clone --bare my_project my_dir.git              --bare clearly says from scratch. So creates dirs
                                            |
                                            |   - Store in a SSH server
                                            |                  if I own SSH server called 'git.example.com' with a folder to put stuff there (ex. /opt/git)
                                            |                  I can copy my_dir
                                            |                  scp -r my_dir.git user@git.example.com:/opt/git
                                            |
                                            |   - SSH keys     Probably a user key is already available:  ls ~/.ssh             (otherwise built with 'ssh-keygen')
                                            |                                 authorized_keys2
                                            |                                 id_dsa       <----- private key (can be also 'id_rsa')
                                            |                                 known_hosts
                                            |                                 config
                                            |                                 id_dsa.pub    <---- public key
                                            |
                                            |   - Configure SSH server:  add a 'git' user shared among all the project developers:
                                            |                            sudo adduser git
                                            |                            su git
                                            |                            cd
                                            |                            mkdir .ssh && chmod 700 .ssh
                                            |                            touch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys
                                            |                            cat /tmp/id_rsa.john.pub    >> ~/.ssh/authorized_keys
                                            |                            cat /tmp/id_rsa.josie.pub   >> ~/.ssh/authorized_keys
                                            |                            cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys
                                            |                            cd /opt/git
                                            |                            mkdir project.git
                                            |                            cd project.git
                                            |                            git init --bare
                                            |                            cat /etc/shells    <--- store all possible shells (add the path of git limited shell)
                                            |                            which git-shell    /usr/bin/git-shell
                                            |                            sudo vim /etc/shells
                                            |                            sudo chsh git      <--- add git to user able to login with a shell (chsh: change login shell)
                                            |                                                    user xxx can log from remote: ssh git@gitserver
                                            |
                                            |   - Git Daemon:            git daemon --reuseaddr --base-path=/opt/git/ /opt/git/
                                            |                                       --reuseaddr allows the server to restart without waiting for old connections to time out
                                            |                                       --base-path allows people to clone without specifying the entire proj path
                                            |
                                            |                            add it as a daemon (in file /etc/event.d/local-git-daemon) :
                                            |                                  start on startup
                                            |                                  stop on shutdown
                                            |                                  exec /usr/bin/git daemon \
                                            |                                      --user=git --group=git \
                                            |                                      --reuseaddr \
                                            |                                      --base-path=/opt/git/ \
                                            |                                      /opt/git/
                                            |                                  respawn
                                            |
                                            |                            initctl start local-git-daemon       To get it running without having to reboot
                                            |
                                            |                            For each repo which the user can access, go in repo dir and:
                                            |                                     touch git-daemon-export-ok        the presence of this file
                                            |                                                                       tells the daemon it can allow access on this repo.
                                            |
                                            |   - Smart HTTP:            is implemented trhough a CGI script: 'git-http-backend'
                                            |                            which reads the coming  'git fetch'  and  'git push'.
                                            |                            It does not implement any authentication itself. It relies on any "CGI-capable web server"
                                            |                            Usually is used Apache.
                                            |
                                            |                            sudo apt-get install apache2 apache2-utils
                                            |                            a2enmod cgi alias env      <--- add also  mod_cgi, mod_alias, mod_env modules
                                            |
                                            | ______________________________________________
                                            |
    4.1 The Protocols                       |
                                            |
    4.2 Getting Git on a Server             |
                                            |
    4.3 Generating Your SSH Public Key      |
                                            |
    4.4 Setting Up the Server               |
                                            |
    4.5 Git Daemon                          |
                                            |
    4.6 Smart HTTP                          |
                                            |
    4.7 GitWeb                              |
                                            |
    4.8 GitLab                              |
                                            |
    4.9 Third Party Hosted Options          |
                                            |
    4.10 Summary                            |
                                            |
5. Distributed Git                          |
                                            |
    5.1 Distributed Workflows               |
                                            |
    5.2 Contributing to a Project           |
                                            |
    5.3 Maintaining a Project               |
                                            |
    5.4 Summary                             |
                                            |
                                            |
                                            |
6. GitHub                                   | -------------------------------------------------
                                            | GITHUB:
                                            | GitHub uses SHA256 as a hashing algorithm for SSL,
                                            | and that was not added to OpenSSL until version 0.9.8o:
                                            |
                                            | For old installations this could return an error while
                                            | running for example a   "git clone https:....."
                                            |
                                            | Cloning into 'chl-java-xsltservlet'...
                                            | fatal: unable to access 'https://github.com/companieshouse/chl-java-xsltservlet.git/':
                                            | error:0D0890A1:asn1 encoding routines:ASN1_verify:unknown message digest algorithm
                                            |
                                            |
                                            | SOLUTION 1: export GIT_SSL_NO_VERIFY=1
                                            |             GIT_SSL_NO_VERIFY=true git clone https://domain.com/path/to/git
                                            |
                                            | SOLUTION 2: use –c option to modify a global var only for that command
                                            |             git -c http.sslVerify=false <gitSubCommand>
                                            | -------------------------------------------------
                                            |
    6.1 Account Setup and Configuration     |
                                            |
    6.2 Contributing to a Project           |
                                            |
    6.3 Maintaining a Project               |
                                            |
    6.4 Managing an organization            |
                                            |
    6.5 Scripting GitHub                    |
                                            |
    6.6 Summary                             |
                                            |
7. Git Tools                                |
                                            |
    7.1 Revision Selection                  |
                                            |
    7.2 Interactive Staging                 |
                                            |
    7.3 Stashing and Cleaning               |
                                            |   git stash                   save changes in a hidden space  (see below: "hidden space")
                                            |   git stash save "..."        to associated a mnemonic message (usueful when working with many stashes)
                                            |                               N.B.  only tracked files are saved
                                            |   git stash -u                (or --include-untracked ) to stash also untracked files
                                            |   git stash -a                (or --all ) to stash also ignored files
                                            |   git stash -p                (or --patch ) to interactively select which files to stash
                                            |                                             ?   help
                                            |                                             y   select
                                            |                                             n   skip
                                            |                                             s   split
                                            |                                             /   regex
                                            |                                              .....
                                            |
                                            |   git stash pop               remove from the hidden space and applies
                                            |   git stash apply             restore but don't remove from stash (so I can reapply on different branches)
                                            |   git stash branch bbbb       creates a new branch bbbb and applies the changes
                                            |                               git stash branch bbbb stash@{2}       <-- to select a specific entry
                                            |
                                            |   git stash list              to see the stack   (the tag  "WIP" – means work in progress)
                                            |   git stash pop stash@{2}     to apply stash num 2 from top
                                            |
                                            |   git stash show              to see what files are in that stash
                                            |   git stash show -p           (--patch) to see the full list of changes
                                            |   git stash show stash@{2}
                                            |
                                            |   git stash drop stash@{2}    to remove that entrye in that stash
                                            |   git stash clear             to remove all
                                            |
                                            |   .git/refs/stash             the "hidden space"
                                            |                               - stashing creates normal commits there (so I can even operate as usual
                                            |                                 ex. git log --oneline --graph stash@{0}
                                            |
    7.4 Signing Your Work                   |
                                            |
    7.5 Searching                           |
                                            |
    7.6 Rewriting History                   |
                                            |
    7.7 Reset Demystified                   |
                                            |
    7.8 Advanced Merging                    |
                                            |
    7.9 Rerere                              |
                                            |
    7.10 Debugging with Git                 |
                                            |
    7.11 Submodules                         |
                                            |
                                            |   git submodule add https://gith..../xxxx
                                            |                                              this will clone that repo ...xxxx
                                            |                                              into a new dir xxxx inside current dir
                                            |
                                            |                                              The result is also a file .gitmodules
                                            |                                              inside current dir:
                                            |
                                            |   .gitmodules                                example of `cat gitmodules`:
                                            |
                                            |                                              It contains a [submodule "xxxx"]
                                            |                                              for each submodule:
                                            |
                                            |                                            | [submodule "euler_proj"]
                                            |                                            | 	path = euler_proj
                                            |                                            | 	url = https://github.com/basilest/euler_proj
                                            |                                            | [submodule "xhat"]
                                            |                                            | 	path = xhat
                                            |                                            | 	url = https://github.com/basilest/xhat
                                            |                                            |
                                            |
                                            |   git submodule add https://gith..../xxxx  qui/    <-- if you want to have a different path
                                            |                                            ^
                                            |                                                    in this case the .gitmodules will be:
                                            |
                                            |                                            | [submodule "qui"]
                                            |                                            | 	path = qui
                                            |                                            | 	url = https://github.com/basilest/euler_proj
                                            |
                                            |   git log  --submodule                       to add also the submodule info
                                            |   git diff                                   works as usaul but shows that dir xxxx
                                            |   git diff --submodule                       to have a better output
                                            |                                              (It can also be set as a fixed config value:
                                            |                                              git config --global diff.submodule log)
                                            |                                                                  ^    ^         ^
                                            |
                                            |
                                            |
                                            |                                              git config status.submodulesummary 1       to have the command 'git status' tracking better
                                            |                                                          ^     ^                ^       even the submodule like the other normal files.
                                            |
                                            |
                                            |
                                            |
                                            |   git clone                                  The clone of a repo WITH submodules inside
                                            |                                              will leave the dirs EMPTY  (it will not clone even the
                                            |                                              sub repos)
                                            |
                                            |   git clone --recursive                      To clone even ALL submodules in their dirs
                                            |
                                            |   git submodule init                         1/2: to init the local config file                  (if no [clone --recursive] has been used)
                                            |   git submodule update                       2/2 to FETCH / CLONE the submodule in the EMPTY dir (if no [clone --recursive] has been used)
                                            |
                                            |
                                            |                                                 cd xxxx  && git fetch / git merge  ( &&    <-- mandatory
                                            |                                                 cd .. && git diff --submodule )            <-- optional
                                            |
                                            |   git submodule update --remote              performs the previous set of (mandatory) commands, in 1
                                            |   git submodule update --remote xxxx         If I have many submodules and I want to update only xxxx
                                            |                                              (without xxxx il will update ALL subm.)
                                            |
                                            |                                              the (fecth & merge) work by default on branch master
                                            |                                              so it's better to specify explicitly the branch
                                            |
                                            |                                               git config submodule.xxxx.branch bbbb
                                            |                                                                         ^      ^
                                            |                                               git config -f .gitmodules submodule.xxxx.branch bbbb      the same  as before
                                            |                                                           ^  ^                                          but saving into .gitmodules
                                            |                                                                                                         so it remains selfcontained in the repo
                                            |                                                                                                         if I give it to others
                                            |                                              REMEMBER: an 'update' works on MASTER (or bbbb if specified)
                                            |                                              so if I was on another branch, an implicit checkout to MASTER
                                            |                                              or bbbb is done!
                                            |
                                            |
                                            |   git submodule update --remote --rebase     To rebase my local subm
                                            |                                              merging my local commits I did directly on the subm
                                            |                                              with any new remote commits.
                                            |   git submodule update --remote --merge      it is like the 'rebase' but when I didn't yet locally
                                            |                                              committed some changes (so some modified files are not
                                            |                                              yet saved in to the index with a proper commit)
                                            |                                              So I save 1 commit (instead 1 local commit + 1 merge,
                                            |                                              only 1 (local + merge))
                                            |
                                            |                                              NB. As the 'update' perform an implicit checkout
                                            |                                                  to MASTER or bbbb, any LOCAL modified files
                                            |                                                  NOT yet committed, is not overwritten, anyhow
                                            |                                                  the submodule is in an undefined status, of
                                            |                                                  'detached HEAD'. To fix this, checkout the unsaved branch
                                            |                                                  and commit.
                                            |
                                            |                                              cd xxxx && git push        If I changed the files in the xxxx dir of the subm
                                            |                                                                         then I cd in xxxx and push to the server
                                            |
                                            |   git push --recurse-submodules=check        with --recurse-sub... option I can stay in the upper dir
                                            |                                              and push my main proj. after having push any commit
                                            |                                              I would have done directly in the subm
                                            |                                              the 'check' value just stops in case there are some
                                            |                                              missing commits in the subm.
                                            |                                              The other val is
                                            |                                                               --recurse-submodules=on-demand
                                            |                                              that pushes any missing commit first.
                                            |
                                            |                                              to set as config preferences:
                                            |
                                            |                                                  git config push.recurseSubmodules check
                                            |                                                  git config push.recurseSubmodules on-demand
                                            |
                                            |
                                            |   git submodule foreach '.........'          the 'foreach' construct allows to spawn a command
                                            |                                              on each submodules at once. Ex:
                                            |                                                     git submodule foreach 'git stash'
                                            |                                                     git submodule foreach 'git diff'
                                            |                                                     git submodule foreach 'git checkout -b featureA'
                                            |
                                            |--------------------------------------------------------------- Commiting with Submodules:
                                            |
                                            |      after changing the original repo  (so change & add & commit & push)
                                            |      to change ALL the other repos that use it, as a submodule do this for each of them:
                                            |
                                            |
                                            |         for i in all the repo
                                            |
                                            |              cd i
                                            |              git submodule init                 <---- do this in root repo dir
                                            |              git checkout -b feature/<name>     <---- create a branch in root repo dir
                                            |              cd api-enumerations                <---- cd into the dir of the submdoule
                                            |              git checkout develop
                                            |              git pull
                                            |              git checkout <branch where the changes were made on the repo>
                                            |              git pull (probably wont need this as it will be the first time you checkout this branch in the submodule, but you can do it for safety/sanity)
                                            |              cd ..
                                            |              git add api-enumerations
                                            |              git commit (message usually just contains bump submodule and the jira ticket number)
                                            |              git push
                                            |
                                            |---------------------------------------------------------------
    7.11 subtree   (chap added by me)       |                                           - subtree is an alternative to submodules
                                            |                                             and available from very old ver of Git.
                                            |
                                            |                                           - subtree does not add extra meta files (i.e. .gitmodule)
                                            |
                                            |
                                            |                                           - subtree does not require
                                            |
                                            |
                                            |                                           - subtree does not add extra meta files (i.e. .gitmodule)
                                            |
                                            |
                                            |                                           - subtree does not add extra meta files (i.e. .gitmodule)
                                            |
                                            |
                                            |                                           - subtree does not add extra meta files (i.e. .gitmodule)
                                            |
                                            |
    7.12 Bundling                           |
                                            |
    7.13 Replace                            |
                                            |
    7.14 Credential Storage                 |
                                            |
    7.15 Summary                            |
                                            |
8. Customizing Git                          |
                                            |
    8.1 Git Configuration                   |
                                            |
    8.2 Git Attributes                      |
                                            |
    8.3 Git Hooks                           |
                                            |
    8.4 An Example Git-Enforced Policy      |
                                            |
    8.5 Summary                             |
                                            |
9. Git and Other Systems                    |
                                            |
    9.1 Git as a Client                     |
                                            |
    9.2 Migrating to Git                    |
                                            |
    9.3 Summary                             |
                                            |
10. Git Internals                           |
                                            |
    10.1 Plumbing and Porcelain             |
                                            |
    10.2 Git Objects                        |
                                            |
    10.3 Git References                     |
                                            |
    10.4 Packfiles                          |
                                            |
    10.5 The Refspec                        |
                                            |
    10.6 Transfer Protocols                 |
                                            |
    10.7 Maintenance and Data Recovery      |
                                            |
    10.8 Environment Variables              |
                                            |
    10.9 Summary                            |
                                            |
                                            |
                                            |
A1. Git in Other Environments               |
                                            |
    A1.1 Graphical Interfaces               |
                                            |
    A1.2 Git in Visual Studio               |
                                            |
    A1.3 Git in Eclipse                     |
                                            |
    A1.4 Git in Bash                        |
                                            |
    A1.5 Git in Zsh                         |
                                            |
    A1.6 Git in Powershell                  |
                                            |
    A1.7 Summary                            |
                                            |
A2. Embedding Git in your Applications      |
                                            |
    A2.1 Command-line Git                   |
                                            |
    A2.2 Libgit2                            |
                                            |
    A2.3 JGit                               |
                                            |
A3. Git Commands                            |
                                            |
    A3.1 Setup and Config                   |
                                            |
    A3.2 Getting and Creating Projects      |
                                            |
    A3.3 Basic Snapshotting                 |
                                            |
    A3.4 Branching and Merging              |
                                            |
    A3.5 Sharing and Updating Projects      |
                                            |
    A3.6 Inspection and Comparison          |
                                            |
    A3.7 Debugging                          |
                                            |
    A3.8 Patching                           |
                                            |
    A3.9 Email                              |
                                            |
    A3.10 External Systems                  |
                                            |
    A3.11 Administration                    |
                                            |
    A3.12 Plumbing Commands                 |
                                            |





usage: git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

available git commands in '/usr/lib/git-core'

000  add                      :
001  add--interactive         :
002  am                       :
003  annotate                 :
004  apply                    :
005  archive                  :
006  bisect                   :
007  bisect--helper           :
010  blame                    :
011  branch                   :
012  bundle                   :
013  cat-file                 :
014  check-attr               :
015  check-ignore             :
016  check-mailmap            :
017  check-ref-format         :
020  checkout                 : to switch branch, or also to extract a given file from REPO, overwriting the wd
021  checkout-index           :
022  cherry                   :
023  cherry-pick              : to copy commits between branches
024  clean                    :
025  clone                    :
026  column                   :
027  commit                   :
030  commit-tree              :
031  config                   :
032  count-objects            :
033  credential               :
034  credential-cache         :
035  credential-cache--daemon :
036  credential-store         :
037  daemon                   :
040  describe                 :
041  diff                     :
042  diff-files               :
043  diff-index               :
044  diff-tree                :
045  difftool                 :
046  difftool--helper         :
047  fast-export              :
050  fast-import              :
051  fetch                    :
052  fetch-pack               :
053  filter-branch            :
054  fmt-merge-msg            :
055  for-each-ref             :
056  format-patch             :
057  fsck                     :
060  fsck-objects             :
061  gc                       :
062  get-tar-commit-id        :
063  grep                     :
064  hash-object              : calculate the SHA1 of a file:  git hash-object pippo.txt
065  help                     :
066  http-backend             :
067  http-fetch               :
070  http-push                :
071  imap-send                :
072  index-pack               :
073  init                     :
074  init-db                  :
075  instaweb                 :
076  log                      :
077  ls-files                 :
078  ls-remote                :
079  ls-tree                  :
080  mailinfo                 :
081  mailsplit                :
082  merge                    :
083  merge-base               : to find the commit where a branch B is forked from a branch A:  git merge-base A B
084  merge-file               :
085  merge-index              :
086  merge-octopus            :
087  merge-one-file           :
088  merge-ours               :
089  merge-recursive          :
090  merge-resolve            :
091  merge-subtree            :
092  merge-tree               :
093  mergetool                :
094  mktag                    :
095  mktree                   :
096  mv                       :
097  name-rev                 :
098  notes                    :
099  p4                       :
100  pack-objects             :
101  pack-redundant           :
102  pack-refs                :
103  patch-id                 :
104  prune                    :
105  prune-packed             :
106  pull                     :
107  push                     :
108  quiltimport              :
109  read-tree                :
110  rebase                   :
111  receive-pack             :
112  reflog                   : to see the history os submitted cmd
113  relink                   :
114  remote                   :
115  remote-ext               :
116  remote-fd                :
117  remote-ftp               :
118  remote-ftps              :
119  remote-http              :
120  remote-https             :
121  remote-testsvn           :
122  repack                   :
123  replace                  :
124  request-pull             :
125  rerere                   :
126  reset                    :
127  rev-list                 :
128  rev-parse                :
129  revert                   :
130  rm                       :
131  send-pack                :
132  sh-i18n--envsubst        :
133  shell                    :
134  shortlog                 :
135  show                     :
144  subtree                  :
145  symbolic-ref             :
146  tag                      :
147  unpack-file              :
148  unpack-objects           :
149  update-index             :
150  update-ref               :
151  update-server-info       :
152  upload-archive           :
153  upload-pack              :
154  var                      :
155  verify-pack              :
156  verify-tag               :
157  web--browse              :
158  whatchanged              :
159  write-tree               :

